
MyProyects/RtosIItp2/out/RtosIItp2.elf:     file format elf32-littlearm
MyProyects/RtosIItp2/out/RtosIItp2.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a004151

Program Header:
0x70000001 off    0x0000cb78 vaddr 0x1a004b78 paddr 0x1a004b78 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x000033a0 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00004b80 memsz 0x00004b80 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a004b80 align 2**15
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b78  1a000000  1a000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  10000000  1a004b80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100d0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100d0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100d0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100d0  2**2
                  CONTENTS
  6 .bss          000032d0  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100d0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100d0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100d0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100d0  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004b78  1a004b78  0000cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100d0  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100d0  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100d0  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100d0  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100d0  2**2
                  CONTENTS
 17 .noinit       00000000  100033a0  100033a0  000100d0  2**2
                  CONTENTS
 18 .debug_info   00020a77  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004e87  00000000  00000000  00030b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b14d  00000000  00000000  000359ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000ff8  00000000  00000000  00040b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000ee8  00000000  00000000  00041b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000103c9  00000000  00000000  000429fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000161f4  00000000  00000000  00052dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002d83f  00000000  00000000  00068fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  000967f7  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  00096867  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000029a4  00000000  00000000  000968a0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004b78 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100033a0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002bf4 l     F .text	000000b8 uartProcessIRQ
100032cc l     O .bss	00000004 rxIsrCallbackUART2Params
100032d0 l     O .bss	00000004 txIsrCallbackUART2Params
100032d4 l     O .bss	00000004 rxIsrCallbackUART0
100032d8 l     O .bss	00000004 txIsrCallbackUART0
100032dc l     O .bss	00000004 rxIsrCallbackUART3Params
100032e0 l     O .bss	00000004 rxIsrCallbackUART0Params
100032e4 l     O .bss	00000004 txIsrCallbackUART3Params
100032e8 l     O .bss	00000004 txIsrCallbackUART0Params
100032ec l     O .bss	00000004 txIsrCallbackUART3
100032f0 l     O .bss	00000004 txIsrCallbackUART2
1a004870 l     O .text	00000048 lpcUarts
100032f4 l     O .bss	00000004 rxIsrCallbackUART2
100032f8 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 driver.c
100000d4 l     O .bss	00000004 contador.12870
10000000 l     O .data	00000001 temp_flag.12874
10000001 l     O .data	00000001 temp_flag.12881
00000000 l    df *ABS*	00000000 crc8.c
1a004824 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 ao.c
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 RtosIItp2.c
100000e8 l     O .bss	000007b4 my_driver.12849
00000000 l    df *ABS*	00000000 heap_1.c
1000089c l     O .bss	00000004 xNextFreeByte
100008a0 l     O .bss	00002000 ucHeap
100028a0 l     O .bss	00000004 pucAlignedHeap.9926
00000000 l    df *ABS*	00000000 queue.c
1a000c4c l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000c60 l     F .text	0000001e prvIsQueueFull
1a000c80 l     F .text	0000001a prvIsQueueEmpty
1a000c9c l     F .text	00000076 prvCopyDataToQueue
1a000d14 l     F .text	00000024 prvCopyDataFromQueue
1a000d38 l     F .text	0000006a prvUnlockQueue
1a000e24 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100028a4 l     O .bss	00000168 uxIdleTaskStack.9314
10002a0c l     O .bss	00000060 xIdleTaskTCB.9313
10002a6c l     O .bss	00000060 xTimerTaskTCB.9320
10002acc l     O .bss	000005a0 uxTimerTaskStack.9321
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001754 l     F .text	00000034 prvResetNextTaskUnblockTime
1a001788 l     F .text	00000092 prvInitialiseNewTask
1a00181c l     F .text	00000068 prvInitialiseTaskLists
1a001884 l     F .text	000000a8 prvAddNewTaskToReadyList
1a00192c l     F .text	0000003a prvDeleteTCB
1a001968 l     F .text	00000044 prvCheckTasksWaitingTermination
1a0019ac l     F .text	00000028 prvIdleTask
1a0019d4 l     F .text	00000094 prvAddCurrentTaskToDelayedList
1000306c l     O .bss	00000004 xNumOfOverflows
10003070 l     O .bss	00000004 pxDelayedTaskList
10003074 l     O .bss	00000004 xSchedulerRunning
10003078 l     O .bss	00000014 xTasksWaitingTermination
1000308c l     O .bss	00000004 pxOverflowDelayedTaskList
10003090 l     O .bss	00000004 uxPendedTicks
10003094 l     O .bss	0000008c pxReadyTasksLists
10003120 l     O .bss	00000004 uxSchedulerSuspended
10003124 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10003128 l     O .bss	00000004 uxCurrentNumberOfTasks
10003130 l     O .bss	00000014 xPendingReadyList
10003144 l     O .bss	00000004 xIdleTaskHandle
10003148 l     O .bss	00000004 xTickCount
1000314c l     O .bss	00000004 xNextTaskUnblockTime
10003150 l     O .bss	00000004 uxTaskNumber
10003154 l     O .bss	00000014 xDelayedTaskList1
10003168 l     O .bss	00000014 xDelayedTaskList2
1000317c l     O .bss	00000014 xSuspendedTaskList
10003190 l     O .bss	00000004 uxTopReadyPriority
10003194 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002360 l     F .text	00000020 prvGetNextExpireTime
1a002380 l     F .text	00000048 prvInsertTimerInActiveList
1a0023c8 l     F .text	0000006c prvCheckForValidListAndQueue
1a002434 l     F .text	00000040 prvInitialiseNewTimer
1a002820 l     F .text	00000016 prvTimerTask
1a0025d8 l     F .text	0000007c prvSwitchTimerLists
1a002654 l     F .text	0000002c prvSampleTimeNow
1a002680 l     F .text	0000005c prvProcessExpiredTimer
1a0026dc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002750 l     F .text	000000d0 prvProcessReceivedCommands
10003198 l     O .bss	00000004 pxCurrentTimerList
1000319c l     O .bss	00000014 xActiveTimerList1
100031b0 l     O .bss	00000014 xActiveTimerList2
100031c4 l     O .bss	000000a0 ucStaticTimerQueueStorage.10316
10003264 l     O .bss	00000004 xLastTime.10265
10003268 l     O .bss	00000050 xStaticTimerQueue.10315
100032b8 l     O .bss	00000004 xTimerQueue
100032bc l     O .bss	00000004 pxOverflowTimerList
100032c0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002838 l     F .text	00000040 prvTaskExitError
1a002878 l     F .text	00000022 prvPortStartFirstTask
1a0028a0 l     F .text	0000000e vPortEnableVFP
1a002900 l       .text	00000000 pxCurrentTCBConst2
1a0029e0 l       .text	00000000 pxCurrentTCBConst
100032c4 l     O .bss	00000001 ucMaxSysCallPriority
100032c8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000000c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
100032fc l     O .bss	00000004 tickHookFunction
10003300 l     O .bss	00000030 tickerObject.10478
10003330 l     O .bss	00000008 tickCounter
10003338 l     O .bss	00000004 callBackFuncParams
00000000 l    df *ABS*	00000000 sapi_timer.c
1a002f6c l     F .text	00000002 errorOcurred
1a002f70 l     F .text	00000002 doNothing
10000010 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003070 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000333c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0033a0 l     F .text	00000010 clearInterrupt
1a0033b0 l     F .text	00000060 serveInterrupt
10000050 l     O .data	00000048 ultrasonicSensors
1a0049fc l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board.c
1a003434 l     F .text	00000040 Board_LED_Init
1a003474 l     F .text	0000003c Board_TEC_Init
1a0034b0 l     F .text	0000003c Board_GPIO_Init
1a0034ec l     F .text	00000038 Board_SPI_Init
1a003524 l     F .text	00000024 Board_I2C_Init
1a003548 l     F .text	00000030 Board_ADC_Init
1a004a00 l     O .text	00000012 GpioPorts
1a004a1c l     O .text	00000008 GpioButtons
1a004a24 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004a30 l     O .text	00000004 InitClkStates
1a004a34 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003690 l     F .text	0000002c Chip_UART_GetIndex
1a004aa8 l     O .text	00000008 UART_BClock
1a004ab0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003834 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003848 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00390c l     F .text	000000a8 pll_calc_divs
1a0039b4 l     F .text	00000104 pll_get_frac
1a003ab8 l     F .text	00000048 Chip_Clock_FindBaseClock
1a003d24 l     F .text	00000022 Chip_Clock_GetDivRate
10003340 l     O .bss	00000008 audio_usb_pll_freq
1a004ac4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004b30 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000098 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004098 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0040ac l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a004b80 l       .ARM.exidx	00000000 __exidx_end
1a004b80 l       .ARM.exidx	00000000 _etext
00000000 l       *UND*	00000000 USB_StringDescriptor
00000000 l       *UND*	00000000 USB_DeviceDescriptor
20008000 l       *ABS*	00000000 __top_RamAHB32
1a004b78 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 Keyboard_ReportDescSize
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a004b78 l       .bss_RAM5	00000000 __init_array_end
00000000 l       *UND*	00000000 Keyboard_ReportDescriptor
00000000 l       *UND*	00000000 USB_DeviceQualifier
1a004b78 l       .bss_RAM5	00000000 __preinit_array_end
00000000 l       *UND*	00000000 USB_HsConfigDescriptor
100033a0 l       .bss	00000000 _pvHeapStart
00000000 l       *UND*	00000000 USB_FsConfigDescriptor
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a004b78 l       .bss_RAM5	00000000 __init_array_start
1a004b78 l       .bss_RAM5	00000000 __preinit_array_start
1a003b4c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000310 g     F .text	000000e8 uartUsbReceiveCallback
1a0047e6 g     F .text	00000010 strcpy
1a004238 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002ff0 g     F .text	00000040 TIMER2_IRQHandler
1a002e0c g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a00030c g     F .text	00000002 Tx232TimerCallback
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a00426c g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
100000e0 g     O .bss	00000004 SemBinChannelBusyUsb
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002954 g     F .text	0000002c vPortExitCritical
1a0024e4 g     F .text	00000038 xTimerCreate
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a000188  w    F .text	00000002 HardFault_Handler
1a00163c g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a0038ec g     F .text	0000000c Chip_ADC_SetResolution
1a0029f0 g     F .text	0000002c SysTick_Handler
1a003710 g     F .text	00000040 Chip_UART_SetBaud
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a002980 g     F .text	00000064 PendSV_Handler
1a0010d4 g     F .text	000000e4 xQueueGenericSendFromISR
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a000978 g     F .text	0000000e OAProcessPacket
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
100000d8 g     O .bss	00000004 SemBinPacketReceivedUsb
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1000312c g     O .bss	00000004 pxCurrentTCB
53ff36ee g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a00203c g     F .text	00000018 vTaskInternalSetTimeOutState
1a002de4 g     F .text	00000028 uartCallbackClr
1a003030 g     F .text	00000040 TIMER3_IRQHandler
1a003db0 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a002a54 g     F .text	00000128 xPortStartScheduler
1a0047c0 g     F .text	00000016 memcpy
1a001f48 g     F .text	00000030 vTaskPlaceOnEventList
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a002a1c  w    F .text	00000038 vPortSetupTimerInterrupt
1a000b1c g     F .text	000000b4 APP_Task
1a0041d8 g     F .text	00000000 .hidden __aeabi_uldivmod
100033a0 g       .noinit	00000000 _noinit
1a000c34 g     F .text	00000016 vPortFree
1000339c g     O .bss	00000004 SystemCoreClock
1a0036bc g     F .text	00000054 Chip_UART_Init
1a0013cc g     F .text	00000190 xQueueSemaphoreTake
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002ef4 g     F .text	0000002c tickerCallback
1a002b7c g     F .text	0000005c vPortValidateInterruptPriority
1a000194  w    F .text	00000002 UsageFault_Handler
1a003e2c g     F .text	0000004c Chip_Clock_GetRate
1a0016a8 g     F .text	00000018 vListInsertEnd
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a003618 g     F .text	0000006c Board_SetupClocking
10003348 g     O .bss	00000004 dataRecieve232
1a004a18 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0016a0 g     F .text	00000006 vListInitialiseItem
1a00341c g     F .text	0000000a GPIO1_IRQHandler
1a001274 g     F .text	00000158 xQueueReceive
10003358 g     O .bss	00000040 xQueueRegistry
1a001734 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1000334c g     O .bss	00000004 dataRecieveUsb
1a000308 g     F .text	00000002 Rx232TimerCallback
1a004774 g     F .text	0000004c __libc_init_array
1a004508 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a000bd0 g     F .text	00000064 pvPortMalloc
1a000304 g     F .text	00000002 uart232ReceiveCallback
1a00359c g     F .text	0000002c Board_Init
1a0041d4 g     F .text	00000002 _init
1a001688 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001bfc g     F .text	0000000c xTaskGetTickCount
1a000f44 g     F .text	00000190 xQueueGenericSend
1a0001a8  w    F .text	00000002 RTC_IRQHandler
100033a0 g       .bss	00000000 _ebss
1a002f74 g     F .text	0000003c TIMER0_IRQHandler
1a000a1c g     F .text	00000046 QMPool_get
1a000300 g     F .text	00000002 uart232SendCallback
1a002f20 g     F .text	0000004c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a004068 g     F .text	00000030 Chip_I2C_SetClockRate
1a0021c4 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a003b00 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0003f8 g     F .text	000000fc uartUsbSendCallback
10003350 g     O .bss	00000004 dataSend232
1a001fb0 g     F .text	0000008c xTaskRemoveFromEventList
1a001750 g     F .text	00000002 vApplicationMallocFailedHook
1a0001ac g     F .text	0000001a data_init
1a002fb0 g     F .text	00000040 TIMER1_IRQHandler
1a004044 g     F .text	00000024 Chip_I2C_Init
1a002eb0 g     F .text	0000000a UART2_IRQHandler
100000dc g     O .bss	00000004 SemBinChannelBusy232
1a003cbc g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0048c4 g     O .text	00000136 gpioPinsInit
1a002cac g     F .text	00000080 uartInterrupt
1a002344 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0040c4 g     F .text	00000012 Chip_SSP_SetClockRate
1a003428 g     F .text	0000000a GPIO2_IRQHandler
1a002054 g     F .text	00000080 xTaskCheckForTimeOut
1a003d8c g     F .text	00000024 Chip_Clock_GetBaseClock
1a002100 g     F .text	000000c4 xTaskPriorityInherit
100000d0 g       .bss	00000000 _bss
1a0038b8 g     F .text	00000032 Chip_ADC_SetSampleRate
100000d0 g     O .bss	00000004 SemBinPacketReceived232
1a001bec g     F .text	00000010 vTaskSuspendAll
1a001c08 g     F .text	00000010 xTaskGetTickCountFromISR
1a002ec8 g     F .text	0000002c uartSetPendingInterrupt
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a0040d8 g     F .text	0000003e Chip_SSP_SetBitRate
1a0016f4 g     F .text	00000026 uxListRemove
1a004020 g     F .text	00000002 Chip_GPIO_Init
1a004a14 g     O .text	00000004 OscRateIn
1a002e34 g     F .text	0000007c uartInit
1a001a68 g     F .text	0000007c xTaskCreateStatic
100033a0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001e84 g     F .text	000000c4 vTaskSwitchContext
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000e48 g     F .text	000000aa xQueueGenericCreateStatic
1a001f78 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00309c g     F .text	0000019c gpioInit
1a00171c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a00256c g     F .text	0000006c xTimerGenericCommand
1a00174c g     F .text	00000002 vApplicationStackOverflowHook
1a004268  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0008e4 g     F .text	00000030 crc8_calc
1a003290 g     F .text	0000001c USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a003b68 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0006b8 g     F .text	00000008 DriverConfigUART
1a0047d6 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000ab8 g     F .text	0000004c main
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a0016c0 g     F .text	00000034 vListInsert
1a0028e0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a0009f4 g     F .text	00000028 QMPool_put_from_ISR
1a002474 g     F .text	00000070 xTimerCreateTimerTask
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a003dbc g     F .text	0000003c Chip_Clock_EnableOpts
1a00155c g     F .text	000000b8 xQueueReceiveFromISR
1a000ef4 g     F .text	00000050 xQueueGenericCreate
1a003b84 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003fc8 g     F .text	00000058 fpuInit
1a0008e0 g     F .text	00000004 crc8_init
1a000588 g     F .text	000000b0 DriverSend
1a003c3c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000638 g     F .text	00000080 DriverReceive
1a0035c8 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003238 g     F .text	00000058 gpioWrite
1a0006c0 g     F .text	00000220 DriverInitialize
1a001d3c g     F .text	000000f8 xTaskResumeAll
1a001b4c g     F .text	000000a0 vTaskStartScheduler
1a003878 g     F .text	00000040 Chip_ADC_Init
10003398 g     O .bss	00000004 g_pUsbApi
1a0035e4 g     F .text	00000034 Board_SetupMuxing
1a0009d4 g     F .text	0000001e QMPool_put
1a003750 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a000914 g     F .text	00000024 crc8_check
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002e20 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
100000e4 g     O .bss	00000004 SemBinPacketTxDelayUsb
10000000 g       .data	00000000 _data
1a0020d4 g     F .text	0000000c vTaskMissedYield
1a000548 g     F .text	00000040 TxUsbTimerCallback
1a000178 g       .text	00000000 __section_table_end
1a004118 g     F .text	00000038 Chip_SSP_Init
1a001614 g     F .text	00000028 vQueueAddToRegistry
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a001c18 g     F .text	00000124 xTaskIncrementTick
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a003578 g     F .text	00000024 Board_Debug_Init
1a000da4 g     F .text	00000080 xQueueGenericReset
100000d0 g       .data	00000000 _edata
1a004024 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001ae4 g     F .text	00000066 xTaskCreate
1a003e78 g     F .text	00000150 Chip_SetupCoreClock
1a000a64 g     F .text	00000054 QMPool_get_from_ISR
1a003410 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a004150 g     F .text	00000084 ResetISR
1a0038f8 g     F .text	00000014 SystemCoreClockUpdate
10003354 g     O .bss	00000004 dataSendUsb
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a001e34 g     F .text	00000050 vTaskDelay
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a000988 g     F .text	0000004c QMPool_init
1a0020e0 g     F .text	00000020 xTaskGetSchedulerState
1a002278 g     F .text	000000cc vTaskPriorityDisinheritAfterTimeout
1a004268  w    F .text	00000002 .hidden __aeabi_idiv0
1a002d2c g     F .text	000000b8 uartCallbackSet
1a000190  w    F .text	00000002 BusFault_Handler
1a0028b4 g     F .text	0000002c pxPortInitialiseStack
1a003df8 g     F .text	00000034 Chip_Clock_Enable
1a002ebc g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a00251c g     F .text	0000004e xTimerCreateStatic
1a000b04 g     F .text	00000018 get_function_from_packet
1a004208 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a0032ac g     F .text	000000f4 boardInit
1a002910 g     F .text	00000044 vPortEnterCritical
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a003d48 g     F .text	00000044 Chip_Clock_SetBaseClock
1a002bd8 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a0011b8 g     F .text	000000ba xQueueGiveFromISR
1a003684 g     F .text	0000000c Board_SystemInit
1a0004f4 g     F .text	00000054 RxUsbTimerCallback
1a000938 g     F .text	00000040 OAInitialize



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 51 41 00 1a 85 01 00 1a 89 01 00 1a     ....QA..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a ee 36 ff 53     .............6.S
	...
1a00002c:	e1 28 00 1a 9d 01 00 1a 00 00 00 00 81 29 00 1a     .(...........)..
1a00003c:	f1 29 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .)..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a 91 32 00 1a a9 01 00 1a a9 01 00 1a     .....2..........
1a00006c:	a9 01 00 1a 75 2f 00 1a b1 2f 00 1a f1 2f 00 1a     ....u/.../.../..
1a00007c:	31 30 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     10..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a b1 2e 00 1a     ....y...........
1a0000ac:	bd 2e 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000bc:	a9 01 00 1a 11 34 00 1a 1d 34 00 1a 29 34 00 1a     .....4...4..)4..
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a004b80 	.word	0x1a004b80
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000d0 	.word	0x000000d0
1a000120:	1a004b80 	.word	0x1a004b80
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004b80 	.word	0x1a004b80
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004b80 	.word	0x1a004b80
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004b80 	.word	0x1a004b80
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	000032d0 	.word	0x000032d0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 fd3a 	bl	1a002bf4 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <UsageFault_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <DebugMon_Handler+0x4>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <DebugMon_Handler+0x8>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <uart232SendCallback>:
	}
}

// Envio a la PC desde la UART_232
void uart232SendCallback( void * driver_actual )
{
1a000300:	4770      	bx	lr
1a000302:	bf00      	nop

1a000304 <uart232ReceiveCallback>:
}


// Recibo de la PC en la UART_232
void uart232ReceiveCallback( void * driver_actual )
{
1a000304:	4770      	bx	lr
1a000306:	bf00      	nop

1a000308 <Rx232TimerCallback>:
	xSemaphoreGive( SemBinChannelBusyUsb);

}

void Rx232TimerCallback( TimerHandle_t xTimer )
{
1a000308:	4770      	bx	lr
1a00030a:	bf00      	nop

1a00030c <Tx232TimerCallback>:
	xSemaphoreGive( SemBinPacketTxDelayUsb);

}

void Tx232TimerCallback( TimerHandle_t xTimer )
{
1a00030c:	4770      	bx	lr
1a00030e:	bf00      	nop

1a000310 <uartUsbReceiveCallback>:
/*==================[internal functions definition]==========================*/


// Recibo de la PC en la UART_USB
void uartUsbReceiveCallback( void * driver_actual )
{
1a000310:	b570      	push	{r4, r5, r6, lr}
1a000312:	b084      	sub	sp, #16
1a000314:	4604      	mov	r4, r0
	BaseType_t xHigherPriorityTaskWoken;
	static uint32_t contador = 0;
	uint8_t lectura = 0;

	//Verifico que no haya terminado de recibir informacion previamente
	if( xSemaphoreTakeFromISR( SemBinPacketReceivedUsb, xHigherPriorityTaskWoken ) )
1a000316:	4b34      	ldr	r3, [pc, #208]	; (1a0003e8 <uartUsbReceiveCallback+0xd8>)
1a000318:	6818      	ldr	r0, [r3, #0]
1a00031a:	2100      	movs	r1, #0
1a00031c:	9a03      	ldr	r2, [sp, #12]
1a00031e:	f001 f91d 	bl	1a00155c <xQueueReceiveFromISR>
1a000322:	b1a0      	cbz	r0, 1a00034e <uartUsbReceiveCallback+0x3e>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000324:	f3ef 8611 	mrs	r6, BASEPRI
1a000328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00032c:	f383 8811 	msr	BASEPRI, r3
1a000330:	f3bf 8f6f 	isb	sy
1a000334:	f3bf 8f4f 	dsb	sy
	{
		UBaseType_t uxSavedInterruptStatus;
		uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
		//esto significa que tengo la informacion en el puntero dataRecieveUsb termino de recibirse correctamente.
		xQueueSendFromISR(((driver_t*)driver_actual)->queLlego, & (dataRecieveUsb), &xHigherPriorityTaskWoken );// Envio el puntero a la cola
1a000338:	4d2c      	ldr	r5, [pc, #176]	; (1a0003ec <uartUsbReceiveCallback+0xdc>)
1a00033a:	68e0      	ldr	r0, [r4, #12]
1a00033c:	4629      	mov	r1, r5
1a00033e:	aa03      	add	r2, sp, #12
1a000340:	2300      	movs	r3, #0
1a000342:	f000 fec7 	bl	1a0010d4 <xQueueGenericSendFromISR>
		// si la cola esta yena igualmente pierdo el paquete recibido.
		dataRecieveUsb= NULL; // limpio nuevamente el puntero
1a000346:	2300      	movs	r3, #0
1a000348:	602b      	str	r3, [r5, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00034a:	f386 8811 	msr	BASEPRI, r6
		taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
	}


	if(dataRecieveUsb == NULL) // si el puntero esta vacio significa que esta comenzando la recepcion de un nuevo paquete.
1a00034e:	4b27      	ldr	r3, [pc, #156]	; (1a0003ec <uartUsbReceiveCallback+0xdc>)
1a000350:	681b      	ldr	r3, [r3, #0]
1a000352:	b9bb      	cbnz	r3, 1a000384 <uartUsbReceiveCallback+0x74>
	{
		lectura = uartRxRead(UART_USB);
1a000354:	2003      	movs	r0, #3
1a000356:	f002 fd59 	bl	1a002e0c <uartRxRead>
		if (lectura == '[') // esta comenzando a leer un paquete nuevo
1a00035a:	285b      	cmp	r0, #91	; 0x5b
1a00035c:	d137      	bne.n	1a0003ce <uartUsbReceiveCallback+0xbe>
		{
			if( xSemaphoreTakeFromISR( SemBinChannelBusyUsb, xHigherPriorityTaskWoken ) ) // tomo el semaforo para ocupar el canal USB
1a00035e:	4b24      	ldr	r3, [pc, #144]	; (1a0003f0 <uartUsbReceiveCallback+0xe0>)
1a000360:	6818      	ldr	r0, [r3, #0]
1a000362:	2100      	movs	r1, #0
1a000364:	9a03      	ldr	r2, [sp, #12]
1a000366:	f001 f8f9 	bl	1a00155c <xQueueReceiveFromISR>
1a00036a:	2800      	cmp	r0, #0
1a00036c:	d02f      	beq.n	1a0003ce <uartUsbReceiveCallback+0xbe>
			{

				//funcion agregada al QMPool para funcionar desdes ISR
				dataRecieveUsb = QMPool_get_from_ISR( &(((driver_t*)driver_actual)->mem_pool_1), 0U ); //Solicito un bloque de memoria
1a00036e:	f104 0020 	add.w	r0, r4, #32
1a000372:	2100      	movs	r1, #0
1a000374:	f000 fb76 	bl	1a000a64 <QMPool_get_from_ISR>
1a000378:	4b1c      	ldr	r3, [pc, #112]	; (1a0003ec <uartUsbReceiveCallback+0xdc>)
1a00037a:	6018      	str	r0, [r3, #0]
				if (dataRecieveUsb != NULL)
1a00037c:	b338      	cbz	r0, 1a0003ce <uartUsbReceiveCallback+0xbe>
				{
					dataRecieveUsb->size = 0;// inicializo su tamaño en 1.
1a00037e:	2300      	movs	r3, #0
1a000380:	6003      	str	r3, [r0, #0]
1a000382:	e024      	b.n	1a0003ce <uartUsbReceiveCallback+0xbe>
				}
			}
		}
	}

	else if ( dataRecieveUsb->size < dataMaxSize) // verifico que el tamaño sea dentro del tamaño aceptado. Sino no renuevo el timer.
1a000384:	681b      	ldr	r3, [r3, #0]
1a000386:	2b7b      	cmp	r3, #123	; 0x7b
1a000388:	d821      	bhi.n	1a0003ce <uartUsbReceiveCallback+0xbe>
	{
		lectura = uartRxRead(UART_USB);
1a00038a:	2003      	movs	r0, #3
1a00038c:	f002 fd3e 	bl	1a002e0c <uartRxRead>
		if (lectura == ']') // esta terminando de leer un paquete
1a000390:	285d      	cmp	r0, #93	; 0x5d
1a000392:	d10a      	bne.n	1a0003aa <uartUsbReceiveCallback+0x9a>
		{
			// Libero el semaforo avisando que se termino la recepcion de un paquete entero
			xSemaphoreGiveFromISR( SemBinPacketReceivedUsb, xHigherPriorityTaskWoken );
1a000394:	4b14      	ldr	r3, [pc, #80]	; (1a0003e8 <uartUsbReceiveCallback+0xd8>)
1a000396:	6818      	ldr	r0, [r3, #0]
1a000398:	9903      	ldr	r1, [sp, #12]
1a00039a:	f000 ff0d 	bl	1a0011b8 <xQueueGiveFromISR>
			// Libero el semaforo avisando que se enceuntra el canal libre
			xSemaphoreGiveFromISR( SemBinChannelBusyUsb, xHigherPriorityTaskWoken);
1a00039e:	4b14      	ldr	r3, [pc, #80]	; (1a0003f0 <uartUsbReceiveCallback+0xe0>)
1a0003a0:	6818      	ldr	r0, [r3, #0]
1a0003a2:	9903      	ldr	r1, [sp, #12]
1a0003a4:	f000 ff08 	bl	1a0011b8 <xQueueGiveFromISR>
1a0003a8:	e011      	b.n	1a0003ce <uartUsbReceiveCallback+0xbe>

		}
		else
		{
			dataRecieveUsb->data[dataRecieveUsb->size] = lectura;
1a0003aa:	4b10      	ldr	r3, [pc, #64]	; (1a0003ec <uartUsbReceiveCallback+0xdc>)
1a0003ac:	681a      	ldr	r2, [r3, #0]
1a0003ae:	6813      	ldr	r3, [r2, #0]
1a0003b0:	18d1      	adds	r1, r2, r3
1a0003b2:	7108      	strb	r0, [r1, #4]
			dataRecieveUsb->size++;
1a0003b4:	3301      	adds	r3, #1
1a0003b6:	6013      	str	r3, [r2, #0]

			if( xTimerStartFromISR(((driver_t*)driver_actual)->rxTimer,&xHigherPriorityTaskWoken ) != pdPASS )
1a0003b8:	6924      	ldr	r4, [r4, #16]
1a0003ba:	f001 fc25 	bl	1a001c08 <xTaskGetTickCountFromISR>
1a0003be:	4602      	mov	r2, r0
1a0003c0:	2300      	movs	r3, #0
1a0003c2:	9300      	str	r3, [sp, #0]
1a0003c4:	4620      	mov	r0, r4
1a0003c6:	2106      	movs	r1, #6
1a0003c8:	ab03      	add	r3, sp, #12
1a0003ca:	f002 f8cf 	bl	1a00256c <xTimerGenericCommand>

			}
		}
	}

	if( xHigherPriorityTaskWoken != pdFALSE )
1a0003ce:	9b03      	ldr	r3, [sp, #12]
1a0003d0:	b143      	cbz	r3, 1a0003e4 <uartUsbReceiveCallback+0xd4>
	{
		/* Call the interrupt safe yield function here (actual function
        depends on the FreeRTOS port being used). */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0003d2:	b13b      	cbz	r3, 1a0003e4 <uartUsbReceiveCallback+0xd4>
1a0003d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003d8:	4b06      	ldr	r3, [pc, #24]	; (1a0003f4 <uartUsbReceiveCallback+0xe4>)
1a0003da:	601a      	str	r2, [r3, #0]
1a0003dc:	f3bf 8f4f 	dsb	sy
1a0003e0:	f3bf 8f6f 	isb	sy
	}
}
1a0003e4:	b004      	add	sp, #16
1a0003e6:	bd70      	pop	{r4, r5, r6, pc}
1a0003e8:	100000d8 	.word	0x100000d8
1a0003ec:	1000334c 	.word	0x1000334c
1a0003f0:	100000e0 	.word	0x100000e0
1a0003f4:	e000ed04 	.word	0xe000ed04

1a0003f8 <uartUsbSendCallback>:
	 */
}

// Envio a la PC desde la UART_USB
void uartUsbSendCallback( void * driver_actual )
{
1a0003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0003fa:	b085      	sub	sp, #20
1a0003fc:	4604      	mov	r4, r0
	BaseType_t xHigherPriorityTaskWoken;
	//UBaseType_t uxSavedInterruptStatus;
	static uint32_t contador = 0;

	xHigherPriorityTaskWoken = pdFALSE;/* We have not woken a task at the start of the ISR. */
1a0003fe:	2300      	movs	r3, #0
1a000400:	9303      	str	r3, [sp, #12]

	if(dataSendUsb == NULL) // si el puntero esta vacio reviso si hay algo nuevo en la cola
1a000402:	4b37      	ldr	r3, [pc, #220]	; (1a0004e0 <uartUsbSendCallback+0xe8>)
1a000404:	681b      	ldr	r3, [r3, #0]
1a000406:	b9bb      	cbnz	r3, 1a000438 <uartUsbSendCallback+0x40>
	{
		if( xSemaphoreTakeFromISR( SemBinPacketTxDelayUsb, xHigherPriorityTaskWoken ) ) // tomo el semaforo que indica que comence a transmitir
1a000408:	4b36      	ldr	r3, [pc, #216]	; (1a0004e4 <uartUsbSendCallback+0xec>)
1a00040a:	6818      	ldr	r0, [r3, #0]
1a00040c:	2100      	movs	r1, #0
1a00040e:	460a      	mov	r2, r1
1a000410:	f001 f8a4 	bl	1a00155c <xQueueReceiveFromISR>
1a000414:	2800      	cmp	r0, #0
1a000416:	d056      	beq.n	1a0004c6 <uartUsbSendCallback+0xce>
		{
			if( xQueueReceiveFromISR(((driver_t*)driver_actual)->queTransmitir, & (dataSendUsb), &xHigherPriorityTaskWoken ) )
1a000418:	68a0      	ldr	r0, [r4, #8]
1a00041a:	4931      	ldr	r1, [pc, #196]	; (1a0004e0 <uartUsbSendCallback+0xe8>)
1a00041c:	aa03      	add	r2, sp, #12
1a00041e:	f001 f89d 	bl	1a00155c <xQueueReceiveFromISR>
1a000422:	b118      	cbz	r0, 1a00042c <uartUsbSendCallback+0x34>
			{
				// Reviso que no hay algo en la cola. Si no hay, nada no estpero.
				contador = 0; // inicializo el contador para comenzar a transmitir
1a000424:	2200      	movs	r2, #0
1a000426:	4b30      	ldr	r3, [pc, #192]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a000428:	601a      	str	r2, [r3, #0]
1a00042a:	e04c      	b.n	1a0004c6 <uartUsbSendCallback+0xce>
			}
			else
			{
				xSemaphoreGiveFromISR( SemBinPacketTxDelayUsb, xHigherPriorityTaskWoken );// libero el semaforo para que vuelva a intentar
1a00042c:	4b2d      	ldr	r3, [pc, #180]	; (1a0004e4 <uartUsbSendCallback+0xec>)
1a00042e:	6818      	ldr	r0, [r3, #0]
1a000430:	9903      	ldr	r1, [sp, #12]
1a000432:	f000 fec1 	bl	1a0011b8 <xQueueGiveFromISR>
1a000436:	e046      	b.n	1a0004c6 <uartUsbSendCallback+0xce>
		}
	}
	else // si no esta vacio es porque hay algo en transmision
	{

		if (contador ==0)
1a000438:	4b2b      	ldr	r3, [pc, #172]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a00043a:	681b      	ldr	r3, [r3, #0]
1a00043c:	b973      	cbnz	r3, 1a00045c <uartUsbSendCallback+0x64>
		{
			//Esta comenzando a transmitir
			if( xSemaphoreTakeFromISR( SemBinChannelBusyUsb, xHigherPriorityTaskWoken ) ) // tomo el semaforo para ocupar el canal USB
1a00043e:	4b2b      	ldr	r3, [pc, #172]	; (1a0004ec <uartUsbSendCallback+0xf4>)
1a000440:	6818      	ldr	r0, [r3, #0]
1a000442:	2100      	movs	r1, #0
1a000444:	460a      	mov	r2, r1
1a000446:	f001 f889 	bl	1a00155c <xQueueReceiveFromISR>
1a00044a:	b138      	cbz	r0, 1a00045c <uartUsbSendCallback+0x64>
			{
				//si el canal esta libre envio el primer byte de inicio
				uartTxWrite(UART_USB, '[');
1a00044c:	2003      	movs	r0, #3
1a00044e:	215b      	movs	r1, #91	; 0x5b
1a000450:	f002 fce6 	bl	1a002e20 <uartTxWrite>
				//uartTxWrite(UART_USB, dataSendUsb->data[contador]);
				contador++;
1a000454:	4a24      	ldr	r2, [pc, #144]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a000456:	6813      	ldr	r3, [r2, #0]
1a000458:	3301      	adds	r3, #1
1a00045a:	6013      	str	r3, [r2, #0]
			}
		}
		if (contador == dataSendUsb->size+1) // si el tamaño es igual es porque termino de enviar los bytes
1a00045c:	4b20      	ldr	r3, [pc, #128]	; (1a0004e0 <uartUsbSendCallback+0xe8>)
1a00045e:	6819      	ldr	r1, [r3, #0]
1a000460:	680a      	ldr	r2, [r1, #0]
1a000462:	3201      	adds	r2, #1
1a000464:	4b20      	ldr	r3, [pc, #128]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a000466:	681b      	ldr	r3, [r3, #0]
1a000468:	429a      	cmp	r2, r3
1a00046a:	d123      	bne.n	1a0004b4 <uartUsbSendCallback+0xbc>
		{
			//uartTxWrite(((driver_t*)driver_actual)->uart_type, dataSendUsb->data[contador]); // envio el ultiimo byte
			uartTxWrite(UART_USB, ']');// envio el ultiimo byte
1a00046c:	2003      	movs	r0, #3
1a00046e:	215d      	movs	r1, #93	; 0x5d
1a000470:	f002 fcd6 	bl	1a002e20 <uartTxWrite>

			//Libero el semaforo indicando que el canal esta libre
			xSemaphoreGiveFromISR( SemBinChannelBusyUsb, xHigherPriorityTaskWoken );
1a000474:	ae04      	add	r6, sp, #16
1a000476:	4b1d      	ldr	r3, [pc, #116]	; (1a0004ec <uartUsbSendCallback+0xf4>)
1a000478:	6818      	ldr	r0, [r3, #0]
1a00047a:	f856 1d04 	ldr.w	r1, [r6, #-4]!
1a00047e:	f000 fe9b 	bl	1a0011b8 <xQueueGiveFromISR>

			// Deshabilito el transmitter Free IRQ para que no ocupe el CPU completo
			uartCallbackClr(((driver_t*)driver_actual)->uart_type,UART_TRANSMITER_FREE);
1a000482:	7820      	ldrb	r0, [r4, #0]
1a000484:	2101      	movs	r1, #1
1a000486:	f002 fcad 	bl	1a002de4 <uartCallbackClr>

			//Empiezo el timer para separa los frames de transmision
			if( xTimerStartFromISR(((driver_t*)driver_actual)->txTimer,&xHigherPriorityTaskWoken ) != pdPASS )
1a00048a:	69a7      	ldr	r7, [r4, #24]
1a00048c:	f001 fbbc 	bl	1a001c08 <xTaskGetTickCountFromISR>
1a000490:	4602      	mov	r2, r0
1a000492:	2500      	movs	r5, #0
1a000494:	9500      	str	r5, [sp, #0]
1a000496:	4638      	mov	r0, r7
1a000498:	2106      	movs	r1, #6
1a00049a:	4633      	mov	r3, r6
1a00049c:	f002 f866 	bl	1a00256c <xTimerGenericCommand>
				// The start command was not executed successfully.  Take appropriate action here.

			}

			//funcion agregada al QMPool para funcionar desdes ISR
			QMPool_put_from_ISR( &(((driver_t*)driver_actual)->mem_pool_1), dataSendUsb );//libero la memoria del pool
1a0004a0:	4e0f      	ldr	r6, [pc, #60]	; (1a0004e0 <uartUsbSendCallback+0xe8>)
1a0004a2:	f104 0020 	add.w	r0, r4, #32
1a0004a6:	6831      	ldr	r1, [r6, #0]
1a0004a8:	f000 faa4 	bl	1a0009f4 <QMPool_put_from_ISR>


			//QMPool_put( &(((driver_t*)driver_actual)->mem_pool_1), dataSendUsb );//libero la memoria del pool
			dataSendUsb = NULL; // limpio el puntero
1a0004ac:	6035      	str	r5, [r6, #0]
			contador = 0; // inicializo el contador para la proxima transmision
1a0004ae:	4b0e      	ldr	r3, [pc, #56]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a0004b0:	601d      	str	r5, [r3, #0]
1a0004b2:	e008      	b.n	1a0004c6 <uartUsbSendCallback+0xce>
		}
		else // si transmision en curso
		{
			uartTxWrite(UART_USB, dataSendUsb->data[contador-1]);
1a0004b4:	440b      	add	r3, r1
1a0004b6:	2003      	movs	r0, #3
1a0004b8:	78d9      	ldrb	r1, [r3, #3]
1a0004ba:	f002 fcb1 	bl	1a002e20 <uartTxWrite>
			contador++;
1a0004be:	4a0a      	ldr	r2, [pc, #40]	; (1a0004e8 <uartUsbSendCallback+0xf0>)
1a0004c0:	6813      	ldr	r3, [r2, #0]
1a0004c2:	3301      	adds	r3, #1
1a0004c4:	6013      	str	r3, [r2, #0]
		}
	}
	if( xHigherPriorityTaskWoken )
1a0004c6:	9b03      	ldr	r3, [sp, #12]
1a0004c8:	b143      	cbz	r3, 1a0004dc <uartUsbSendCallback+0xe4>
	{
		/* Actual macro used here is port specific. */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a0004ca:	b13b      	cbz	r3, 1a0004dc <uartUsbSendCallback+0xe4>
1a0004cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0004d0:	4b07      	ldr	r3, [pc, #28]	; (1a0004f0 <uartUsbSendCallback+0xf8>)
1a0004d2:	601a      	str	r2, [r3, #0]
1a0004d4:	f3bf 8f4f 	dsb	sy
1a0004d8:	f3bf 8f6f 	isb	sy
	}
}
1a0004dc:	b005      	add	sp, #20
1a0004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0004e0:	10003354 	.word	0x10003354
1a0004e4:	100000e4 	.word	0x100000e4
1a0004e8:	100000d4 	.word	0x100000d4
1a0004ec:	100000e0 	.word	0x100000e0
1a0004f0:	e000ed04 	.word	0xe000ed04

1a0004f4 <RxUsbTimerCallback>:


void RxUsbTimerCallback( TimerHandle_t xTimer )
{
1a0004f4:	b508      	push	{r3, lr}

	static bool_t temp_flag = TRUE;

	if (temp_flag == TRUE)
1a0004f6:	4b11      	ldr	r3, [pc, #68]	; (1a00053c <RxUsbTimerCallback+0x48>)
1a0004f8:	781b      	ldrb	r3, [r3, #0]
1a0004fa:	2b01      	cmp	r3, #1
1a0004fc:	d107      	bne.n	1a00050e <RxUsbTimerCallback+0x1a>
	{
		temp_flag= FALSE;
1a0004fe:	2200      	movs	r2, #0
1a000500:	4b0e      	ldr	r3, [pc, #56]	; (1a00053c <RxUsbTimerCallback+0x48>)
1a000502:	701a      	strb	r2, [r3, #0]
		gpioWrite( LED2, ON );
1a000504:	202c      	movs	r0, #44	; 0x2c
1a000506:	2101      	movs	r1, #1
1a000508:	f002 fe96 	bl	1a003238 <gpioWrite>
1a00050c:	e006      	b.n	1a00051c <RxUsbTimerCallback+0x28>

	}
	else
	{
		temp_flag = TRUE;
1a00050e:	2201      	movs	r2, #1
1a000510:	4b0a      	ldr	r3, [pc, #40]	; (1a00053c <RxUsbTimerCallback+0x48>)
1a000512:	701a      	strb	r2, [r3, #0]
		gpioWrite( LED2, OFF );
1a000514:	202c      	movs	r0, #44	; 0x2c
1a000516:	2100      	movs	r1, #0
1a000518:	f002 fe8e 	bl	1a003238 <gpioWrite>
	}

	// Libero el semaforo avisando que se termino la recepcion de un paquete entero
	xSemaphoreGive( SemBinPacketReceivedUsb );
1a00051c:	4b08      	ldr	r3, [pc, #32]	; (1a000540 <RxUsbTimerCallback+0x4c>)
1a00051e:	6818      	ldr	r0, [r3, #0]
1a000520:	2100      	movs	r1, #0
1a000522:	460a      	mov	r2, r1
1a000524:	460b      	mov	r3, r1
1a000526:	f000 fd0d 	bl	1a000f44 <xQueueGenericSend>
	// Libero el semaforo avisando que se enceuntra el canal libre
	xSemaphoreGive( SemBinChannelBusyUsb);
1a00052a:	4b06      	ldr	r3, [pc, #24]	; (1a000544 <RxUsbTimerCallback+0x50>)
1a00052c:	6818      	ldr	r0, [r3, #0]
1a00052e:	2100      	movs	r1, #0
1a000530:	460a      	mov	r2, r1
1a000532:	460b      	mov	r3, r1
1a000534:	f000 fd06 	bl	1a000f44 <xQueueGenericSend>
1a000538:	bd08      	pop	{r3, pc}
1a00053a:	bf00      	nop
1a00053c:	10000000 	.word	0x10000000
1a000540:	100000d8 	.word	0x100000d8
1a000544:	100000e0 	.word	0x100000e0

1a000548 <TxUsbTimerCallback>:
{
	// For future development
}

void TxUsbTimerCallback( TimerHandle_t xTimer )
{
1a000548:	b508      	push	{r3, lr}

	static bool_t temp_flag = TRUE;

	if (temp_flag == TRUE)
1a00054a:	4b0d      	ldr	r3, [pc, #52]	; (1a000580 <TxUsbTimerCallback+0x38>)
1a00054c:	781b      	ldrb	r3, [r3, #0]
1a00054e:	2b01      	cmp	r3, #1
1a000550:	d107      	bne.n	1a000562 <TxUsbTimerCallback+0x1a>
	{
		temp_flag= FALSE;
1a000552:	2200      	movs	r2, #0
1a000554:	4b0a      	ldr	r3, [pc, #40]	; (1a000580 <TxUsbTimerCallback+0x38>)
1a000556:	701a      	strb	r2, [r3, #0]
		gpioWrite( LED1, ON );
1a000558:	202b      	movs	r0, #43	; 0x2b
1a00055a:	2101      	movs	r1, #1
1a00055c:	f002 fe6c 	bl	1a003238 <gpioWrite>
1a000560:	e006      	b.n	1a000570 <TxUsbTimerCallback+0x28>

	}
	else
	{
		temp_flag = TRUE;
1a000562:	2201      	movs	r2, #1
1a000564:	4b06      	ldr	r3, [pc, #24]	; (1a000580 <TxUsbTimerCallback+0x38>)
1a000566:	701a      	strb	r2, [r3, #0]
		gpioWrite( LED1, OFF );
1a000568:	202b      	movs	r0, #43	; 0x2b
1a00056a:	2100      	movs	r1, #0
1a00056c:	f002 fe64 	bl	1a003238 <gpioWrite>
	}

	// Libero el semaforo avisando que paso el tiempo necesario de separacion de frames
	xSemaphoreGive( SemBinPacketTxDelayUsb);
1a000570:	4b04      	ldr	r3, [pc, #16]	; (1a000584 <TxUsbTimerCallback+0x3c>)
1a000572:	6818      	ldr	r0, [r3, #0]
1a000574:	2100      	movs	r1, #0
1a000576:	460a      	mov	r2, r1
1a000578:	460b      	mov	r3, r1
1a00057a:	f000 fce3 	bl	1a000f44 <xQueueGenericSend>
1a00057e:	bd08      	pop	{r3, pc}
1a000580:	10000001 	.word	0x10000001
1a000584:	100000e4 	.word	0x100000e4

1a000588 <DriverSend>:


/*==================[external functions definition]==========================*/

bool_t DriverSend(driver_t* driver_actual,dataStruct_t data)
{
1a000588:	b084      	sub	sp, #16
1a00058a:	b570      	push	{r4, r5, r6, lr}
1a00058c:	b082      	sub	sp, #8
1a00058e:	ac07      	add	r4, sp, #28
1a000590:	e884 000e 	stmia.w	r4, {r1, r2, r3}

	if (data.size >= dataMaxSize) // valido que el paquete este dentro del tamaño permitido. Necesito guardar 1 byte para el CRC tambien
1a000594:	297b      	cmp	r1, #123	; 0x7b
1a000596:	d842      	bhi.n	1a00061e <DriverSend+0x96>
1a000598:	4604      	mov	r4, r0
	{
		return FALSE;
	}

	dataStruct_t *mem_block = QMPool_get( &(driver_actual->mem_pool_1), 0U ); //Solicito un bloque de memoria
1a00059a:	f100 0620 	add.w	r6, r0, #32
1a00059e:	4630      	mov	r0, r6
1a0005a0:	2100      	movs	r1, #0
1a0005a2:	f000 fa3b 	bl	1a000a1c <QMPool_get>
1a0005a6:	4605      	mov	r5, r0
1a0005a8:	9001      	str	r0, [sp, #4]

	if (mem_block == NULL)
1a0005aa:	2800      	cmp	r0, #0
1a0005ac:	d039      	beq.n	1a000622 <DriverSend+0x9a>
	{
		return FALSE;
	}
	else
	{
		strcpy(&(mem_block->data), &(data.data)); // Guardo la informacion que viene en el nuevo puntero
1a0005ae:	3004      	adds	r0, #4
1a0005b0:	a908      	add	r1, sp, #32
1a0005b2:	f004 f918 	bl	1a0047e6 <strcpy>
		mem_block->size = data.size;
1a0005b6:	9b07      	ldr	r3, [sp, #28]
1a0005b8:	602b      	str	r3, [r5, #0]

		//lo envio a la cola de transmision
		if( xQueueSend( driver_actual->queTransmitir, &mem_block , ( TickType_t ) 0))
1a0005ba:	68a0      	ldr	r0, [r4, #8]
1a0005bc:	a901      	add	r1, sp, #4
1a0005be:	2200      	movs	r2, #0
1a0005c0:	4613      	mov	r3, r2
1a0005c2:	f000 fcbf 	bl	1a000f44 <xQueueGenericSend>
1a0005c6:	b320      	cbz	r0, 1a000612 <DriverSend+0x8a>
		{

			uint8_t val; // variable para guardar el CRC
			val = crc8_init(); // inicializo el valor del CRC
1a0005c8:	f000 f98a 	bl	1a0008e0 <crc8_init>
			val = crc8_calc( val, &(data.data), data.size); //calculo el calor del CRC
1a0005cc:	b2c0      	uxtb	r0, r0
1a0005ce:	a908      	add	r1, sp, #32
1a0005d0:	9a07      	ldr	r2, [sp, #28]
1a0005d2:	f000 f987 	bl	1a0008e4 <crc8_calc>

			mem_block->data[mem_block->size] = val;// guardo el CRC al final del mensaje
1a0005d6:	9a01      	ldr	r2, [sp, #4]
1a0005d8:	6813      	ldr	r3, [r2, #0]
1a0005da:	18d1      	adds	r1, r2, r3
1a0005dc:	7108      	strb	r0, [r1, #4]
			mem_block->size++; // incremento el tamaño del mensaje a enviar para que incluya el CRC
1a0005de:	3301      	adds	r3, #1
1a0005e0:	6013      	str	r3, [r2, #0]


			switch(driver_actual->uart_type)
1a0005e2:	7823      	ldrb	r3, [r4, #0]
1a0005e4:	2b03      	cmp	r3, #3
1a0005e6:	d002      	beq.n	1a0005ee <DriverSend+0x66>
1a0005e8:	2b05      	cmp	r3, #5
1a0005ea:	d007      	beq.n	1a0005fc <DriverSend+0x74>
1a0005ec:	e00c      	b.n	1a000608 <DriverSend+0x80>
			{
			case UART_USB:
				// Seteo un callback al evento de transmisor libre y habilito su interrupcion
				uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, (void*) driver_actual);
1a0005ee:	2003      	movs	r0, #3
1a0005f0:	2101      	movs	r1, #1
1a0005f2:	4a0f      	ldr	r2, [pc, #60]	; (1a000630 <DriverSend+0xa8>)
1a0005f4:	4623      	mov	r3, r4
1a0005f6:	f002 fb99 	bl	1a002d2c <uartCallbackSet>
				break;
1a0005fa:	e005      	b.n	1a000608 <DriverSend+0x80>

			case UART_232:
				// Seteo un callback al evento de transmisor libre y habilito su interrupcion
				uartCallbackSet(UART_232, UART_TRANSMITER_FREE, uart232SendCallback, (void*) driver_actual);
1a0005fc:	2005      	movs	r0, #5
1a0005fe:	2101      	movs	r1, #1
1a000600:	4a0c      	ldr	r2, [pc, #48]	; (1a000634 <DriverSend+0xac>)
1a000602:	4623      	mov	r3, r4
1a000604:	f002 fb92 	bl	1a002d2c <uartCallbackSet>
				break;
			}
			uartSetPendingInterrupt(driver_actual->uart_type);// activo que hay pendiente un mensaje a enviar
1a000608:	7820      	ldrb	r0, [r4, #0]
1a00060a:	f002 fc5d 	bl	1a002ec8 <uartSetPendingInterrupt>
			return TRUE; //Mensaje enviado a la cola
1a00060e:	2001      	movs	r0, #1
1a000610:	e008      	b.n	1a000624 <DriverSend+0x9c>
		}
		else
		{
			/* Failed to post the message, even after 10 ticks. */
			QMPool_put( &(driver_actual->mem_pool_1), mem_block );//libero la memoria del pool
1a000612:	4630      	mov	r0, r6
1a000614:	9901      	ldr	r1, [sp, #4]
1a000616:	f000 f9dd 	bl	1a0009d4 <QMPool_put>
			return FALSE;
1a00061a:	2000      	movs	r0, #0
1a00061c:	e002      	b.n	1a000624 <DriverSend+0x9c>
bool_t DriverSend(driver_t* driver_actual,dataStruct_t data)
{

	if (data.size >= dataMaxSize) // valido que el paquete este dentro del tamaño permitido. Necesito guardar 1 byte para el CRC tambien
	{
		return FALSE;
1a00061e:	2000      	movs	r0, #0
1a000620:	e000      	b.n	1a000624 <DriverSend+0x9c>

	dataStruct_t *mem_block = QMPool_get( &(driver_actual->mem_pool_1), 0U ); //Solicito un bloque de memoria

	if (mem_block == NULL)
	{
		return FALSE;
1a000622:	2000      	movs	r0, #0
			QMPool_put( &(driver_actual->mem_pool_1), mem_block );//libero la memoria del pool
			return FALSE;
		}
	}
	return TRUE;
}
1a000624:	b002      	add	sp, #8
1a000626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a00062a:	b004      	add	sp, #16
1a00062c:	4770      	bx	lr
1a00062e:	bf00      	nop
1a000630:	1a0003f9 	.word	0x1a0003f9
1a000634:	1a000301 	.word	0x1a000301

1a000638 <DriverReceive>:


bool_t DriverReceive(driver_t* driver_actual,dataStruct_t * data)
{
1a000638:	b570      	push	{r4, r5, r6, lr}
1a00063a:	b082      	sub	sp, #8
1a00063c:	4604      	mov	r4, r0
1a00063e:	460d      	mov	r5, r1
	dataStruct_t *temp_data;// aca guardo el puntero que viene de la cola de recepcion
	temp_data = NULL;
1a000640:	2100      	movs	r1, #0
1a000642:	9101      	str	r1, [sp, #4]

	//Verifico que no haya terminado de recibir un paquete y este pendiente de ser enviado a la cola
	if( xSemaphoreTake( SemBinPacketReceivedUsb, ( TickType_t ) 0  ) )
1a000644:	4b1a      	ldr	r3, [pc, #104]	; (1a0006b0 <DriverReceive+0x78>)
1a000646:	6818      	ldr	r0, [r3, #0]
1a000648:	f000 fec0 	bl	1a0013cc <xQueueSemaphoreTake>
1a00064c:	b140      	cbz	r0, 1a000660 <DriverReceive+0x28>
	{
		//esto significa que tengo la informacion en el puntero dataRecieveUsb termino de recibirse correctamente.
		xQueueSend(driver_actual->queLlego , & (dataRecieveUsb), ( TickType_t ) 0);// Envio el puntero a la cola
1a00064e:	4e19      	ldr	r6, [pc, #100]	; (1a0006b4 <DriverReceive+0x7c>)
1a000650:	68e0      	ldr	r0, [r4, #12]
1a000652:	4631      	mov	r1, r6
1a000654:	2200      	movs	r2, #0
1a000656:	4613      	mov	r3, r2
1a000658:	f000 fc74 	bl	1a000f44 <xQueueGenericSend>
		// si la cola esta yena igualmente pierdo el paquete recibido.
		dataRecieveUsb= NULL; // limpio nuevamente el puntero
1a00065c:	2300      	movs	r3, #0
1a00065e:	6033      	str	r3, [r6, #0]
	}

	// si hay algo en la cola la envio a la capa superior
	if( xQueueReceive( driver_actual->queLlego, &temp_data , ( TickType_t ) 0))
1a000660:	68e0      	ldr	r0, [r4, #12]
1a000662:	a901      	add	r1, sp, #4
1a000664:	2200      	movs	r2, #0
1a000666:	f000 fe05 	bl	1a001274 <xQueueReceive>
1a00066a:	b1e0      	cbz	r0, 1a0006a6 <DriverReceive+0x6e>
	{
		if ( temp_data == NULL)
1a00066c:	9b01      	ldr	r3, [sp, #4]
1a00066e:	b1e3      	cbz	r3, 1a0006aa <DriverReceive+0x72>
		{
			return FALSE;
		}
		if (crc8_check(&(temp_data->data), temp_data->size))
1a000670:	1d18      	adds	r0, r3, #4
1a000672:	6819      	ldr	r1, [r3, #0]
1a000674:	f000 f94e 	bl	1a000914 <crc8_check>
1a000678:	b170      	cbz	r0, 1a000698 <DriverReceive+0x60>
		{
			/* MEssage recieved sucesfully. */
			strcpy(&(data->data) , &(temp_data->data)); // Guardo la informacion que viene en el nuevo puntero
1a00067a:	9e01      	ldr	r6, [sp, #4]
1a00067c:	1d28      	adds	r0, r5, #4
1a00067e:	1d31      	adds	r1, r6, #4
1a000680:	f004 f8b1 	bl	1a0047e6 <strcpy>
			data->size = temp_data->size-1; // resto 1 para quitar el CRC que se enceuntra en el ultimo byte
1a000684:	6833      	ldr	r3, [r6, #0]
1a000686:	3b01      	subs	r3, #1
1a000688:	602b      	str	r3, [r5, #0]

			QMPool_put( &(driver_actual->mem_pool_1), temp_data );//libero la memoria del pool
1a00068a:	f104 0020 	add.w	r0, r4, #32
1a00068e:	9901      	ldr	r1, [sp, #4]
1a000690:	f000 f9a0 	bl	1a0009d4 <QMPool_put>
			return TRUE;
1a000694:	2001      	movs	r0, #1
1a000696:	e009      	b.n	1a0006ac <DriverReceive+0x74>
		}
		else
		{
			/* MEssage recieved with errors. */
			QMPool_put( &(driver_actual->mem_pool_1), temp_data );//libero la memoria del pool
1a000698:	f104 0020 	add.w	r0, r4, #32
1a00069c:	9901      	ldr	r1, [sp, #4]
1a00069e:	f000 f999 	bl	1a0009d4 <QMPool_put>
			return FALSE;
1a0006a2:	2000      	movs	r0, #0
1a0006a4:	e002      	b.n	1a0006ac <DriverReceive+0x74>

	}
	else
	{
		/* Failed to post the message, even after 10 ticks. */
		return FALSE;
1a0006a6:	2000      	movs	r0, #0
1a0006a8:	e000      	b.n	1a0006ac <DriverReceive+0x74>
	// si hay algo en la cola la envio a la capa superior
	if( xQueueReceive( driver_actual->queLlego, &temp_data , ( TickType_t ) 0))
	{
		if ( temp_data == NULL)
		{
			return FALSE;
1a0006aa:	2000      	movs	r0, #0
	else
	{
		/* Failed to post the message, even after 10 ticks. */
		return FALSE;
	}
}
1a0006ac:	b002      	add	sp, #8
1a0006ae:	bd70      	pop	{r4, r5, r6, pc}
1a0006b0:	100000d8 	.word	0x100000d8
1a0006b4:	1000334c 	.word	0x1000334c

1a0006b8 <DriverConfigUART>:
DriverConfigUART()
// Function que configura el driver de la UART
-*------------------------------------------------------------------*/
bool_t DriverConfigUART(driver_t* driver_actual,uartMap_t type,uint32_t speed)
{
	driver_actual->uart_type = type;
1a0006b8:	7001      	strb	r1, [r0, #0]
	driver_actual->uart_speed = speed;
1a0006ba:	6042      	str	r2, [r0, #4]

	return TRUE;
}
1a0006bc:	2001      	movs	r0, #1
1a0006be:	4770      	bx	lr

1a0006c0 <DriverInitialize>:
/*------------------------------------------------------------------*
DriverInitialize()
// Function que inicializa el driver
-*------------------------------------------------------------------*/
bool_t DriverInitialize(driver_t* driver_actual)
{
1a0006c0:	b510      	push	{r4, lr}
1a0006c2:	b082      	sub	sp, #8
1a0006c4:	4604      	mov	r4, r0

	//Inicialización del Pool
	QMPool_init( &driver_actual->mem_pool_1,
1a0006c6:	3020      	adds	r0, #32
1a0006c8:	f104 0134 	add.w	r1, r4, #52	; 0x34
1a0006cc:	f44f 62f0 	mov.w	r2, #1920	; 0x780
1a0006d0:	2380      	movs	r3, #128	; 0x80
1a0006d2:	f000 f959 	bl	1a000988 <QMPool_init>
			&driver_actual->memoria_para_pool_1,
			sizeof( driver_actual->memoria_para_pool_1 ),
			sizeof( dataStruct_t ) ); /* Bloques del tamaño de dataStruct_t */

	/* Creo la cola donde voy a enviar mensajes por la UART */
	driver_actual->queTransmitir = xQueueCreate( queTransmitirQueueSize, sizeof( dataStruct_t* ) );
1a0006d6:	200a      	movs	r0, #10
1a0006d8:	2104      	movs	r1, #4
1a0006da:	2200      	movs	r2, #0
1a0006dc:	f000 fc0a 	bl	1a000ef4 <xQueueGenericCreate>
1a0006e0:	60a0      	str	r0, [r4, #8]
	if( driver_actual->queTransmitir == NULL )
1a0006e2:	2800      	cmp	r0, #0
1a0006e4:	f000 80ba 	beq.w	1a00085c <DriverInitialize+0x19c>
	{
		return FALSE; // La cola fallo en inicializarse
	}

	/* Creo la cola donde pongo los mensaques que recibi por la UART */
	driver_actual->queLlego = xQueueCreate( queTransmitirQueueSize, sizeof( dataStruct_t* ) );
1a0006e8:	200a      	movs	r0, #10
1a0006ea:	2104      	movs	r1, #4
1a0006ec:	2200      	movs	r2, #0
1a0006ee:	f000 fc01 	bl	1a000ef4 <xQueueGenericCreate>
1a0006f2:	60e0      	str	r0, [r4, #12]
	if( driver_actual->queLlego == NULL )
1a0006f4:	2800      	cmp	r0, #0
1a0006f6:	f000 80b3 	beq.w	1a000860 <DriverInitialize+0x1a0>
	{
		return FALSE; // La cola fallo en inicializarse
	}

	// inicializo variable interna de envio
	dataRecieveUsb = NULL;
1a0006fa:	2300      	movs	r3, #0
1a0006fc:	4a64      	ldr	r2, [pc, #400]	; (1a000890 <DriverInitialize+0x1d0>)
1a0006fe:	6013      	str	r3, [r2, #0]
	dataSendUsb = NULL;
1a000700:	4a64      	ldr	r2, [pc, #400]	; (1a000894 <DriverInitialize+0x1d4>)
1a000702:	6013      	str	r3, [r2, #0]
	dataRecieve232 = NULL;
1a000704:	4a64      	ldr	r2, [pc, #400]	; (1a000898 <DriverInitialize+0x1d8>)
1a000706:	6013      	str	r3, [r2, #0]
	dataSend232 = NULL;
1a000708:	4a64      	ldr	r2, [pc, #400]	; (1a00089c <DriverInitialize+0x1dc>)
1a00070a:	6013      	str	r3, [r2, #0]

	// seteo el tiempo de TO del callback acuerdo a la velocidad de transmision definida en la UART
	driver_actual->rx_callback_ms_delay = 50/portTICK_RATE_MS; // queda el TO solo por seguridad
1a00070c:	2332      	movs	r3, #50	; 0x32
1a00070e:	6163      	str	r3, [r4, #20]

	// seteo el tiempo de TO del callback acuerdo a la velocidad de transmision definida en la UART
	driver_actual->tx_callback_ms_delay = (1000000/ driver_actual->uart_speed)/portTICK_RATE_MS;
1a000710:	6862      	ldr	r2, [r4, #4]
1a000712:	4b63      	ldr	r3, [pc, #396]	; (1a0008a0 <DriverInitialize+0x1e0>)
1a000714:	fbb3 f3f2 	udiv	r3, r3, r2
1a000718:	61e3      	str	r3, [r4, #28]

	switch(driver_actual->uart_type)
1a00071a:	7823      	ldrb	r3, [r4, #0]
1a00071c:	2b03      	cmp	r3, #3
1a00071e:	d002      	beq.n	1a000726 <DriverInitialize+0x66>
1a000720:	2b05      	cmp	r3, #5
1a000722:	d057      	beq.n	1a0007d4 <DriverInitialize+0x114>
1a000724:	e09e      	b.n	1a000864 <DriverInitialize+0x1a4>
	{
	case UART_USB:
		// I create the timer for timeout for UART USB packet reception
		driver_actual->rxTimer = xTimerCreate ("rx_timeout_timer",driver_actual->rx_callback_ms_delay,pdFALSE,( void * ) 0,RxUsbTimerCallback);
1a000726:	4b5f      	ldr	r3, [pc, #380]	; (1a0008a4 <DriverInitialize+0x1e4>)
1a000728:	9300      	str	r3, [sp, #0]
1a00072a:	485f      	ldr	r0, [pc, #380]	; (1a0008a8 <DriverInitialize+0x1e8>)
1a00072c:	2132      	movs	r1, #50	; 0x32
1a00072e:	2200      	movs	r2, #0
1a000730:	4613      	mov	r3, r2
1a000732:	f001 fed7 	bl	1a0024e4 <xTimerCreate>
1a000736:	6120      	str	r0, [r4, #16]
		if( driver_actual->rxTimer == NULL )
1a000738:	2800      	cmp	r0, #0
1a00073a:	f000 8095 	beq.w	1a000868 <DriverInitialize+0x1a8>
		{
			return FALSE; // El Timer fallo en inicializarse
		}

		// I create the timer for timeout for UART USB packet transmision
		driver_actual->txTimer = xTimerCreate ("tx_callback_ms_delay",driver_actual->tx_callback_ms_delay,pdFALSE,( void * ) 0,TxUsbTimerCallback);
1a00073e:	4b5b      	ldr	r3, [pc, #364]	; (1a0008ac <DriverInitialize+0x1ec>)
1a000740:	9300      	str	r3, [sp, #0]
1a000742:	485b      	ldr	r0, [pc, #364]	; (1a0008b0 <DriverInitialize+0x1f0>)
1a000744:	69e1      	ldr	r1, [r4, #28]
1a000746:	2200      	movs	r2, #0
1a000748:	4613      	mov	r3, r2
1a00074a:	f001 fecb 	bl	1a0024e4 <xTimerCreate>
1a00074e:	61a0      	str	r0, [r4, #24]
		if( driver_actual->txTimer == NULL )
1a000750:	2800      	cmp	r0, #0
1a000752:	f000 808b 	beq.w	1a00086c <DriverInitialize+0x1ac>
		{
			return FALSE; // El Timer fallo en inicializarse
		}

		// Inicializo semaforo de paquete recivido
		SemBinPacketReceivedUsb = xSemaphoreCreateBinary();
1a000756:	2001      	movs	r0, #1
1a000758:	2100      	movs	r1, #0
1a00075a:	2203      	movs	r2, #3
1a00075c:	f000 fbca 	bl	1a000ef4 <xQueueGenericCreate>
1a000760:	4b54      	ldr	r3, [pc, #336]	; (1a0008b4 <DriverInitialize+0x1f4>)
1a000762:	6018      	str	r0, [r3, #0]
		if( SemBinPacketReceivedUsb == NULL )
1a000764:	2800      	cmp	r0, #0
1a000766:	f000 8083 	beq.w	1a000870 <DriverInitialize+0x1b0>
		{
			return FALSE; // El semaforo fallo en inicializarse
		}
		xSemaphoreTake( SemBinPacketReceivedUsb, ( TickType_t ) 0);
1a00076a:	2100      	movs	r1, #0
1a00076c:	f000 fe2e 	bl	1a0013cc <xQueueSemaphoreTake>

		// Inicializo semaforo de canal ocupado
		SemBinChannelBusyUsb = xSemaphoreCreateBinary();
1a000770:	2001      	movs	r0, #1
1a000772:	2100      	movs	r1, #0
1a000774:	2203      	movs	r2, #3
1a000776:	f000 fbbd 	bl	1a000ef4 <xQueueGenericCreate>
1a00077a:	4b4f      	ldr	r3, [pc, #316]	; (1a0008b8 <DriverInitialize+0x1f8>)
1a00077c:	6018      	str	r0, [r3, #0]
		if( SemBinChannelBusyUsb == NULL )
1a00077e:	2800      	cmp	r0, #0
1a000780:	d078      	beq.n	1a000874 <DriverInitialize+0x1b4>
		{
			return FALSE; // El semaforo fallo en inicializarse
		}
		xSemaphoreGive( SemBinChannelBusyUsb);
1a000782:	2100      	movs	r1, #0
1a000784:	460a      	mov	r2, r1
1a000786:	460b      	mov	r3, r1
1a000788:	f000 fbdc 	bl	1a000f44 <xQueueGenericSend>

		// Inicializo semaforo de separacion de paquetes para transmision
		SemBinPacketTxDelayUsb = xSemaphoreCreateBinary();
1a00078c:	2001      	movs	r0, #1
1a00078e:	2100      	movs	r1, #0
1a000790:	2203      	movs	r2, #3
1a000792:	f000 fbaf 	bl	1a000ef4 <xQueueGenericCreate>
1a000796:	4b49      	ldr	r3, [pc, #292]	; (1a0008bc <DriverInitialize+0x1fc>)
1a000798:	6018      	str	r0, [r3, #0]
		if( SemBinPacketTxDelayUsb == NULL )
1a00079a:	2800      	cmp	r0, #0
1a00079c:	d06c      	beq.n	1a000878 <DriverInitialize+0x1b8>
		{
			return FALSE; // El semaforo fallo en inicializarse
		}
		xSemaphoreGive( SemBinPacketTxDelayUsb);
1a00079e:	2100      	movs	r1, #0
1a0007a0:	460a      	mov	r2, r1
1a0007a2:	460b      	mov	r3, r1
1a0007a4:	f000 fbce 	bl	1a000f44 <xQueueGenericSend>

		/* Inicializar la UART_USB junto con las interrupciones de Tx y Rx */
		uartConfig(UART_USB, driver_actual->uart_speed);
1a0007a8:	2003      	movs	r0, #3
1a0007aa:	6861      	ldr	r1, [r4, #4]
1a0007ac:	f002 fb42 	bl	1a002e34 <uartInit>
		// Seteo un callback al evento de recepcion y habilito su interrupcion
		uartCallbackSet(UART_USB, UART_RECEIVE, uartUsbReceiveCallback, (void*) driver_actual);
1a0007b0:	2003      	movs	r0, #3
1a0007b2:	2100      	movs	r1, #0
1a0007b4:	4a42      	ldr	r2, [pc, #264]	; (1a0008c0 <DriverInitialize+0x200>)
1a0007b6:	4623      	mov	r3, r4
1a0007b8:	f002 fab8 	bl	1a002d2c <uartCallbackSet>
		// Seteo un callback al evento de transmisor libre y habilito su interrupcion
		uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, (void*) driver_actual);
1a0007bc:	2003      	movs	r0, #3
1a0007be:	2101      	movs	r1, #1
1a0007c0:	4a40      	ldr	r2, [pc, #256]	; (1a0008c4 <DriverInitialize+0x204>)
1a0007c2:	4623      	mov	r3, r4
1a0007c4:	f002 fab2 	bl	1a002d2c <uartCallbackSet>
		// Habilito todas las interrupciones de UART_USB
		uartInterrupt(UART_USB, TRUE);
1a0007c8:	2003      	movs	r0, #3
1a0007ca:	2101      	movs	r1, #1
1a0007cc:	f002 fa6e 	bl	1a002cac <uartInterrupt>
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_232, TRUE);
		break;
	}

	return TRUE;
1a0007d0:	2001      	movs	r0, #1
		uartCallbackSet(UART_USB, UART_RECEIVE, uartUsbReceiveCallback, (void*) driver_actual);
		// Seteo un callback al evento de transmisor libre y habilito su interrupcion
		uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, (void*) driver_actual);
		// Habilito todas las interrupciones de UART_USB
		uartInterrupt(UART_USB, TRUE);
		break;
1a0007d2:	e05a      	b.n	1a00088a <DriverInitialize+0x1ca>

	case UART_232:
		// I create the timer for timeout for UART 232 packet reception
		driver_actual->rxTimer = xTimerCreate ("rx_timeout_timer",driver_actual->rx_callback_ms_delay,pdFALSE,( void * ) 0,Rx232TimerCallback);
1a0007d4:	4b3c      	ldr	r3, [pc, #240]	; (1a0008c8 <DriverInitialize+0x208>)
1a0007d6:	9300      	str	r3, [sp, #0]
1a0007d8:	4833      	ldr	r0, [pc, #204]	; (1a0008a8 <DriverInitialize+0x1e8>)
1a0007da:	2132      	movs	r1, #50	; 0x32
1a0007dc:	2200      	movs	r2, #0
1a0007de:	4613      	mov	r3, r2
1a0007e0:	f001 fe80 	bl	1a0024e4 <xTimerCreate>
1a0007e4:	6120      	str	r0, [r4, #16]
		if( driver_actual->rxTimer == NULL )
1a0007e6:	2800      	cmp	r0, #0
1a0007e8:	d048      	beq.n	1a00087c <DriverInitialize+0x1bc>
		{
			return FALSE; // El Timer fallo en inicializarse
		}

		// I create the timer for timeout for UART 232 packet transmision
		driver_actual->txTimer = xTimerCreate ("tx_callback_ms_delay",driver_actual->tx_callback_ms_delay,pdFALSE,( void * ) 0,Tx232TimerCallback);
1a0007ea:	4b38      	ldr	r3, [pc, #224]	; (1a0008cc <DriverInitialize+0x20c>)
1a0007ec:	9300      	str	r3, [sp, #0]
1a0007ee:	4830      	ldr	r0, [pc, #192]	; (1a0008b0 <DriverInitialize+0x1f0>)
1a0007f0:	69e1      	ldr	r1, [r4, #28]
1a0007f2:	2200      	movs	r2, #0
1a0007f4:	4613      	mov	r3, r2
1a0007f6:	f001 fe75 	bl	1a0024e4 <xTimerCreate>
1a0007fa:	61a0      	str	r0, [r4, #24]
		if( driver_actual->txTimer == NULL )
1a0007fc:	2800      	cmp	r0, #0
1a0007fe:	d03f      	beq.n	1a000880 <DriverInitialize+0x1c0>
		{
			return FALSE; // El Timer fallo en inicializarse
		}

		// Inicializo semaforo de paquete recivido
		SemBinPacketReceived232 = xSemaphoreCreateBinary();
1a000800:	2001      	movs	r0, #1
1a000802:	2100      	movs	r1, #0
1a000804:	2203      	movs	r2, #3
1a000806:	f000 fb75 	bl	1a000ef4 <xQueueGenericCreate>
1a00080a:	4b31      	ldr	r3, [pc, #196]	; (1a0008d0 <DriverInitialize+0x210>)
1a00080c:	6018      	str	r0, [r3, #0]
		if( SemBinPacketReceived232 == NULL )
1a00080e:	b3c8      	cbz	r0, 1a000884 <DriverInitialize+0x1c4>
		{
			return FALSE; // El semaforo fallo en inicializarse
		}
		xSemaphoreTake( SemBinPacketReceived232, ( TickType_t ) 0);
1a000810:	2100      	movs	r1, #0
1a000812:	f000 fddb 	bl	1a0013cc <xQueueSemaphoreTake>

		// Inicializo semaforo de canal ocupado
		SemBinChannelBusy232 = xSemaphoreCreateBinary();
1a000816:	2001      	movs	r0, #1
1a000818:	2100      	movs	r1, #0
1a00081a:	2203      	movs	r2, #3
1a00081c:	f000 fb6a 	bl	1a000ef4 <xQueueGenericCreate>
1a000820:	4b2c      	ldr	r3, [pc, #176]	; (1a0008d4 <DriverInitialize+0x214>)
1a000822:	6018      	str	r0, [r3, #0]
		if( SemBinChannelBusy232 == NULL )
1a000824:	b380      	cbz	r0, 1a000888 <DriverInitialize+0x1c8>
		{
			return FALSE; // El semaforo fallo en inicializarse
		}
		xSemaphoreGive( SemBinChannelBusy232);
1a000826:	2100      	movs	r1, #0
1a000828:	460a      	mov	r2, r1
1a00082a:	460b      	mov	r3, r1
1a00082c:	f000 fb8a 	bl	1a000f44 <xQueueGenericSend>


		/* Inicializar la UART_232 */
		uartConfig(UART_232, driver_actual->uart_speed);
1a000830:	2005      	movs	r0, #5
1a000832:	6861      	ldr	r1, [r4, #4]
1a000834:	f002 fafe 	bl	1a002e34 <uartInit>
		// Seteo un callback al evento de recepcion y habilito su interrupcion
		uartCallbackSet(UART_232, UART_RECEIVE, uart232ReceiveCallback, (void*) driver_actual);
1a000838:	2005      	movs	r0, #5
1a00083a:	2100      	movs	r1, #0
1a00083c:	4a26      	ldr	r2, [pc, #152]	; (1a0008d8 <DriverInitialize+0x218>)
1a00083e:	4623      	mov	r3, r4
1a000840:	f002 fa74 	bl	1a002d2c <uartCallbackSet>
		// Seteo un callback al evento de transmisor libre y habilito su interrupcion
		uartCallbackSet(UART_232, UART_TRANSMITER_FREE, uart232SendCallback, (void*) driver_actual);
1a000844:	2005      	movs	r0, #5
1a000846:	2101      	movs	r1, #1
1a000848:	4a24      	ldr	r2, [pc, #144]	; (1a0008dc <DriverInitialize+0x21c>)
1a00084a:	4623      	mov	r3, r4
1a00084c:	f002 fa6e 	bl	1a002d2c <uartCallbackSet>
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_232, TRUE);
1a000850:	2005      	movs	r0, #5
1a000852:	2101      	movs	r1, #1
1a000854:	f002 fa2a 	bl	1a002cac <uartInterrupt>
		break;
	}

	return TRUE;
1a000858:	2001      	movs	r0, #1
		uartCallbackSet(UART_232, UART_RECEIVE, uart232ReceiveCallback, (void*) driver_actual);
		// Seteo un callback al evento de transmisor libre y habilito su interrupcion
		uartCallbackSet(UART_232, UART_TRANSMITER_FREE, uart232SendCallback, (void*) driver_actual);
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_232, TRUE);
		break;
1a00085a:	e016      	b.n	1a00088a <DriverInitialize+0x1ca>

	/* Creo la cola donde voy a enviar mensajes por la UART */
	driver_actual->queTransmitir = xQueueCreate( queTransmitirQueueSize, sizeof( dataStruct_t* ) );
	if( driver_actual->queTransmitir == NULL )
	{
		return FALSE; // La cola fallo en inicializarse
1a00085c:	2000      	movs	r0, #0
1a00085e:	e014      	b.n	1a00088a <DriverInitialize+0x1ca>

	/* Creo la cola donde pongo los mensaques que recibi por la UART */
	driver_actual->queLlego = xQueueCreate( queTransmitirQueueSize, sizeof( dataStruct_t* ) );
	if( driver_actual->queLlego == NULL )
	{
		return FALSE; // La cola fallo en inicializarse
1a000860:	2000      	movs	r0, #0
1a000862:	e012      	b.n	1a00088a <DriverInitialize+0x1ca>
		// Habilito todas las interrupciones de UART_232
		uartInterrupt(UART_232, TRUE);
		break;
	}

	return TRUE;
1a000864:	2001      	movs	r0, #1
1a000866:	e010      	b.n	1a00088a <DriverInitialize+0x1ca>
	case UART_USB:
		// I create the timer for timeout for UART USB packet reception
		driver_actual->rxTimer = xTimerCreate ("rx_timeout_timer",driver_actual->rx_callback_ms_delay,pdFALSE,( void * ) 0,RxUsbTimerCallback);
		if( driver_actual->rxTimer == NULL )
		{
			return FALSE; // El Timer fallo en inicializarse
1a000868:	2000      	movs	r0, #0
1a00086a:	e00e      	b.n	1a00088a <DriverInitialize+0x1ca>

		// I create the timer for timeout for UART USB packet transmision
		driver_actual->txTimer = xTimerCreate ("tx_callback_ms_delay",driver_actual->tx_callback_ms_delay,pdFALSE,( void * ) 0,TxUsbTimerCallback);
		if( driver_actual->txTimer == NULL )
		{
			return FALSE; // El Timer fallo en inicializarse
1a00086c:	2000      	movs	r0, #0
1a00086e:	e00c      	b.n	1a00088a <DriverInitialize+0x1ca>

		// Inicializo semaforo de paquete recivido
		SemBinPacketReceivedUsb = xSemaphoreCreateBinary();
		if( SemBinPacketReceivedUsb == NULL )
		{
			return FALSE; // El semaforo fallo en inicializarse
1a000870:	2000      	movs	r0, #0
1a000872:	e00a      	b.n	1a00088a <DriverInitialize+0x1ca>

		// Inicializo semaforo de canal ocupado
		SemBinChannelBusyUsb = xSemaphoreCreateBinary();
		if( SemBinChannelBusyUsb == NULL )
		{
			return FALSE; // El semaforo fallo en inicializarse
1a000874:	2000      	movs	r0, #0
1a000876:	e008      	b.n	1a00088a <DriverInitialize+0x1ca>

		// Inicializo semaforo de separacion de paquetes para transmision
		SemBinPacketTxDelayUsb = xSemaphoreCreateBinary();
		if( SemBinPacketTxDelayUsb == NULL )
		{
			return FALSE; // El semaforo fallo en inicializarse
1a000878:	2000      	movs	r0, #0
1a00087a:	e006      	b.n	1a00088a <DriverInitialize+0x1ca>
	case UART_232:
		// I create the timer for timeout for UART 232 packet reception
		driver_actual->rxTimer = xTimerCreate ("rx_timeout_timer",driver_actual->rx_callback_ms_delay,pdFALSE,( void * ) 0,Rx232TimerCallback);
		if( driver_actual->rxTimer == NULL )
		{
			return FALSE; // El Timer fallo en inicializarse
1a00087c:	2000      	movs	r0, #0
1a00087e:	e004      	b.n	1a00088a <DriverInitialize+0x1ca>

		// I create the timer for timeout for UART 232 packet transmision
		driver_actual->txTimer = xTimerCreate ("tx_callback_ms_delay",driver_actual->tx_callback_ms_delay,pdFALSE,( void * ) 0,Tx232TimerCallback);
		if( driver_actual->txTimer == NULL )
		{
			return FALSE; // El Timer fallo en inicializarse
1a000880:	2000      	movs	r0, #0
1a000882:	e002      	b.n	1a00088a <DriverInitialize+0x1ca>

		// Inicializo semaforo de paquete recivido
		SemBinPacketReceived232 = xSemaphoreCreateBinary();
		if( SemBinPacketReceived232 == NULL )
		{
			return FALSE; // El semaforo fallo en inicializarse
1a000884:	2000      	movs	r0, #0
1a000886:	e000      	b.n	1a00088a <DriverInitialize+0x1ca>

		// Inicializo semaforo de canal ocupado
		SemBinChannelBusy232 = xSemaphoreCreateBinary();
		if( SemBinChannelBusy232 == NULL )
		{
			return FALSE; // El semaforo fallo en inicializarse
1a000888:	2000      	movs	r0, #0
		uartInterrupt(UART_232, TRUE);
		break;
	}

	return TRUE;
}
1a00088a:	b002      	add	sp, #8
1a00088c:	bd10      	pop	{r4, pc}
1a00088e:	bf00      	nop
1a000890:	1000334c 	.word	0x1000334c
1a000894:	10003354 	.word	0x10003354
1a000898:	10003348 	.word	0x10003348
1a00089c:	10003350 	.word	0x10003350
1a0008a0:	000f4240 	.word	0x000f4240
1a0008a4:	1a0004f5 	.word	0x1a0004f5
1a0008a8:	1a0047f8 	.word	0x1a0047f8
1a0008ac:	1a000549 	.word	0x1a000549
1a0008b0:	1a00480c 	.word	0x1a00480c
1a0008b4:	100000d8 	.word	0x100000d8
1a0008b8:	100000e0 	.word	0x100000e0
1a0008bc:	100000e4 	.word	0x100000e4
1a0008c0:	1a000311 	.word	0x1a000311
1a0008c4:	1a0003f9 	.word	0x1a0003f9
1a0008c8:	1a000309 	.word	0x1a000309
1a0008cc:	1a00030d 	.word	0x1a00030d
1a0008d0:	100000d0 	.word	0x100000d0
1a0008d4:	100000dc 	.word	0x100000dc
1a0008d8:	1a000305 	.word	0x1a000305
1a0008dc:	1a000301 	.word	0x1a000301

1a0008e0 <crc8_init>:
};

uint8_t crc8_init(void)
{
    return 0x00;//compliant with standard CRC8. It can change between different CRC standards
}
1a0008e0:	2000      	movs	r0, #0
1a0008e2:	4770      	bx	lr

1a0008e4 <crc8_calc>:

uint8_t crc8_calc(uint8_t val, void *buf, int cnt)
{
1a0008e4:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
1a0008e6:	2400      	movs	r4, #0
1a0008e8:	e00d      	b.n	1a000906 <crc8_calc+0x22>
		val ^= p[i];
1a0008ea:	5d0b      	ldrb	r3, [r1, r4]
1a0008ec:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_small_table[val >> 4];
1a0008ee:	0903      	lsrs	r3, r0, #4
1a0008f0:	4d07      	ldr	r5, [pc, #28]	; (1a000910 <crc8_calc+0x2c>)
1a0008f2:	5ceb      	ldrb	r3, [r5, r3]
1a0008f4:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
1a0008f8:	b2c0      	uxtb	r0, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
1a0008fa:	0903      	lsrs	r3, r0, #4
1a0008fc:	5ceb      	ldrb	r3, [r5, r3]
1a0008fe:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
1a000902:	b2c0      	uxtb	r0, r0
uint8_t crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
1a000904:	3401      	adds	r4, #1
1a000906:	4294      	cmp	r4, r2
1a000908:	dbef      	blt.n	1a0008ea <crc8_calc+0x6>
		val ^= p[i];
		val = (val << 4) ^ crc8_small_table[val >> 4];
		val = (val << 4) ^ crc8_small_table[val >> 4];
	}
	return val;
}
1a00090a:	bc30      	pop	{r4, r5}
1a00090c:	4770      	bx	lr
1a00090e:	bf00      	nop
1a000910:	1a004824 	.word	0x1a004824

1a000914 <crc8_check>:

bool_t crc8_check(void *buf, int cnt)
{
1a000914:	b538      	push	{r3, r4, r5, lr}
1a000916:	4605      	mov	r5, r0
1a000918:	460c      	mov	r4, r1
	uint8_t val;
	uint8_t *p = buf;

	//return TRUE;//bypass rapido para prueba

	val = crc8_init();
1a00091a:	f7ff ffe1 	bl	1a0008e0 <crc8_init>
	val = crc8_calc( val, p, cnt-1); //resto 1 porque en el ultimo byte esta el CRC y luego el \0
1a00091e:	4629      	mov	r1, r5
1a000920:	1e62      	subs	r2, r4, #1
1a000922:	f7ff ffdf 	bl	1a0008e4 <crc8_calc>

	if (val == p[cnt-1]) // comparo CRC calculado con recibido
1a000926:	442c      	add	r4, r5
1a000928:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a00092c:	4283      	cmp	r3, r0
1a00092e:	d101      	bne.n	1a000934 <crc8_check+0x20>
	{
		return TRUE;
1a000930:	2001      	movs	r0, #1
1a000932:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		return FALSE;
1a000934:	2000      	movs	r0, #0

	}
}
1a000936:	bd38      	pop	{r3, r4, r5, pc}

1a000938 <OAInitialize>:
OAInitialize()
// Function que inicializa el OA actual
-*------------------------------------------------------------------*/
bool_t OAInitialize(oa_t* oa_actual,Function_t function)
{
	if (oa_actual != NULL)
1a000938:	b9a0      	cbnz	r0, 1a000964 <OAInitialize+0x2c>
/*------------------------------------------------------------------*
OAInitialize()
// Function que inicializa el OA actual
-*------------------------------------------------------------------*/
bool_t OAInitialize(oa_t* oa_actual,Function_t function)
{
1a00093a:	b538      	push	{r3, r4, r5, lr}
1a00093c:	460c      	mov	r4, r1
	if (oa_actual != NULL)
	{
		return FALSE; // OA en uso. Llamar a destructor previamente
	}

	oa_actual = pvPortMalloc(sizeof (oa_t)); // Pido memoria para el OA
1a00093e:	200c      	movs	r0, #12
1a000940:	f000 f946 	bl	1a000bd0 <pvPortMalloc>
	if (oa_actual == NULL)
1a000944:	4605      	mov	r5, r0
1a000946:	b178      	cbz	r0, 1a000968 <OAInitialize+0x30>
	{
		return FALSE; // No se pudo asignar memoria parra crear el nuevo OA
	}

	//guardo la configuaracion de la funcion en el OA
	oa_actual->oa_function = function;
1a000948:	7004      	strb	r4, [r0, #0]

	// inicializo la cola de recepcion de eventos del OA
	oa_actual->queue_events = xQueueCreate( EVENT_QUEUE_MAX_SIZE, sizeof( dataStruct_t* ) );
1a00094a:	2005      	movs	r0, #5
1a00094c:	2104      	movs	r1, #4
1a00094e:	2200      	movs	r2, #0
1a000950:	f000 fad0 	bl	1a000ef4 <xQueueGenericCreate>
1a000954:	6068      	str	r0, [r5, #4]
	if( oa_actual->queue_events == NULL )
1a000956:	b148      	cbz	r0, 1a00096c <OAInitialize+0x34>
	{
		return FALSE; // La cola fallo en inicializarse
	}

	// creo la tarea del OA de acuerdo a la funcion que deba hacer
	if (oa_actual->oa_function == MAYUSCULIZAR)
1a000958:	782b      	ldrb	r3, [r5, #0]
1a00095a:	b14b      	cbz	r3, 1a000970 <OAInitialize+0x38>
	{
		// Creo tarea mayusculizar
	}

	else if (oa_actual->oa_function == MINUSCULIZAR)
1a00095c:	2b01      	cmp	r3, #1
1a00095e:	d009      	beq.n	1a000974 <OAInitialize+0x3c>

	}
	else
	{
		// Si no es ninguno de los anteriores devuelve FALSE
		return FALSE;
1a000960:	2000      	movs	r0, #0
1a000962:	bd38      	pop	{r3, r4, r5, pc}
-*------------------------------------------------------------------*/
bool_t OAInitialize(oa_t* oa_actual,Function_t function)
{
	if (oa_actual != NULL)
	{
		return FALSE; // OA en uso. Llamar a destructor previamente
1a000964:	2000      	movs	r0, #0
		// Si no es ninguno de los anteriores devuelve FALSE
		return FALSE;
	}

	return TRUE;
}
1a000966:	4770      	bx	lr
	}

	oa_actual = pvPortMalloc(sizeof (oa_t)); // Pido memoria para el OA
	if (oa_actual == NULL)
	{
		return FALSE; // No se pudo asignar memoria parra crear el nuevo OA
1a000968:	2000      	movs	r0, #0
1a00096a:	bd38      	pop	{r3, r4, r5, pc}

	// inicializo la cola de recepcion de eventos del OA
	oa_actual->queue_events = xQueueCreate( EVENT_QUEUE_MAX_SIZE, sizeof( dataStruct_t* ) );
	if( oa_actual->queue_events == NULL )
	{
		return FALSE; // La cola fallo en inicializarse
1a00096c:	2000      	movs	r0, #0
1a00096e:	bd38      	pop	{r3, r4, r5, pc}
	{
		// Si no es ninguno de los anteriores devuelve FALSE
		return FALSE;
	}

	return TRUE;
1a000970:	2001      	movs	r0, #1
1a000972:	bd38      	pop	{r3, r4, r5, pc}
1a000974:	2001      	movs	r0, #1
}
1a000976:	bd38      	pop	{r3, r4, r5, pc}

1a000978 <OAProcessPacket>:
/*------------------------------------------------------------------*
OAProcessPacket()
// Function que envia una packete a la cola del OA para ser procesado
-*------------------------------------------------------------------*/
bool_t OAProcessPacket(oa_t* oa_actual, dataStruct_t data)
{
1a000978:	b084      	sub	sp, #16
1a00097a:	a801      	add	r0, sp, #4
1a00097c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	return TRUE;
}
1a000980:	2001      	movs	r0, #1
1a000982:	b004      	add	sp, #16
1a000984:	4770      	bx	lr
1a000986:	bf00      	nop

1a000988 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init( QMPool * const me, void * const poolSto,
                  uint_fast32_t poolSize, uint_fast16_t blockSize )
{
1a000988:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    uint_fast16_t nblocks;

    me->free_head = poolSto;
1a00098a:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = ( QMPoolSize )sizeof( QFreeBlock ); /* start with just one */
1a00098c:	2404      	movs	r4, #4
1a00098e:	8184      	strh	r4, [r0, #12]
    nblocks = ( uint_fast16_t )1; /* #free blocks that fit in one memory block */
1a000990:	2601      	movs	r6, #1
    while ( me->blockSize < ( QMPoolSize )blockSize )
1a000992:	e002      	b.n	1a00099a <QMPool_init+0x12>
    {
        me->blockSize += ( QMPoolSize )sizeof( QFreeBlock );
1a000994:	3404      	adds	r4, #4
1a000996:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000998:	3601      	adds	r6, #1
    me->free_head = poolSto;

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = ( QMPoolSize )sizeof( QFreeBlock ); /* start with just one */
    nblocks = ( uint_fast16_t )1; /* #free blocks that fit in one memory block */
    while ( me->blockSize < ( QMPoolSize )blockSize )
1a00099a:	8984      	ldrh	r4, [r0, #12]
1a00099c:	b29d      	uxth	r5, r3
1a00099e:	42ac      	cmp	r4, r5
1a0009a0:	d3f8      	bcc.n	1a000994 <QMPool_init+0xc>
    {
        me->blockSize += ( QMPoolSize )sizeof( QFreeBlock );
        ++nblocks;
    }
    blockSize = ( uint_fast16_t )me->blockSize; /* round-up to nearest block */
1a0009a2:	4627      	mov	r7, r4

    /* chain all blocks together in a free-list... */
    poolSize -= ( uint_fast32_t )blockSize; /* don't count the last block */
1a0009a4:	1b14      	subs	r4, r2, r4
    me->nTot  = ( QMPoolCtr )1;  /* the last block already in the pool */
1a0009a6:	2301      	movs	r3, #1
1a0009a8:	81c3      	strh	r3, [r0, #14]
    fb = ( QFreeBlock * )me->free_head; /* start at the head of the free list */
1a0009aa:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while ( poolSize >= ( uint_fast32_t )blockSize )
1a0009ac:	e007      	b.n	1a0009be <QMPool_init+0x36>
    {
        fb->next = &QF_PTR_AT_( fb, nblocks ); /*point next link to next block */
1a0009ae:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a0009b2:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a0009b4:	681b      	ldr	r3, [r3, #0]
        poolSize -= ( uint_fast32_t )blockSize; /* reduce available pool size */
1a0009b6:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a0009b8:	89c5      	ldrh	r5, [r0, #14]
1a0009ba:	3501      	adds	r5, #1
1a0009bc:	81c5      	strh	r5, [r0, #14]
    poolSize -= ( uint_fast32_t )blockSize; /* don't count the last block */
    me->nTot  = ( QMPoolCtr )1;  /* the last block already in the pool */
    fb = ( QFreeBlock * )me->free_head; /* start at the head of the free list */

    /* chain all blocks together in a free-list... */
    while ( poolSize >= ( uint_fast32_t )blockSize )
1a0009be:	42bc      	cmp	r4, r7
1a0009c0:	d2f5      	bcs.n	1a0009ae <QMPool_init+0x26>
        fb = fb->next;           /* advance to the next block */
        poolSize -= ( uint_fast32_t )blockSize; /* reduce available pool size */
        ++me->nTot;              /* increment the number of blocks so far */
    }

    fb->next  = ( QFreeBlock * )0; /* the last link points to NULL */
1a0009c2:	2200      	movs	r2, #0
1a0009c4:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a0009c6:	89c2      	ldrh	r2, [r0, #14]
1a0009c8:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a0009ca:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a0009cc:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a0009ce:	6083      	str	r3, [r0, #8]
}
1a0009d0:	bcf0      	pop	{r4, r5, r6, r7}
1a0009d2:	4770      	bx	lr

1a0009d4 <QMPool_put>:
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put( QMPool * const me, void *b )
{
1a0009d4:	b538      	push	{r3, r4, r5, lr}
1a0009d6:	4604      	mov	r4, r0
1a0009d8:	460d      	mov	r5, r1

    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
    portENTER_CRITICAL(); //Enter on critical section
1a0009da:	f001 ff99 	bl	1a002910 <vPortEnterCritical>

    ( ( QFreeBlock * )b )->next = ( QFreeBlock * )me->free_head; /* link into list */
1a0009de:	6823      	ldr	r3, [r4, #0]
1a0009e0:	602b      	str	r3, [r5, #0]
    me->free_head = b;      /* set as new head of the free list */
1a0009e2:	6025      	str	r5, [r4, #0]
    ++me->nFree;            /* one more free block in this pool */
1a0009e4:	8a23      	ldrh	r3, [r4, #16]
1a0009e6:	3301      	adds	r3, #1
1a0009e8:	b29b      	uxth	r3, r3
1a0009ea:	8223      	strh	r3, [r4, #16]

    portEXIT_CRITICAL(); //Exit from critical section
1a0009ec:	f001 ffb2 	bl	1a002954 <vPortExitCritical>
1a0009f0:	bd38      	pop	{r3, r4, r5, pc}
1a0009f2:	bf00      	nop

1a0009f4 <QMPool_put_from_ISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0009f4:	f3ef 8211 	mrs	r2, BASEPRI
1a0009f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009fc:	f383 8811 	msr	BASEPRI, r3
1a000a00:	f3bf 8f6f 	isb	sy
1a000a04:	f3bf 8f4f 	dsb	sy
    */
    //portENTER_CRITICAL_FROM_ISR(); //Enter on critical section
	UBaseType_t uxSavedInterruptStatus;
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();

    ( ( QFreeBlock * )b )->next = ( QFreeBlock * )me->free_head; /* link into list */
1a000a08:	6803      	ldr	r3, [r0, #0]
1a000a0a:	600b      	str	r3, [r1, #0]
    me->free_head = b;      /* set as new head of the free list */
1a000a0c:	6001      	str	r1, [r0, #0]
    ++me->nFree;            /* one more free block in this pool */
1a000a0e:	8a03      	ldrh	r3, [r0, #16]
1a000a10:	3301      	adds	r3, #1
1a000a12:	b29b      	uxth	r3, r3
1a000a14:	8203      	strh	r3, [r0, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000a16:	f382 8811 	msr	BASEPRI, r2
1a000a1a:	4770      	bx	lr

1a000a1c <QMPool_get>:
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get( QMPool * const me, uint_fast16_t const margin )
{
1a000a1c:	b538      	push	{r3, r4, r5, lr}
1a000a1e:	4604      	mov	r4, r0
1a000a20:	460d      	mov	r5, r1
    QFreeBlock *fb;

    portENTER_CRITICAL(); //Enter on critical section
1a000a22:	f001 ff75 	bl	1a002910 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if ( me->nFree > ( QMPoolCtr )margin )
1a000a26:	8a23      	ldrh	r3, [r4, #16]
1a000a28:	b29b      	uxth	r3, r3
1a000a2a:	b2ad      	uxth	r5, r5
1a000a2c:	42ab      	cmp	r3, r5
1a000a2e:	d913      	bls.n	1a000a58 <QMPool_get+0x3c>
    {
        void *fb_next;
        fb = ( QFreeBlock * )me->free_head; /* get a free block */
1a000a30:	6825      	ldr	r5, [r4, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a000a32:	682a      	ldr	r2, [r5, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a000a34:	8a23      	ldrh	r3, [r4, #16]
1a000a36:	3b01      	subs	r3, #1
1a000a38:	b29b      	uxth	r3, r3
1a000a3a:	8223      	strh	r3, [r4, #16]
        if ( me->nFree == ( QMPoolCtr )0 )
1a000a3c:	8a23      	ldrh	r3, [r4, #16]
1a000a3e:	b29b      	uxth	r3, r3
1a000a40:	b90b      	cbnz	r3, 1a000a46 <QMPool_get+0x2a>
        {

            me->nMin = ( QMPoolCtr )0; /* remember that the pool got empty */
1a000a42:	8263      	strh	r3, [r4, #18]
1a000a44:	e006      	b.n	1a000a54 <QMPool_get+0x38>
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */

            /* is the number of free blocks the new minimum so far? */
            if ( me->nMin > me->nFree )
1a000a46:	8a61      	ldrh	r1, [r4, #18]
1a000a48:	8a23      	ldrh	r3, [r4, #16]
1a000a4a:	b29b      	uxth	r3, r3
1a000a4c:	4299      	cmp	r1, r3
1a000a4e:	d901      	bls.n	1a000a54 <QMPool_get+0x38>
            {
                me->nMin = me->nFree; /* remember the new minimum */
1a000a50:	8a23      	ldrh	r3, [r4, #16]
1a000a52:	8263      	strh	r3, [r4, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a000a54:	6022      	str	r2, [r4, #0]
1a000a56:	e000      	b.n	1a000a5a <QMPool_get+0x3e>
    }
    /* don't have enough free blocks at this point */
    else
    {

        fb = ( QFreeBlock * )0;
1a000a58:	2500      	movs	r5, #0

    }

    portEXIT_CRITICAL(); //Exit from critical section
1a000a5a:	f001 ff7b 	bl	1a002954 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
}
1a000a5e:	4628      	mov	r0, r5
1a000a60:	bd38      	pop	{r3, r4, r5, pc}
1a000a62:	bf00      	nop

1a000a64 <QMPool_get_from_ISR>:
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get_from_ISR( QMPool * const me, uint_fast16_t const margin )
{
1a000a64:	b430      	push	{r4, r5}
1a000a66:	4603      	mov	r3, r0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000a68:	f3ef 8411 	mrs	r4, BASEPRI
1a000a6c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
1a000a70:	f382 8811 	msr	BASEPRI, r2
1a000a74:	f3bf 8f6f 	isb	sy
1a000a78:	f3bf 8f4f 	dsb	sy
    //portENTER_CRITICAL(); //Enter on critical section
    UBaseType_t uxSavedInterruptStatus;
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();

    /* have more free blocks than the requested margin? */
    if ( me->nFree > ( QMPoolCtr )margin )
1a000a7c:	8a02      	ldrh	r2, [r0, #16]
1a000a7e:	b292      	uxth	r2, r2
1a000a80:	b289      	uxth	r1, r1
1a000a82:	428a      	cmp	r2, r1
1a000a84:	d913      	bls.n	1a000aae <QMPool_get_from_ISR+0x4a>
    {
        void *fb_next;
        fb = ( QFreeBlock * )me->free_head; /* get a free block */
1a000a86:	6800      	ldr	r0, [r0, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a000a88:	6801      	ldr	r1, [r0, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a000a8a:	8a1a      	ldrh	r2, [r3, #16]
1a000a8c:	3a01      	subs	r2, #1
1a000a8e:	b292      	uxth	r2, r2
1a000a90:	821a      	strh	r2, [r3, #16]
        if ( me->nFree == ( QMPoolCtr )0 )
1a000a92:	8a1a      	ldrh	r2, [r3, #16]
1a000a94:	b292      	uxth	r2, r2
1a000a96:	b90a      	cbnz	r2, 1a000a9c <QMPool_get_from_ISR+0x38>
        {

            me->nMin = ( QMPoolCtr )0; /* remember that the pool got empty */
1a000a98:	825a      	strh	r2, [r3, #18]
1a000a9a:	e006      	b.n	1a000aaa <QMPool_get_from_ISR+0x46>
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */

            /* is the number of free blocks the new minimum so far? */
            if ( me->nMin > me->nFree )
1a000a9c:	8a5d      	ldrh	r5, [r3, #18]
1a000a9e:	8a1a      	ldrh	r2, [r3, #16]
1a000aa0:	b292      	uxth	r2, r2
1a000aa2:	4295      	cmp	r5, r2
1a000aa4:	d901      	bls.n	1a000aaa <QMPool_get_from_ISR+0x46>
            {
                me->nMin = me->nFree; /* remember the new minimum */
1a000aa6:	8a1a      	ldrh	r2, [r3, #16]
1a000aa8:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a000aaa:	6019      	str	r1, [r3, #0]
1a000aac:	e000      	b.n	1a000ab0 <QMPool_get_from_ISR+0x4c>
    }
    /* don't have enough free blocks at this point */
    else
    {

        fb = ( QFreeBlock * )0;
1a000aae:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000ab0:	f384 8811 	msr	BASEPRI, r4

    //portEXIT_CRITICAL(); //Exit from critical section
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    return fb;  /* return the block or NULL pointer to the caller */
}
1a000ab4:	bc30      	pop	{r4, r5}
1a000ab6:	4770      	bx	lr

1a000ab8 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void)
{
1a000ab8:	b500      	push	{lr}
1a000aba:	b083      	sub	sp, #12
	// ---------- CONFIGURACIONES ------------------------------
	// Inicializar y configurar la plataforma
	boardConfig();
1a000abc:	f002 fbf6 	bl	1a0032ac <boardInit>

	// Led para dar señal de vida
	gpioWrite( LED3, ON );
1a000ac0:	202d      	movs	r0, #45	; 0x2d
1a000ac2:	2101      	movs	r1, #1
1a000ac4:	f002 fbb8 	bl	1a003238 <gpioWrite>

	//Instancio la UART junto con el driver
	static driver_t my_driver;
	DriverConfigUART(&my_driver,UART_USB,115200); // configuro el driver
1a000ac8:	4c0b      	ldr	r4, [pc, #44]	; (1a000af8 <main+0x40>)
1a000aca:	4620      	mov	r0, r4
1a000acc:	2103      	movs	r1, #3
1a000ace:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000ad2:	f7ff fdf1 	bl	1a0006b8 <DriverConfigUART>
	DriverInitialize( &my_driver); // inicializo el driver
1a000ad6:	4620      	mov	r0, r4
1a000ad8:	f7ff fdf2 	bl	1a0006c0 <DriverInitialize>

	// Crear tarea en freeRTOS
	xTaskCreate(
1a000adc:	2301      	movs	r3, #1
1a000ade:	9300      	str	r3, [sp, #0]
1a000ae0:	2300      	movs	r3, #0
1a000ae2:	9301      	str	r3, [sp, #4]
1a000ae4:	4805      	ldr	r0, [pc, #20]	; (1a000afc <main+0x44>)
1a000ae6:	4906      	ldr	r1, [pc, #24]	; (1a000b00 <main+0x48>)
1a000ae8:	22b4      	movs	r2, #180	; 0xb4
1a000aea:	4623      	mov	r3, r4
1a000aec:	f000 fffa 	bl	1a001ae4 <xTaskCreate>
			0                            // Puntero a la tarea creada en el sistema
	);


	//FreeRTOS Scheduler Start
	vTaskStartScheduler();
1a000af0:	f001 f82c 	bl	1a001b4c <vTaskStartScheduler>


	while( TRUE )
	{

	}
1a000af4:	e7fe      	b.n	1a000af4 <main+0x3c>
1a000af6:	bf00      	nop
1a000af8:	100000e8 	.word	0x100000e8
1a000afc:	1a000b1d 	.word	0x1a000b1d
1a000b00:	1a004834 	.word	0x1a004834

1a000b04 <get_function_from_packet>:
	}
}


Function_t get_function_from_packet( dataStruct_t data )
{
1a000b04:	b084      	sub	sp, #16
1a000b06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	if(data.data[0] == MAYUSCULIZAR_FUNC_ID) // operacion mayusculizar
1a000b0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000b0e:	2b01      	cmp	r3, #1
1a000b10:	d101      	bne.n	1a000b16 <get_function_from_packet+0x12>
	{
		return MAYUSCULIZAR;
1a000b12:	2000      	movs	r0, #0
1a000b14:	e000      	b.n	1a000b18 <get_function_from_packet+0x14>
	}
	if(data.data[0] == MINUSCULIZAR_FUNC_ID) // operacion mayusculizar
	{
		return MINUSCULIZAR;
1a000b16:	2001      	movs	r0, #1
	}
	else
	{
		return MINUSCULIZAR;
	}
}
1a000b18:	b004      	add	sp, #16
1a000b1a:	4770      	bx	lr

1a000b1c <APP_Task>:
}


// Implementacion de funcion de la tarea
void APP_Task( void* taskParmPtr )
{
1a000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b1e:	b0bf      	sub	sp, #252	; 0xfc
1a000b20:	4605      	mov	r5, r0
	bool_t global_flag = FALSE;

	dataStruct_t test_data;

	//envio mensaje de inicio
	DriverReceive(taskParmPtr,&test_data);
1a000b22:	af1e      	add	r7, sp, #120	; 0x78
1a000b24:	4639      	mov	r1, r7
1a000b26:	f7ff fd87 	bl	1a000638 <DriverReceive>
	strcpy(&(test_data.data),"Sistema inicializado");
1a000b2a:	ac1f      	add	r4, sp, #124	; 0x7c
1a000b2c:	4e27      	ldr	r6, [pc, #156]	; (1a000bcc <APP_Task+0xb0>)
1a000b2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b32:	e896 0003 	ldmia.w	r6, {r0, r1}
1a000b36:	f844 0b04 	str.w	r0, [r4], #4
1a000b3a:	7021      	strb	r1, [r4, #0]
	test_data.size = sizeof("Sistema inicializado")/sizeof(char);
1a000b3c:	2315      	movs	r3, #21
1a000b3e:	931e      	str	r3, [sp, #120]	; 0x78
	DriverSend(taskParmPtr,test_data);
1a000b40:	4668      	mov	r0, sp
1a000b42:	a921      	add	r1, sp, #132	; 0x84
1a000b44:	2274      	movs	r2, #116	; 0x74
1a000b46:	f003 fe3b 	bl	1a0047c0 <memcpy>
1a000b4a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
1a000b4e:	4628      	mov	r0, r5
1a000b50:	f7ff fd1a 	bl	1a000588 <DriverSend>
{
	// ---------- CONFIGURACIONES ------------------------------
	portTickType xLastWakeTime;
	portTickType xPeriodo =  1000 / portTICK_RATE_MS;

	bool_t global_flag = FALSE;
1a000b54:	2400      	movs	r4, #0
	while(TRUE)
	{
		// Intercambia el estado del LEDB
		static tick_t start_delay = 50;

		if (global_flag == TRUE)
1a000b56:	b12c      	cbz	r4, 1a000b64 <APP_Task+0x48>
		{
			global_flag= FALSE;
			gpioWrite( LEDB, ON );
1a000b58:	202a      	movs	r0, #42	; 0x2a
1a000b5a:	2101      	movs	r1, #1
1a000b5c:	f002 fb6c 	bl	1a003238 <gpioWrite>
		// Intercambia el estado del LEDB
		static tick_t start_delay = 50;

		if (global_flag == TRUE)
		{
			global_flag= FALSE;
1a000b60:	2400      	movs	r4, #0
1a000b62:	e004      	b.n	1a000b6e <APP_Task+0x52>

		}
		else
		{
			global_flag = TRUE;
			gpioWrite( LEDB, OFF );
1a000b64:	202a      	movs	r0, #42	; 0x2a
1a000b66:	2100      	movs	r1, #0
1a000b68:	f002 fb66 	bl	1a003238 <gpioWrite>
			gpioWrite( LEDB, ON );

		}
		else
		{
			global_flag = TRUE;
1a000b6c:	2401      	movs	r4, #1
				DriverSend(taskParmPtr,test_data);
			}
		}
		 */

		if (DriverReceive(taskParmPtr,&test_data))
1a000b6e:	4628      	mov	r0, r5
1a000b70:	a91e      	add	r1, sp, #120	; 0x78
1a000b72:	f7ff fd61 	bl	1a000638 <DriverReceive>
1a000b76:	b328      	cbz	r0, 1a000bc4 <APP_Task+0xa8>
		{
			if (get_function_from_packet( test_data ) == MAYUSCULIZAR)
1a000b78:	4668      	mov	r0, sp
1a000b7a:	a922      	add	r1, sp, #136	; 0x88
1a000b7c:	2270      	movs	r2, #112	; 0x70
1a000b7e:	f003 fe1f 	bl	1a0047c0 <memcpy>
1a000b82:	ab1e      	add	r3, sp, #120	; 0x78
1a000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000b86:	f7ff ffbd 	bl	1a000b04 <get_function_from_packet>
1a000b8a:	b910      	cbnz	r0, 1a000b92 <APP_Task+0x76>
			{
				if(instancia_mayus == NULL)
				{
					OAInitialize(instancia_mayus, MAYUSCULIZAR);
1a000b8c:	4601      	mov	r1, r0
1a000b8e:	f7ff fed3 	bl	1a000938 <OAInitialize>
				}
				instancia_generic = instancia_mayus;

			}
			if (get_function_from_packet( test_data ) == MINUSCULIZAR)
1a000b92:	4668      	mov	r0, sp
1a000b94:	a922      	add	r1, sp, #136	; 0x88
1a000b96:	2270      	movs	r2, #112	; 0x70
1a000b98:	f003 fe12 	bl	1a0047c0 <memcpy>
1a000b9c:	ab1e      	add	r3, sp, #120	; 0x78
1a000b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000ba0:	f7ff ffb0 	bl	1a000b04 <get_function_from_packet>
1a000ba4:	2801      	cmp	r0, #1
1a000ba6:	d103      	bne.n	1a000bb0 <APP_Task+0x94>
			{
				if(instancia_minus == NULL)
				{
					OAInitialize(instancia_minus, MINUSCULIZAR);
1a000ba8:	2000      	movs	r0, #0
1a000baa:	2101      	movs	r1, #1
1a000bac:	f7ff fec4 	bl	1a000938 <OAInitialize>
				}
				instancia_generic = instancia_minus;
			}
			//envio a procesar el paquete al OA
			OAProcessPacket( instancia_generic  , test_data);
1a000bb0:	4668      	mov	r0, sp
1a000bb2:	a921      	add	r1, sp, #132	; 0x84
1a000bb4:	2274      	movs	r2, #116	; 0x74
1a000bb6:	f003 fe03 	bl	1a0047c0 <memcpy>
1a000bba:	ab1e      	add	r3, sp, #120	; 0x78
1a000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
1a000bbe:	2000      	movs	r0, #0
1a000bc0:	f7ff feda 	bl	1a000978 <OAProcessPacket>
		}

		vTaskDelay( start_delay / portTICK_RATE_MS );
1a000bc4:	2032      	movs	r0, #50	; 0x32
1a000bc6:	f001 f935 	bl	1a001e34 <vTaskDelay>

	}
1a000bca:	e7c4      	b.n	1a000b56 <APP_Task+0x3a>
1a000bcc:	1a004840 	.word	0x1a004840

1a000bd0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000bd0:	b538      	push	{r3, r4, r5, lr}
1a000bd2:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000bd4:	f010 0f07 	tst.w	r0, #7
1a000bd8:	d002      	beq.n	1a000be0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000bda:	f020 0407 	bic.w	r4, r0, #7
1a000bde:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000be0:	f001 f804 	bl	1a001bec <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000be4:	4b10      	ldr	r3, [pc, #64]	; (1a000c28 <pvPortMalloc+0x58>)
1a000be6:	681b      	ldr	r3, [r3, #0]
1a000be8:	b923      	cbnz	r3, 1a000bf4 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000bea:	4b10      	ldr	r3, [pc, #64]	; (1a000c2c <pvPortMalloc+0x5c>)
1a000bec:	f023 0307 	bic.w	r3, r3, #7
1a000bf0:	4a0d      	ldr	r2, [pc, #52]	; (1a000c28 <pvPortMalloc+0x58>)
1a000bf2:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000bf4:	4b0e      	ldr	r3, [pc, #56]	; (1a000c30 <pvPortMalloc+0x60>)
1a000bf6:	681b      	ldr	r3, [r3, #0]
1a000bf8:	441c      	add	r4, r3
1a000bfa:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000bfe:	4294      	cmp	r4, r2
1a000c00:	d807      	bhi.n	1a000c12 <pvPortMalloc+0x42>
1a000c02:	42a3      	cmp	r3, r4
1a000c04:	d207      	bcs.n	1a000c16 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000c06:	4a08      	ldr	r2, [pc, #32]	; (1a000c28 <pvPortMalloc+0x58>)
1a000c08:	6815      	ldr	r5, [r2, #0]
1a000c0a:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000c0c:	4b08      	ldr	r3, [pc, #32]	; (1a000c30 <pvPortMalloc+0x60>)
1a000c0e:	601c      	str	r4, [r3, #0]
1a000c10:	e002      	b.n	1a000c18 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
1a000c12:	2500      	movs	r5, #0
1a000c14:	e000      	b.n	1a000c18 <pvPortMalloc+0x48>
1a000c16:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000c18:	f001 f890 	bl	1a001d3c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a000c1c:	b90d      	cbnz	r5, 1a000c22 <pvPortMalloc+0x52>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000c1e:	f000 fd97 	bl	1a001750 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000c22:	4628      	mov	r0, r5
1a000c24:	bd38      	pop	{r3, r4, r5, pc}
1a000c26:	bf00      	nop
1a000c28:	100028a0 	.word	0x100028a0
1a000c2c:	100008a8 	.word	0x100008a8
1a000c30:	1000089c 	.word	0x1000089c

1a000c34 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000c34:	b140      	cbz	r0, 1a000c48 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c3a:	f383 8811 	msr	BASEPRI, r3
1a000c3e:	f3bf 8f6f 	isb	sy
1a000c42:	f3bf 8f4f 	dsb	sy
1a000c46:	e7fe      	b.n	1a000c46 <vPortFree+0x12>
1a000c48:	4770      	bx	lr
1a000c4a:	bf00      	nop

1a000c4c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000c4e:	b123      	cbz	r3, 1a000c5a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000c52:	6818      	ldr	r0, [r3, #0]
1a000c54:	f1c0 0007 	rsb	r0, r0, #7
1a000c58:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000c5a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000c5c:	4770      	bx	lr
1a000c5e:	bf00      	nop

1a000c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000c60:	b510      	push	{r4, lr}
1a000c62:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000c64:	f001 fe54 	bl	1a002910 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000c68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c6c:	429a      	cmp	r2, r3
1a000c6e:	d101      	bne.n	1a000c74 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
1a000c70:	2401      	movs	r4, #1
1a000c72:	e000      	b.n	1a000c76 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
1a000c74:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000c76:	f001 fe6d 	bl	1a002954 <vPortExitCritical>

	return xReturn;
}
1a000c7a:	4620      	mov	r0, r4
1a000c7c:	bd10      	pop	{r4, pc}
1a000c7e:	bf00      	nop

1a000c80 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000c80:	b510      	push	{r4, lr}
1a000c82:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000c84:	f001 fe44 	bl	1a002910 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000c8a:	b90b      	cbnz	r3, 1a000c90 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
1a000c8c:	2401      	movs	r4, #1
1a000c8e:	e000      	b.n	1a000c92 <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
1a000c90:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000c92:	f001 fe5f 	bl	1a002954 <vPortExitCritical>

	return xReturn;
}
1a000c96:	4620      	mov	r0, r4
1a000c98:	bd10      	pop	{r4, pc}
1a000c9a:	bf00      	nop

1a000c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000c9c:	b570      	push	{r4, r5, r6, lr}
1a000c9e:	4604      	mov	r4, r0
1a000ca0:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000ca2:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000ca4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ca6:	b93a      	cbnz	r2, 1a000cb8 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000ca8:	6803      	ldr	r3, [r0, #0]
1a000caa:	bb43      	cbnz	r3, 1a000cfe <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000cac:	6840      	ldr	r0, [r0, #4]
1a000cae:	f001 fa89 	bl	1a0021c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000cb2:	2300      	movs	r3, #0
1a000cb4:	6063      	str	r3, [r4, #4]
1a000cb6:	e029      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000cb8:	b96e      	cbnz	r6, 1a000cd6 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000cba:	6880      	ldr	r0, [r0, #8]
1a000cbc:	f003 fd80 	bl	1a0047c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000cc0:	68a2      	ldr	r2, [r4, #8]
1a000cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000cc4:	4413      	add	r3, r2
1a000cc6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000cc8:	6862      	ldr	r2, [r4, #4]
1a000cca:	4293      	cmp	r3, r2
1a000ccc:	d319      	bcc.n	1a000d02 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000cce:	6823      	ldr	r3, [r4, #0]
1a000cd0:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000cd2:	2000      	movs	r0, #0
1a000cd4:	e01a      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000cd6:	68c0      	ldr	r0, [r0, #12]
1a000cd8:	f003 fd72 	bl	1a0047c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000cde:	425b      	negs	r3, r3
1a000ce0:	68e2      	ldr	r2, [r4, #12]
1a000ce2:	441a      	add	r2, r3
1a000ce4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000ce6:	6821      	ldr	r1, [r4, #0]
1a000ce8:	428a      	cmp	r2, r1
1a000cea:	d202      	bcs.n	1a000cf2 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000cec:	6862      	ldr	r2, [r4, #4]
1a000cee:	4413      	add	r3, r2
1a000cf0:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a000cf2:	2e02      	cmp	r6, #2
1a000cf4:	d107      	bne.n	1a000d06 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000cf6:	b145      	cbz	r5, 1a000d0a <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000cf8:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000cfa:	2000      	movs	r0, #0
1a000cfc:	e006      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
1a000cfe:	2000      	movs	r0, #0
1a000d00:	e004      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
1a000d02:	2000      	movs	r0, #0
1a000d04:	e002      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
1a000d06:	2000      	movs	r0, #0
1a000d08:	e000      	b.n	1a000d0c <prvCopyDataToQueue+0x70>
1a000d0a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000d0c:	3501      	adds	r5, #1
1a000d0e:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000d10:	bd70      	pop	{r4, r5, r6, pc}
1a000d12:	bf00      	nop

1a000d14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000d16:	b172      	cbz	r2, 1a000d36 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a000d18:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000d1a:	68c3      	ldr	r3, [r0, #12]
1a000d1c:	4413      	add	r3, r2
1a000d1e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000d20:	6844      	ldr	r4, [r0, #4]
1a000d22:	42a3      	cmp	r3, r4
1a000d24:	d301      	bcc.n	1a000d2a <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000d26:	6803      	ldr	r3, [r0, #0]
1a000d28:	60c3      	str	r3, [r0, #12]
1a000d2a:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000d2c:	4608      	mov	r0, r1
1a000d2e:	68d9      	ldr	r1, [r3, #12]
1a000d30:	f003 fd46 	bl	1a0047c0 <memcpy>
1a000d34:	bd10      	pop	{r4, pc}
1a000d36:	4770      	bx	lr

1a000d38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a000d38:	b538      	push	{r3, r4, r5, lr}
1a000d3a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a000d3c:	f001 fde8 	bl	1a002910 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a000d40:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000d44:	b2e4      	uxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000d46:	e00a      	b.n	1a000d5e <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000d4a:	b15b      	cbz	r3, 1a000d64 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000d50:	f001 f92e 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000d54:	b108      	cbz	r0, 1a000d5a <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a000d56:	f001 f9bd 	bl	1a0020d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a000d5a:	3c01      	subs	r4, #1
1a000d5c:	b2e4      	uxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000d5e:	b263      	sxtb	r3, r4
1a000d60:	2b00      	cmp	r3, #0
1a000d62:	dcf1      	bgt.n	1a000d48 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a000d64:	23ff      	movs	r3, #255	; 0xff
1a000d66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a000d6a:	f001 fdf3 	bl	1a002954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a000d6e:	f001 fdcf 	bl	1a002910 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a000d72:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000d76:	b2e4      	uxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000d78:	e00a      	b.n	1a000d90 <prvUnlockQueue+0x58>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d7a:	692b      	ldr	r3, [r5, #16]
1a000d7c:	b15b      	cbz	r3, 1a000d96 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d7e:	f105 0010 	add.w	r0, r5, #16
1a000d82:	f001 f915 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000d86:	b108      	cbz	r0, 1a000d8c <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
1a000d88:	f001 f9a4 	bl	1a0020d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000d8c:	3c01      	subs	r4, #1
1a000d8e:	b2e4      	uxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000d90:	b263      	sxtb	r3, r4
1a000d92:	2b00      	cmp	r3, #0
1a000d94:	dcf1      	bgt.n	1a000d7a <prvUnlockQueue+0x42>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a000d96:	23ff      	movs	r3, #255	; 0xff
1a000d98:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000d9c:	f001 fdda 	bl	1a002954 <vPortExitCritical>
1a000da0:	bd38      	pop	{r3, r4, r5, pc}
1a000da2:	bf00      	nop

1a000da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a000da4:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000da6:	b940      	cbnz	r0, 1a000dba <xQueueGenericReset+0x16>
1a000da8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dac:	f383 8811 	msr	BASEPRI, r3
1a000db0:	f3bf 8f6f 	isb	sy
1a000db4:	f3bf 8f4f 	dsb	sy
1a000db8:	e7fe      	b.n	1a000db8 <xQueueGenericReset+0x14>
1a000dba:	4604      	mov	r4, r0
1a000dbc:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000dbe:	f001 fda7 	bl	1a002910 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000dc2:	6821      	ldr	r1, [r4, #0]
1a000dc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000dc8:	fb03 1002 	mla	r0, r3, r2, r1
1a000dcc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000dce:	2000      	movs	r0, #0
1a000dd0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000dd2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000dd4:	3a01      	subs	r2, #1
1a000dd6:	fb02 1303 	mla	r3, r2, r3, r1
1a000dda:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000ddc:	23ff      	movs	r3, #255	; 0xff
1a000dde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a000de6:	b97d      	cbnz	r5, 1a000e08 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000de8:	6923      	ldr	r3, [r4, #16]
1a000dea:	b1ab      	cbz	r3, 1a000e18 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000dec:	f104 0010 	add.w	r0, r4, #16
1a000df0:	f001 f8de 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000df4:	b180      	cbz	r0, 1a000e18 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a000df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dfa:	4b09      	ldr	r3, [pc, #36]	; (1a000e20 <xQueueGenericReset+0x7c>)
1a000dfc:	601a      	str	r2, [r3, #0]
1a000dfe:	f3bf 8f4f 	dsb	sy
1a000e02:	f3bf 8f6f 	isb	sy
1a000e06:	e007      	b.n	1a000e18 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000e08:	f104 0010 	add.w	r0, r4, #16
1a000e0c:	f000 fc3c 	bl	1a001688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e14:	f000 fc38 	bl	1a001688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a000e18:	f001 fd9c 	bl	1a002954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a000e1c:	2001      	movs	r0, #1
1a000e1e:	bd38      	pop	{r3, r4, r5, pc}
1a000e20:	e000ed04 	.word	0xe000ed04

1a000e24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a000e24:	b538      	push	{r3, r4, r5, lr}
1a000e26:	461d      	mov	r5, r3
1a000e28:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a000e2a:	460b      	mov	r3, r1
1a000e2c:	b909      	cbnz	r1, 1a000e32 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000e2e:	6024      	str	r4, [r4, #0]
1a000e30:	e000      	b.n	1a000e34 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000e32:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a000e34:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000e36:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000e38:	4620      	mov	r0, r4
1a000e3a:	2101      	movs	r1, #1
1a000e3c:	f7ff ffb2 	bl	1a000da4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a000e40:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000e44:	bd38      	pop	{r3, r4, r5, pc}
1a000e46:	bf00      	nop

1a000e48 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000e48:	b940      	cbnz	r0, 1a000e5c <xQueueGenericCreateStatic+0x14>
1a000e4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e4e:	f383 8811 	msr	BASEPRI, r3
1a000e52:	f3bf 8f6f 	isb	sy
1a000e56:	f3bf 8f4f 	dsb	sy
1a000e5a:	e7fe      	b.n	1a000e5a <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a000e5c:	b510      	push	{r4, lr}
1a000e5e:	b084      	sub	sp, #16
1a000e60:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a000e62:	b943      	cbnz	r3, 1a000e76 <xQueueGenericCreateStatic+0x2e>
1a000e64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e68:	f383 8811 	msr	BASEPRI, r3
1a000e6c:	f3bf 8f6f 	isb	sy
1a000e70:	f3bf 8f4f 	dsb	sy
1a000e74:	e7fe      	b.n	1a000e74 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000e76:	b112      	cbz	r2, 1a000e7e <xQueueGenericCreateStatic+0x36>
1a000e78:	b119      	cbz	r1, 1a000e82 <xQueueGenericCreateStatic+0x3a>
1a000e7a:	2001      	movs	r0, #1
1a000e7c:	e002      	b.n	1a000e84 <xQueueGenericCreateStatic+0x3c>
1a000e7e:	2001      	movs	r0, #1
1a000e80:	e000      	b.n	1a000e84 <xQueueGenericCreateStatic+0x3c>
1a000e82:	2000      	movs	r0, #0
1a000e84:	b940      	cbnz	r0, 1a000e98 <xQueueGenericCreateStatic+0x50>
1a000e86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8a:	f383 8811 	msr	BASEPRI, r3
1a000e8e:	f3bf 8f6f 	isb	sy
1a000e92:	f3bf 8f4f 	dsb	sy
1a000e96:	e7fe      	b.n	1a000e96 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000e98:	b912      	cbnz	r2, 1a000ea0 <xQueueGenericCreateStatic+0x58>
1a000e9a:	b919      	cbnz	r1, 1a000ea4 <xQueueGenericCreateStatic+0x5c>
1a000e9c:	2001      	movs	r0, #1
1a000e9e:	e002      	b.n	1a000ea6 <xQueueGenericCreateStatic+0x5e>
1a000ea0:	2001      	movs	r0, #1
1a000ea2:	e000      	b.n	1a000ea6 <xQueueGenericCreateStatic+0x5e>
1a000ea4:	2000      	movs	r0, #0
1a000ea6:	b940      	cbnz	r0, 1a000eba <xQueueGenericCreateStatic+0x72>
1a000ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eac:	f383 8811 	msr	BASEPRI, r3
1a000eb0:	f3bf 8f6f 	isb	sy
1a000eb4:	f3bf 8f4f 	dsb	sy
1a000eb8:	e7fe      	b.n	1a000eb8 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000eba:	2050      	movs	r0, #80	; 0x50
1a000ebc:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000ebe:	9803      	ldr	r0, [sp, #12]
1a000ec0:	2850      	cmp	r0, #80	; 0x50
1a000ec2:	d008      	beq.n	1a000ed6 <xQueueGenericCreateStatic+0x8e>
1a000ec4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ec8:	f383 8811 	msr	BASEPRI, r3
1a000ecc:	f3bf 8f6f 	isb	sy
1a000ed0:	f3bf 8f4f 	dsb	sy
1a000ed4:	e7fe      	b.n	1a000ed4 <xQueueGenericCreateStatic+0x8c>
1a000ed6:	4620      	mov	r0, r4
1a000ed8:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
1a000eda:	b13b      	cbz	r3, 1a000eec <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000edc:	2301      	movs	r3, #1
1a000ede:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000ee2:	9400      	str	r4, [sp, #0]
1a000ee4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000ee8:	f7ff ff9c 	bl	1a000e24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000eec:	4620      	mov	r0, r4
1a000eee:	b004      	add	sp, #16
1a000ef0:	bd10      	pop	{r4, pc}
1a000ef2:	bf00      	nop

1a000ef4 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ef4:	b940      	cbnz	r0, 1a000f08 <xQueueGenericCreate+0x14>
1a000ef6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000efa:	f383 8811 	msr	BASEPRI, r3
1a000efe:	f3bf 8f6f 	isb	sy
1a000f02:	f3bf 8f4f 	dsb	sy
1a000f06:	e7fe      	b.n	1a000f06 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f0a:	b083      	sub	sp, #12
1a000f0c:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
1a000f0e:	b111      	cbz	r1, 1a000f16 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000f10:	fb01 f000 	mul.w	r0, r1, r0
1a000f14:	e000      	b.n	1a000f18 <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a000f16:	2000      	movs	r0, #0
1a000f18:	461e      	mov	r6, r3
1a000f1a:	4617      	mov	r7, r2
1a000f1c:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000f1e:	3050      	adds	r0, #80	; 0x50
1a000f20:	f7ff fe56 	bl	1a000bd0 <pvPortMalloc>

		if( pxNewQueue != NULL )
1a000f24:	4605      	mov	r5, r0
1a000f26:	b150      	cbz	r0, 1a000f3e <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000f28:	2300      	movs	r3, #0
1a000f2a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000f2e:	9000      	str	r0, [sp, #0]
1a000f30:	4630      	mov	r0, r6
1a000f32:	4621      	mov	r1, r4
1a000f34:	f105 0250 	add.w	r2, r5, #80	; 0x50
1a000f38:	463b      	mov	r3, r7
1a000f3a:	f7ff ff73 	bl	1a000e24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000f3e:	4628      	mov	r0, r5
1a000f40:	b003      	add	sp, #12
1a000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000f44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f46:	b085      	sub	sp, #20
1a000f48:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000f4a:	b940      	cbnz	r0, 1a000f5e <xQueueGenericSend+0x1a>
1a000f4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f50:	f383 8811 	msr	BASEPRI, r3
1a000f54:	f3bf 8f6f 	isb	sy
1a000f58:	f3bf 8f4f 	dsb	sy
1a000f5c:	e7fe      	b.n	1a000f5c <xQueueGenericSend+0x18>
1a000f5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000f60:	b919      	cbnz	r1, 1a000f6a <xQueueGenericSend+0x26>
1a000f62:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f64:	b91a      	cbnz	r2, 1a000f6e <xQueueGenericSend+0x2a>
1a000f66:	2201      	movs	r2, #1
1a000f68:	e002      	b.n	1a000f70 <xQueueGenericSend+0x2c>
1a000f6a:	2201      	movs	r2, #1
1a000f6c:	e000      	b.n	1a000f70 <xQueueGenericSend+0x2c>
1a000f6e:	2200      	movs	r2, #0
1a000f70:	b942      	cbnz	r2, 1a000f84 <xQueueGenericSend+0x40>
1a000f72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f76:	f383 8811 	msr	BASEPRI, r3
1a000f7a:	f3bf 8f6f 	isb	sy
1a000f7e:	f3bf 8f4f 	dsb	sy
1a000f82:	e7fe      	b.n	1a000f82 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000f84:	2b02      	cmp	r3, #2
1a000f86:	d103      	bne.n	1a000f90 <xQueueGenericSend+0x4c>
1a000f88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000f8a:	2a01      	cmp	r2, #1
1a000f8c:	d102      	bne.n	1a000f94 <xQueueGenericSend+0x50>
1a000f8e:	e002      	b.n	1a000f96 <xQueueGenericSend+0x52>
1a000f90:	2201      	movs	r2, #1
1a000f92:	e000      	b.n	1a000f96 <xQueueGenericSend+0x52>
1a000f94:	2200      	movs	r2, #0
1a000f96:	b942      	cbnz	r2, 1a000faa <xQueueGenericSend+0x66>
1a000f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f9c:	f383 8811 	msr	BASEPRI, r3
1a000fa0:	f3bf 8f6f 	isb	sy
1a000fa4:	f3bf 8f4f 	dsb	sy
1a000fa8:	e7fe      	b.n	1a000fa8 <xQueueGenericSend+0x64>
1a000faa:	461d      	mov	r5, r3
1a000fac:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000fae:	f001 f897 	bl	1a0020e0 <xTaskGetSchedulerState>
1a000fb2:	b918      	cbnz	r0, 1a000fbc <xQueueGenericSend+0x78>
1a000fb4:	9b01      	ldr	r3, [sp, #4]
1a000fb6:	b91b      	cbnz	r3, 1a000fc0 <xQueueGenericSend+0x7c>
1a000fb8:	2301      	movs	r3, #1
1a000fba:	e002      	b.n	1a000fc2 <xQueueGenericSend+0x7e>
1a000fbc:	2301      	movs	r3, #1
1a000fbe:	e000      	b.n	1a000fc2 <xQueueGenericSend+0x7e>
1a000fc0:	2300      	movs	r3, #0
1a000fc2:	b943      	cbnz	r3, 1a000fd6 <xQueueGenericSend+0x92>
1a000fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fc8:	f383 8811 	msr	BASEPRI, r3
1a000fcc:	f3bf 8f6f 	isb	sy
1a000fd0:	f3bf 8f4f 	dsb	sy
1a000fd4:	e7fe      	b.n	1a000fd4 <xQueueGenericSend+0x90>
1a000fd6:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a000fd8:	f001 fc9a 	bl	1a002910 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000fdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000fde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000fe0:	429a      	cmp	r2, r3
1a000fe2:	d301      	bcc.n	1a000fe8 <xQueueGenericSend+0xa4>
1a000fe4:	2d02      	cmp	r5, #2
1a000fe6:	d121      	bne.n	1a00102c <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000fe8:	4620      	mov	r0, r4
1a000fea:	4631      	mov	r1, r6
1a000fec:	462a      	mov	r2, r5
1a000fee:	f7ff fe55 	bl	1a000c9c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000ff4:	b16b      	cbz	r3, 1a001012 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000ff6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ffa:	f000 ffd9 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a000ffe:	b188      	cbz	r0, 1a001024 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a001000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001004:	4b32      	ldr	r3, [pc, #200]	; (1a0010d0 <xQueueGenericSend+0x18c>)
1a001006:	601a      	str	r2, [r3, #0]
1a001008:	f3bf 8f4f 	dsb	sy
1a00100c:	f3bf 8f6f 	isb	sy
1a001010:	e008      	b.n	1a001024 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a001012:	b138      	cbz	r0, 1a001024 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a001014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001018:	4b2d      	ldr	r3, [pc, #180]	; (1a0010d0 <xQueueGenericSend+0x18c>)
1a00101a:	601a      	str	r2, [r3, #0]
1a00101c:	f3bf 8f4f 	dsb	sy
1a001020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a001024:	f001 fc96 	bl	1a002954 <vPortExitCritical>
				return pdPASS;
1a001028:	2001      	movs	r0, #1
1a00102a:	e04e      	b.n	1a0010ca <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00102c:	9b01      	ldr	r3, [sp, #4]
1a00102e:	b91b      	cbnz	r3, 1a001038 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a001030:	f001 fc90 	bl	1a002954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a001034:	2000      	movs	r0, #0
1a001036:	e048      	b.n	1a0010ca <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
1a001038:	b91f      	cbnz	r7, 1a001042 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00103a:	a802      	add	r0, sp, #8
1a00103c:	f000 fffe 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001040:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001042:	f001 fc87 	bl	1a002954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001046:	f000 fdd1 	bl	1a001bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00104a:	f001 fc61 	bl	1a002910 <vPortEnterCritical>
1a00104e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001052:	b25b      	sxtb	r3, r3
1a001054:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001058:	d102      	bne.n	1a001060 <xQueueGenericSend+0x11c>
1a00105a:	2300      	movs	r3, #0
1a00105c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001060:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001064:	b25b      	sxtb	r3, r3
1a001066:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00106a:	d102      	bne.n	1a001072 <xQueueGenericSend+0x12e>
1a00106c:	2300      	movs	r3, #0
1a00106e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001072:	f001 fc6f 	bl	1a002954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001076:	a802      	add	r0, sp, #8
1a001078:	a901      	add	r1, sp, #4
1a00107a:	f000 ffeb 	bl	1a002054 <xTaskCheckForTimeOut>
1a00107e:	b9f0      	cbnz	r0, 1a0010be <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001080:	4620      	mov	r0, r4
1a001082:	f7ff fded 	bl	1a000c60 <prvIsQueueFull>
1a001086:	b1a0      	cbz	r0, 1a0010b2 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001088:	f104 0010 	add.w	r0, r4, #16
1a00108c:	9901      	ldr	r1, [sp, #4]
1a00108e:	f000 ff5b 	bl	1a001f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a001092:	4620      	mov	r0, r4
1a001094:	f7ff fe50 	bl	1a000d38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a001098:	f000 fe50 	bl	1a001d3c <xTaskResumeAll>
1a00109c:	2800      	cmp	r0, #0
1a00109e:	d19b      	bne.n	1a000fd8 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
1a0010a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0010d0 <xQueueGenericSend+0x18c>)
1a0010a6:	601a      	str	r2, [r3, #0]
1a0010a8:	f3bf 8f4f 	dsb	sy
1a0010ac:	f3bf 8f6f 	isb	sy
1a0010b0:	e792      	b.n	1a000fd8 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a0010b2:	4620      	mov	r0, r4
1a0010b4:	f7ff fe40 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0010b8:	f000 fe40 	bl	1a001d3c <xTaskResumeAll>
1a0010bc:	e78c      	b.n	1a000fd8 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a0010be:	4620      	mov	r0, r4
1a0010c0:	f7ff fe3a 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0010c4:	f000 fe3a 	bl	1a001d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a0010c8:	2000      	movs	r0, #0
		}
	}
}
1a0010ca:	b005      	add	sp, #20
1a0010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0010ce:	bf00      	nop
1a0010d0:	e000ed04 	.word	0xe000ed04

1a0010d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a0010d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a0010d8:	b940      	cbnz	r0, 1a0010ec <xQueueGenericSendFromISR+0x18>
1a0010da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010de:	f383 8811 	msr	BASEPRI, r3
1a0010e2:	f3bf 8f6f 	isb	sy
1a0010e6:	f3bf 8f4f 	dsb	sy
1a0010ea:	e7fe      	b.n	1a0010ea <xQueueGenericSendFromISR+0x16>
1a0010ec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010ee:	b919      	cbnz	r1, 1a0010f8 <xQueueGenericSendFromISR+0x24>
1a0010f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0010f2:	b918      	cbnz	r0, 1a0010fc <xQueueGenericSendFromISR+0x28>
1a0010f4:	2001      	movs	r0, #1
1a0010f6:	e002      	b.n	1a0010fe <xQueueGenericSendFromISR+0x2a>
1a0010f8:	2001      	movs	r0, #1
1a0010fa:	e000      	b.n	1a0010fe <xQueueGenericSendFromISR+0x2a>
1a0010fc:	2000      	movs	r0, #0
1a0010fe:	b940      	cbnz	r0, 1a001112 <xQueueGenericSendFromISR+0x3e>
1a001100:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001104:	f383 8811 	msr	BASEPRI, r3
1a001108:	f3bf 8f6f 	isb	sy
1a00110c:	f3bf 8f4f 	dsb	sy
1a001110:	e7fe      	b.n	1a001110 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001112:	2b02      	cmp	r3, #2
1a001114:	d103      	bne.n	1a00111e <xQueueGenericSendFromISR+0x4a>
1a001116:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001118:	2801      	cmp	r0, #1
1a00111a:	d102      	bne.n	1a001122 <xQueueGenericSendFromISR+0x4e>
1a00111c:	e002      	b.n	1a001124 <xQueueGenericSendFromISR+0x50>
1a00111e:	2001      	movs	r0, #1
1a001120:	e000      	b.n	1a001124 <xQueueGenericSendFromISR+0x50>
1a001122:	2000      	movs	r0, #0
1a001124:	b940      	cbnz	r0, 1a001138 <xQueueGenericSendFromISR+0x64>
1a001126:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00112a:	f383 8811 	msr	BASEPRI, r3
1a00112e:	f3bf 8f6f 	isb	sy
1a001132:	f3bf 8f4f 	dsb	sy
1a001136:	e7fe      	b.n	1a001136 <xQueueGenericSendFromISR+0x62>
1a001138:	461f      	mov	r7, r3
1a00113a:	4690      	mov	r8, r2
1a00113c:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00113e:	f001 fd1d 	bl	1a002b7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001142:	f3ef 8611 	mrs	r6, BASEPRI
1a001146:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00114a:	f383 8811 	msr	BASEPRI, r3
1a00114e:	f3bf 8f6f 	isb	sy
1a001152:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00115a:	429a      	cmp	r2, r3
1a00115c:	d301      	bcc.n	1a001162 <xQueueGenericSendFromISR+0x8e>
1a00115e:	2f02      	cmp	r7, #2
1a001160:	d11f      	bne.n	1a0011a2 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a001162:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001166:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001168:	4620      	mov	r0, r4
1a00116a:	4649      	mov	r1, r9
1a00116c:	463a      	mov	r2, r7
1a00116e:	f7ff fd95 	bl	1a000c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a001172:	b26b      	sxtb	r3, r5
1a001174:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001178:	d10d      	bne.n	1a001196 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00117a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00117c:	b19b      	cbz	r3, 1a0011a6 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00117e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001182:	f000 ff15 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a001186:	b180      	cbz	r0, 1a0011aa <xQueueGenericSendFromISR+0xd6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a001188:	f1b8 0f00 	cmp.w	r8, #0
1a00118c:	d00f      	beq.n	1a0011ae <xQueueGenericSendFromISR+0xda>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00118e:	2001      	movs	r0, #1
1a001190:	f8c8 0000 	str.w	r0, [r8]
1a001194:	e00c      	b.n	1a0011b0 <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001196:	1c6b      	adds	r3, r5, #1
1a001198:	b2db      	uxtb	r3, r3
1a00119a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a00119e:	2001      	movs	r0, #1
1a0011a0:	e006      	b.n	1a0011b0 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a0011a2:	2000      	movs	r0, #0
1a0011a4:	e004      	b.n	1a0011b0 <xQueueGenericSendFromISR+0xdc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a0011a6:	2001      	movs	r0, #1
1a0011a8:	e002      	b.n	1a0011b0 <xQueueGenericSendFromISR+0xdc>
1a0011aa:	2001      	movs	r0, #1
1a0011ac:	e000      	b.n	1a0011b0 <xQueueGenericSendFromISR+0xdc>
1a0011ae:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0011b0:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a0011b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0011b8 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
1a0011b8:	b940      	cbnz	r0, 1a0011cc <xQueueGiveFromISR+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0011ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011be:	f383 8811 	msr	BASEPRI, r3
1a0011c2:	f3bf 8f6f 	isb	sy
1a0011c6:	f3bf 8f4f 	dsb	sy
1a0011ca:	e7fe      	b.n	1a0011ca <xQueueGiveFromISR+0x12>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
1a0011cc:	b570      	push	{r4, r5, r6, lr}
1a0011ce:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a0011d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0011d2:	b143      	cbz	r3, 1a0011e6 <xQueueGiveFromISR+0x2e>
1a0011d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011d8:	f383 8811 	msr	BASEPRI, r3
1a0011dc:	f3bf 8f6f 	isb	sy
1a0011e0:	f3bf 8f4f 	dsb	sy
1a0011e4:	e7fe      	b.n	1a0011e4 <xQueueGiveFromISR+0x2c>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a0011e6:	6803      	ldr	r3, [r0, #0]
1a0011e8:	b91b      	cbnz	r3, 1a0011f2 <xQueueGiveFromISR+0x3a>
1a0011ea:	6843      	ldr	r3, [r0, #4]
1a0011ec:	b91b      	cbnz	r3, 1a0011f6 <xQueueGiveFromISR+0x3e>
1a0011ee:	2301      	movs	r3, #1
1a0011f0:	e002      	b.n	1a0011f8 <xQueueGiveFromISR+0x40>
1a0011f2:	2301      	movs	r3, #1
1a0011f4:	e000      	b.n	1a0011f8 <xQueueGiveFromISR+0x40>
1a0011f6:	2300      	movs	r3, #0
1a0011f8:	b943      	cbnz	r3, 1a00120c <xQueueGiveFromISR+0x54>
1a0011fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011fe:	f383 8811 	msr	BASEPRI, r3
1a001202:	f3bf 8f6f 	isb	sy
1a001206:	f3bf 8f4f 	dsb	sy
1a00120a:	e7fe      	b.n	1a00120a <xQueueGiveFromISR+0x52>
1a00120c:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00120e:	f001 fcb5 	bl	1a002b7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001212:	f3ef 8611 	mrs	r6, BASEPRI
1a001216:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00121a:	f383 8811 	msr	BASEPRI, r3
1a00121e:	f3bf 8f6f 	isb	sy
1a001222:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001226:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
1a001228:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00122a:	429a      	cmp	r2, r3
1a00122c:	d917      	bls.n	1a00125e <xQueueGiveFromISR+0xa6>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a00122e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001232:	3301      	adds	r3, #1
1a001234:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a001236:	b2d3      	uxtb	r3, r2
1a001238:	2aff      	cmp	r2, #255	; 0xff
1a00123a:	d10a      	bne.n	1a001252 <xQueueGiveFromISR+0x9a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00123c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00123e:	b183      	cbz	r3, 1a001262 <xQueueGiveFromISR+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001240:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001244:	f000 feb4 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a001248:	b168      	cbz	r0, 1a001266 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a00124a:	b175      	cbz	r5, 1a00126a <xQueueGiveFromISR+0xb2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00124c:	2001      	movs	r0, #1
1a00124e:	6028      	str	r0, [r5, #0]
1a001250:	e00c      	b.n	1a00126c <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001252:	3301      	adds	r3, #1
1a001254:	b2db      	uxtb	r3, r3
1a001256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a00125a:	2001      	movs	r0, #1
1a00125c:	e006      	b.n	1a00126c <xQueueGiveFromISR+0xb4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a00125e:	2000      	movs	r0, #0
1a001260:	e004      	b.n	1a00126c <xQueueGiveFromISR+0xb4>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a001262:	2001      	movs	r0, #1
1a001264:	e002      	b.n	1a00126c <xQueueGiveFromISR+0xb4>
1a001266:	2001      	movs	r0, #1
1a001268:	e000      	b.n	1a00126c <xQueueGiveFromISR+0xb4>
1a00126a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00126c:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a001270:	bd70      	pop	{r4, r5, r6, pc}
1a001272:	bf00      	nop

1a001274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a001274:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001276:	b085      	sub	sp, #20
1a001278:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a00127a:	b940      	cbnz	r0, 1a00128e <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00127c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001280:	f383 8811 	msr	BASEPRI, r3
1a001284:	f3bf 8f6f 	isb	sy
1a001288:	f3bf 8f4f 	dsb	sy
1a00128c:	e7fe      	b.n	1a00128c <xQueueReceive+0x18>
1a00128e:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001290:	b919      	cbnz	r1, 1a00129a <xQueueReceive+0x26>
1a001292:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001294:	b91b      	cbnz	r3, 1a00129e <xQueueReceive+0x2a>
1a001296:	2301      	movs	r3, #1
1a001298:	e002      	b.n	1a0012a0 <xQueueReceive+0x2c>
1a00129a:	2301      	movs	r3, #1
1a00129c:	e000      	b.n	1a0012a0 <xQueueReceive+0x2c>
1a00129e:	2300      	movs	r3, #0
1a0012a0:	b943      	cbnz	r3, 1a0012b4 <xQueueReceive+0x40>
1a0012a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012a6:	f383 8811 	msr	BASEPRI, r3
1a0012aa:	f3bf 8f6f 	isb	sy
1a0012ae:	f3bf 8f4f 	dsb	sy
1a0012b2:	e7fe      	b.n	1a0012b2 <xQueueReceive+0x3e>
1a0012b4:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0012b6:	f000 ff13 	bl	1a0020e0 <xTaskGetSchedulerState>
1a0012ba:	b918      	cbnz	r0, 1a0012c4 <xQueueReceive+0x50>
1a0012bc:	9b01      	ldr	r3, [sp, #4]
1a0012be:	b91b      	cbnz	r3, 1a0012c8 <xQueueReceive+0x54>
1a0012c0:	2301      	movs	r3, #1
1a0012c2:	e002      	b.n	1a0012ca <xQueueReceive+0x56>
1a0012c4:	2301      	movs	r3, #1
1a0012c6:	e000      	b.n	1a0012ca <xQueueReceive+0x56>
1a0012c8:	2300      	movs	r3, #0
1a0012ca:	b943      	cbnz	r3, 1a0012de <xQueueReceive+0x6a>
1a0012cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012d0:	f383 8811 	msr	BASEPRI, r3
1a0012d4:	f3bf 8f6f 	isb	sy
1a0012d8:	f3bf 8f4f 	dsb	sy
1a0012dc:	e7fe      	b.n	1a0012dc <xQueueReceive+0x68>
1a0012de:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a0012e0:	f001 fb16 	bl	1a002910 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0012e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0012e6:	b1c5      	cbz	r5, 1a00131a <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0012e8:	4620      	mov	r0, r4
1a0012ea:	4631      	mov	r1, r6
1a0012ec:	f7ff fd12 	bl	1a000d14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0012f0:	3d01      	subs	r5, #1
1a0012f2:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0012f4:	6923      	ldr	r3, [r4, #16]
1a0012f6:	b163      	cbz	r3, 1a001312 <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0012f8:	f104 0010 	add.w	r0, r4, #16
1a0012fc:	f000 fe58 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a001300:	b138      	cbz	r0, 1a001312 <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a001302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001306:	4b30      	ldr	r3, [pc, #192]	; (1a0013c8 <xQueueReceive+0x154>)
1a001308:	601a      	str	r2, [r3, #0]
1a00130a:	f3bf 8f4f 	dsb	sy
1a00130e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a001312:	f001 fb1f 	bl	1a002954 <vPortExitCritical>
				return pdPASS;
1a001316:	2001      	movs	r0, #1
1a001318:	e053      	b.n	1a0013c2 <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00131a:	9b01      	ldr	r3, [sp, #4]
1a00131c:	b91b      	cbnz	r3, 1a001326 <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a00131e:	f001 fb19 	bl	1a002954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a001322:	2000      	movs	r0, #0
1a001324:	e04d      	b.n	1a0013c2 <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
1a001326:	b91f      	cbnz	r7, 1a001330 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001328:	a802      	add	r0, sp, #8
1a00132a:	f000 fe87 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00132e:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001330:	f001 fb10 	bl	1a002954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001334:	f000 fc5a 	bl	1a001bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001338:	f001 faea 	bl	1a002910 <vPortEnterCritical>
1a00133c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001340:	b25b      	sxtb	r3, r3
1a001342:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001346:	d102      	bne.n	1a00134e <xQueueReceive+0xda>
1a001348:	2300      	movs	r3, #0
1a00134a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00134e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001352:	b25b      	sxtb	r3, r3
1a001354:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001358:	d102      	bne.n	1a001360 <xQueueReceive+0xec>
1a00135a:	2300      	movs	r3, #0
1a00135c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001360:	f001 faf8 	bl	1a002954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001364:	a802      	add	r0, sp, #8
1a001366:	a901      	add	r1, sp, #4
1a001368:	f000 fe74 	bl	1a002054 <xTaskCheckForTimeOut>
1a00136c:	b9f0      	cbnz	r0, 1a0013ac <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00136e:	4620      	mov	r0, r4
1a001370:	f7ff fc86 	bl	1a000c80 <prvIsQueueEmpty>
1a001374:	b1a0      	cbz	r0, 1a0013a0 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001376:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00137a:	9901      	ldr	r1, [sp, #4]
1a00137c:	f000 fde4 	bl	1a001f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001380:	4620      	mov	r0, r4
1a001382:	f7ff fcd9 	bl	1a000d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001386:	f000 fcd9 	bl	1a001d3c <xTaskResumeAll>
1a00138a:	2800      	cmp	r0, #0
1a00138c:	d1a8      	bne.n	1a0012e0 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
1a00138e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001392:	4b0d      	ldr	r3, [pc, #52]	; (1a0013c8 <xQueueReceive+0x154>)
1a001394:	601a      	str	r2, [r3, #0]
1a001396:	f3bf 8f4f 	dsb	sy
1a00139a:	f3bf 8f6f 	isb	sy
1a00139e:	e79f      	b.n	1a0012e0 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a0013a0:	4620      	mov	r0, r4
1a0013a2:	f7ff fcc9 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0013a6:	f000 fcc9 	bl	1a001d3c <xTaskResumeAll>
1a0013aa:	e799      	b.n	1a0012e0 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a0013ac:	4620      	mov	r0, r4
1a0013ae:	f7ff fcc3 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0013b2:	f000 fcc3 	bl	1a001d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013b6:	4620      	mov	r0, r4
1a0013b8:	f7ff fc62 	bl	1a000c80 <prvIsQueueEmpty>
1a0013bc:	2800      	cmp	r0, #0
1a0013be:	d08f      	beq.n	1a0012e0 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a0013c0:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a0013c2:	b005      	add	sp, #20
1a0013c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0013c6:	bf00      	nop
1a0013c8:	e000ed04 	.word	0xe000ed04

1a0013cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
1a0013cc:	b570      	push	{r4, r5, r6, lr}
1a0013ce:	b084      	sub	sp, #16
1a0013d0:	9101      	str	r1, [sp, #4]
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0013d2:	b940      	cbnz	r0, 1a0013e6 <xQueueSemaphoreTake+0x1a>
1a0013d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013d8:	f383 8811 	msr	BASEPRI, r3
1a0013dc:	f3bf 8f6f 	isb	sy
1a0013e0:	f3bf 8f4f 	dsb	sy
1a0013e4:	e7fe      	b.n	1a0013e4 <xQueueSemaphoreTake+0x18>
1a0013e6:	4604      	mov	r4, r0

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a0013e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0013ea:	b143      	cbz	r3, 1a0013fe <xQueueSemaphoreTake+0x32>
1a0013ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013f0:	f383 8811 	msr	BASEPRI, r3
1a0013f4:	f3bf 8f6f 	isb	sy
1a0013f8:	f3bf 8f4f 	dsb	sy
1a0013fc:	e7fe      	b.n	1a0013fc <xQueueSemaphoreTake+0x30>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0013fe:	f000 fe6f 	bl	1a0020e0 <xTaskGetSchedulerState>
1a001402:	b918      	cbnz	r0, 1a00140c <xQueueSemaphoreTake+0x40>
1a001404:	9b01      	ldr	r3, [sp, #4]
1a001406:	b91b      	cbnz	r3, 1a001410 <xQueueSemaphoreTake+0x44>
1a001408:	2301      	movs	r3, #1
1a00140a:	e002      	b.n	1a001412 <xQueueSemaphoreTake+0x46>
1a00140c:	2301      	movs	r3, #1
1a00140e:	e000      	b.n	1a001412 <xQueueSemaphoreTake+0x46>
1a001410:	2300      	movs	r3, #0
1a001412:	b943      	cbnz	r3, 1a001426 <xQueueSemaphoreTake+0x5a>
1a001414:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001418:	f383 8811 	msr	BASEPRI, r3
1a00141c:	f3bf 8f6f 	isb	sy
1a001420:	f3bf 8f4f 	dsb	sy
1a001424:	e7fe      	b.n	1a001424 <xQueueSemaphoreTake+0x58>
1a001426:	2500      	movs	r5, #0
1a001428:	462e      	mov	r6, r5
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a00142a:	f001 fa71 	bl	1a002910 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a00142e:	6ba3      	ldr	r3, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001430:	b1cb      	cbz	r3, 1a001466 <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001432:	3b01      	subs	r3, #1
1a001434:	63a3      	str	r3, [r4, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001436:	6823      	ldr	r3, [r4, #0]
1a001438:	b913      	cbnz	r3, 1a001440 <xQueueSemaphoreTake+0x74>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00143a:	f000 ff83 	bl	1a002344 <pvTaskIncrementMutexHeldCount>
1a00143e:	6060      	str	r0, [r4, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001440:	6923      	ldr	r3, [r4, #16]
1a001442:	b163      	cbz	r3, 1a00145e <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001444:	f104 0010 	add.w	r0, r4, #16
1a001448:	f000 fdb2 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a00144c:	b138      	cbz	r0, 1a00145e <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a00144e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001452:	4b41      	ldr	r3, [pc, #260]	; (1a001558 <xQueueSemaphoreTake+0x18c>)
1a001454:	601a      	str	r2, [r3, #0]
1a001456:	f3bf 8f4f 	dsb	sy
1a00145a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a00145e:	f001 fa79 	bl	1a002954 <vPortExitCritical>
				return pdPASS;
1a001462:	2001      	movs	r0, #1
1a001464:	e076      	b.n	1a001554 <xQueueSemaphoreTake+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a001466:	9b01      	ldr	r3, [sp, #4]
1a001468:	b96b      	cbnz	r3, 1a001486 <xQueueSemaphoreTake+0xba>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
1a00146a:	b145      	cbz	r5, 1a00147e <xQueueSemaphoreTake+0xb2>
1a00146c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001470:	f383 8811 	msr	BASEPRI, r3
1a001474:	f3bf 8f6f 	isb	sy
1a001478:	f3bf 8f4f 	dsb	sy
1a00147c:	e7fe      	b.n	1a00147c <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
1a00147e:	f001 fa69 	bl	1a002954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a001482:	2000      	movs	r0, #0
1a001484:	e066      	b.n	1a001554 <xQueueSemaphoreTake+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
1a001486:	b91e      	cbnz	r6, 1a001490 <xQueueSemaphoreTake+0xc4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001488:	a802      	add	r0, sp, #8
1a00148a:	f000 fdd7 	bl	1a00203c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00148e:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001490:	f001 fa60 	bl	1a002954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001494:	f000 fbaa 	bl	1a001bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001498:	f001 fa3a 	bl	1a002910 <vPortEnterCritical>
1a00149c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0014a0:	b25b      	sxtb	r3, r3
1a0014a2:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0014a6:	d102      	bne.n	1a0014ae <xQueueSemaphoreTake+0xe2>
1a0014a8:	2300      	movs	r3, #0
1a0014aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0014ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0014b2:	b25b      	sxtb	r3, r3
1a0014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0014b8:	d102      	bne.n	1a0014c0 <xQueueSemaphoreTake+0xf4>
1a0014ba:	2300      	movs	r3, #0
1a0014bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0014c0:	f001 fa48 	bl	1a002954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0014c4:	a802      	add	r0, sp, #8
1a0014c6:	a901      	add	r1, sp, #4
1a0014c8:	f000 fdc4 	bl	1a002054 <xTaskCheckForTimeOut>
1a0014cc:	bb40      	cbnz	r0, 1a001520 <xQueueSemaphoreTake+0x154>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0014ce:	4620      	mov	r0, r4
1a0014d0:	f7ff fbd6 	bl	1a000c80 <prvIsQueueEmpty>
1a0014d4:	b1f0      	cbz	r0, 1a001514 <xQueueSemaphoreTake+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0014d6:	6823      	ldr	r3, [r4, #0]
1a0014d8:	b93b      	cbnz	r3, 1a0014ea <xQueueSemaphoreTake+0x11e>
					{
						taskENTER_CRITICAL();
1a0014da:	f001 fa19 	bl	1a002910 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a0014de:	6860      	ldr	r0, [r4, #4]
1a0014e0:	f000 fe0e 	bl	1a002100 <xTaskPriorityInherit>
1a0014e4:	4605      	mov	r5, r0
						}
						taskEXIT_CRITICAL();
1a0014e6:	f001 fa35 	bl	1a002954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0014ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0014ee:	9901      	ldr	r1, [sp, #4]
1a0014f0:	f000 fd2a 	bl	1a001f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0014f4:	4620      	mov	r0, r4
1a0014f6:	f7ff fc1f 	bl	1a000d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0014fa:	f000 fc1f 	bl	1a001d3c <xTaskResumeAll>
1a0014fe:	2800      	cmp	r0, #0
1a001500:	d193      	bne.n	1a00142a <xQueueSemaphoreTake+0x5e>
				{
					portYIELD_WITHIN_API();
1a001502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001506:	4b14      	ldr	r3, [pc, #80]	; (1a001558 <xQueueSemaphoreTake+0x18c>)
1a001508:	601a      	str	r2, [r3, #0]
1a00150a:	f3bf 8f4f 	dsb	sy
1a00150e:	f3bf 8f6f 	isb	sy
1a001512:	e78a      	b.n	1a00142a <xQueueSemaphoreTake+0x5e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
1a001514:	4620      	mov	r0, r4
1a001516:	f7ff fc0f 	bl	1a000d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00151a:	f000 fc0f 	bl	1a001d3c <xTaskResumeAll>
1a00151e:	e784      	b.n	1a00142a <xQueueSemaphoreTake+0x5e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
1a001520:	4620      	mov	r0, r4
1a001522:	f7ff fc09 	bl	1a000d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001526:	f000 fc09 	bl	1a001d3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00152a:	4620      	mov	r0, r4
1a00152c:	f7ff fba8 	bl	1a000c80 <prvIsQueueEmpty>
1a001530:	2800      	cmp	r0, #0
1a001532:	f43f af7a 	beq.w	1a00142a <xQueueSemaphoreTake+0x5e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
1a001536:	b165      	cbz	r5, 1a001552 <xQueueSemaphoreTake+0x186>
					{
						taskENTER_CRITICAL();
1a001538:	f001 f9ea 	bl	1a002910 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a00153c:	4620      	mov	r0, r4
1a00153e:	f7ff fb85 	bl	1a000c4c <prvGetDisinheritPriorityAfterTimeout>
1a001542:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001544:	6860      	ldr	r0, [r4, #4]
1a001546:	f000 fe97 	bl	1a002278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
1a00154a:	f001 fa03 	bl	1a002954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a00154e:	2000      	movs	r0, #0
1a001550:	e000      	b.n	1a001554 <xQueueSemaphoreTake+0x188>
1a001552:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a001554:	b004      	add	sp, #16
1a001556:	bd70      	pop	{r4, r5, r6, pc}
1a001558:	e000ed04 	.word	0xe000ed04

1a00155c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
1a00155c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a001560:	b940      	cbnz	r0, 1a001574 <xQueueReceiveFromISR+0x18>
1a001562:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001566:	f383 8811 	msr	BASEPRI, r3
1a00156a:	f3bf 8f6f 	isb	sy
1a00156e:	f3bf 8f4f 	dsb	sy
1a001572:	e7fe      	b.n	1a001572 <xQueueReceiveFromISR+0x16>
1a001574:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001576:	b919      	cbnz	r1, 1a001580 <xQueueReceiveFromISR+0x24>
1a001578:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00157a:	b91b      	cbnz	r3, 1a001584 <xQueueReceiveFromISR+0x28>
1a00157c:	2301      	movs	r3, #1
1a00157e:	e002      	b.n	1a001586 <xQueueReceiveFromISR+0x2a>
1a001580:	2301      	movs	r3, #1
1a001582:	e000      	b.n	1a001586 <xQueueReceiveFromISR+0x2a>
1a001584:	2300      	movs	r3, #0
1a001586:	b943      	cbnz	r3, 1a00159a <xQueueReceiveFromISR+0x3e>
1a001588:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00158c:	f383 8811 	msr	BASEPRI, r3
1a001590:	f3bf 8f6f 	isb	sy
1a001594:	f3bf 8f4f 	dsb	sy
1a001598:	e7fe      	b.n	1a001598 <xQueueReceiveFromISR+0x3c>
1a00159a:	4617      	mov	r7, r2
1a00159c:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00159e:	f001 faed 	bl	1a002b7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0015a2:	f3ef 8611 	mrs	r6, BASEPRI
1a0015a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015aa:	f383 8811 	msr	BASEPRI, r3
1a0015ae:	f3bf 8f6f 	isb	sy
1a0015b2:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0015b6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0015ba:	f1b8 0f00 	cmp.w	r8, #0
1a0015be:	d01e      	beq.n	1a0015fe <xQueueReceiveFromISR+0xa2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
1a0015c0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a0015c4:	b2ed      	uxtb	r5, r5

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0015c6:	4620      	mov	r0, r4
1a0015c8:	4649      	mov	r1, r9
1a0015ca:	f7ff fba3 	bl	1a000d14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0015ce:	f108 33ff 	add.w	r3, r8, #4294967295
1a0015d2:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
1a0015d4:	b26b      	sxtb	r3, r5
1a0015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0015da:	d10a      	bne.n	1a0015f2 <xQueueReceiveFromISR+0x96>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0015dc:	6923      	ldr	r3, [r4, #16]
1a0015de:	b183      	cbz	r3, 1a001602 <xQueueReceiveFromISR+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0015e0:	f104 0010 	add.w	r0, r4, #16
1a0015e4:	f000 fce4 	bl	1a001fb0 <xTaskRemoveFromEventList>
1a0015e8:	b168      	cbz	r0, 1a001606 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
1a0015ea:	b177      	cbz	r7, 1a00160a <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
1a0015ec:	2001      	movs	r0, #1
1a0015ee:	6038      	str	r0, [r7, #0]
1a0015f0:	e00c      	b.n	1a00160c <xQueueReceiveFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a0015f2:	1c6b      	adds	r3, r5, #1
1a0015f4:	b2db      	uxtb	r3, r3
1a0015f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
1a0015fa:	2001      	movs	r0, #1
1a0015fc:	e006      	b.n	1a00160c <xQueueReceiveFromISR+0xb0>
		}
		else
		{
			xReturn = pdFAIL;
1a0015fe:	2000      	movs	r0, #0
1a001600:	e004      	b.n	1a00160c <xQueueReceiveFromISR+0xb0>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
1a001602:	2001      	movs	r0, #1
1a001604:	e002      	b.n	1a00160c <xQueueReceiveFromISR+0xb0>
1a001606:	2001      	movs	r0, #1
1a001608:	e000      	b.n	1a00160c <xQueueReceiveFromISR+0xb0>
1a00160a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00160c:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a001610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001614 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001614:	2300      	movs	r3, #0
1a001616:	e00b      	b.n	1a001630 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001618:	4a07      	ldr	r2, [pc, #28]	; (1a001638 <vQueueAddToRegistry+0x24>)
1a00161a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00161e:	b932      	cbnz	r2, 1a00162e <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001620:	4a05      	ldr	r2, [pc, #20]	; (1a001638 <vQueueAddToRegistry+0x24>)
1a001622:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001626:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00162a:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00162c:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00162e:	3301      	adds	r3, #1
1a001630:	2b07      	cmp	r3, #7
1a001632:	d9f1      	bls.n	1a001618 <vQueueAddToRegistry+0x4>
1a001634:	4770      	bx	lr
1a001636:	bf00      	nop
1a001638:	10003358 	.word	0x10003358

1a00163c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a00163c:	b570      	push	{r4, r5, r6, lr}
1a00163e:	4604      	mov	r4, r0
1a001640:	460e      	mov	r6, r1
1a001642:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001644:	f001 f964 	bl	1a002910 <vPortEnterCritical>
1a001648:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00164c:	b25b      	sxtb	r3, r3
1a00164e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001652:	d102      	bne.n	1a00165a <vQueueWaitForMessageRestricted+0x1e>
1a001654:	2300      	movs	r3, #0
1a001656:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00165a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00165e:	b25b      	sxtb	r3, r3
1a001660:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001664:	d102      	bne.n	1a00166c <vQueueWaitForMessageRestricted+0x30>
1a001666:	2300      	movs	r3, #0
1a001668:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00166c:	f001 f972 	bl	1a002954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001672:	b92b      	cbnz	r3, 1a001680 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001674:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001678:	4631      	mov	r1, r6
1a00167a:	462a      	mov	r2, r5
1a00167c:	f000 fc7c 	bl	1a001f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001680:	4620      	mov	r0, r4
1a001682:	f7ff fb59 	bl	1a000d38 <prvUnlockQueue>
1a001686:	bd70      	pop	{r4, r5, r6, pc}

1a001688 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001688:	f100 0308 	add.w	r3, r0, #8
1a00168c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00168e:	f04f 32ff 	mov.w	r2, #4294967295
1a001692:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001694:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001696:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001698:	2300      	movs	r3, #0
1a00169a:	6003      	str	r3, [r0, #0]
1a00169c:	4770      	bx	lr
1a00169e:	bf00      	nop

1a0016a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0016a0:	2300      	movs	r3, #0
1a0016a2:	6103      	str	r3, [r0, #16]
1a0016a4:	4770      	bx	lr
1a0016a6:	bf00      	nop

1a0016a8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0016a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0016aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0016ac:	689a      	ldr	r2, [r3, #8]
1a0016ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0016b0:	689a      	ldr	r2, [r3, #8]
1a0016b2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0016b4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0016b6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0016b8:	6803      	ldr	r3, [r0, #0]
1a0016ba:	3301      	adds	r3, #1
1a0016bc:	6003      	str	r3, [r0, #0]
1a0016be:	4770      	bx	lr

1a0016c0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0016c0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0016c2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0016c4:	f1b5 3fff 	cmp.w	r5, #4294967295
1a0016c8:	d101      	bne.n	1a0016ce <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a0016ca:	6902      	ldr	r2, [r0, #16]
1a0016cc:	e007      	b.n	1a0016de <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016ce:	f100 0208 	add.w	r2, r0, #8
1a0016d2:	e000      	b.n	1a0016d6 <vListInsert+0x16>
1a0016d4:	461a      	mov	r2, r3
1a0016d6:	6853      	ldr	r3, [r2, #4]
1a0016d8:	681c      	ldr	r4, [r3, #0]
1a0016da:	42ac      	cmp	r4, r5
1a0016dc:	d9fa      	bls.n	1a0016d4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0016de:	6853      	ldr	r3, [r2, #4]
1a0016e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0016e2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0016e4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0016e6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0016e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0016ea:	6803      	ldr	r3, [r0, #0]
1a0016ec:	3301      	adds	r3, #1
1a0016ee:	6003      	str	r3, [r0, #0]
}
1a0016f0:	bc30      	pop	{r4, r5}
1a0016f2:	4770      	bx	lr

1a0016f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0016f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0016f6:	6842      	ldr	r2, [r0, #4]
1a0016f8:	6881      	ldr	r1, [r0, #8]
1a0016fa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0016fc:	6882      	ldr	r2, [r0, #8]
1a0016fe:	6841      	ldr	r1, [r0, #4]
1a001700:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001702:	685a      	ldr	r2, [r3, #4]
1a001704:	4282      	cmp	r2, r0
1a001706:	d101      	bne.n	1a00170c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001708:	6882      	ldr	r2, [r0, #8]
1a00170a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00170c:	2200      	movs	r2, #0
1a00170e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001710:	681a      	ldr	r2, [r3, #0]
1a001712:	3a01      	subs	r2, #1
1a001714:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001716:	6818      	ldr	r0, [r3, #0]
}
1a001718:	4770      	bx	lr
1a00171a:	bf00      	nop

1a00171c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00171c:	4b03      	ldr	r3, [pc, #12]	; (1a00172c <vApplicationGetIdleTaskMemory+0x10>)
1a00171e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001720:	4b03      	ldr	r3, [pc, #12]	; (1a001730 <vApplicationGetIdleTaskMemory+0x14>)
1a001722:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001724:	235a      	movs	r3, #90	; 0x5a
1a001726:	6013      	str	r3, [r2, #0]
1a001728:	4770      	bx	lr
1a00172a:	bf00      	nop
1a00172c:	10002a0c 	.word	0x10002a0c
1a001730:	100028a4 	.word	0x100028a4

1a001734 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001734:	4b03      	ldr	r3, [pc, #12]	; (1a001744 <vApplicationGetTimerTaskMemory+0x10>)
1a001736:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001738:	4b03      	ldr	r3, [pc, #12]	; (1a001748 <vApplicationGetTimerTaskMemory+0x14>)
1a00173a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00173c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001740:	6013      	str	r3, [r2, #0]
1a001742:	4770      	bx	lr
1a001744:	10002a6c 	.word	0x10002a6c
1a001748:	10002acc 	.word	0x10002acc

1a00174c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
    while(1)
        ;
1a00174c:	e7fe      	b.n	1a00174c <vApplicationStackOverflowHook>
1a00174e:	bf00      	nop

1a001750 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
    while(1)
        ;
1a001750:	e7fe      	b.n	1a001750 <vApplicationMallocFailedHook>
1a001752:	bf00      	nop

1a001754 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001754:	4b0a      	ldr	r3, [pc, #40]	; (1a001780 <prvResetNextTaskUnblockTime+0x2c>)
1a001756:	681b      	ldr	r3, [r3, #0]
1a001758:	681b      	ldr	r3, [r3, #0]
1a00175a:	b90b      	cbnz	r3, 1a001760 <prvResetNextTaskUnblockTime+0xc>
1a00175c:	2301      	movs	r3, #1
1a00175e:	e000      	b.n	1a001762 <prvResetNextTaskUnblockTime+0xe>
1a001760:	2300      	movs	r3, #0
1a001762:	b123      	cbz	r3, 1a00176e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001764:	f04f 32ff 	mov.w	r2, #4294967295
1a001768:	4b06      	ldr	r3, [pc, #24]	; (1a001784 <prvResetNextTaskUnblockTime+0x30>)
1a00176a:	601a      	str	r2, [r3, #0]
1a00176c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00176e:	4b04      	ldr	r3, [pc, #16]	; (1a001780 <prvResetNextTaskUnblockTime+0x2c>)
1a001770:	681b      	ldr	r3, [r3, #0]
1a001772:	68db      	ldr	r3, [r3, #12]
1a001774:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001776:	685a      	ldr	r2, [r3, #4]
1a001778:	4b02      	ldr	r3, [pc, #8]	; (1a001784 <prvResetNextTaskUnblockTime+0x30>)
1a00177a:	601a      	str	r2, [r3, #0]
1a00177c:	4770      	bx	lr
1a00177e:	bf00      	nop
1a001780:	10003070 	.word	0x10003070
1a001784:	1000314c 	.word	0x1000314c

1a001788 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a001788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00178c:	4682      	mov	sl, r0
1a00178e:	460d      	mov	r5, r1
1a001790:	4617      	mov	r7, r2
1a001792:	4699      	mov	r9, r3
1a001794:	9e08      	ldr	r6, [sp, #32]
1a001796:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00179a:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00179c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00179e:	21a5      	movs	r1, #165	; 0xa5
1a0017a0:	0092      	lsls	r2, r2, #2
1a0017a2:	f003 f818 	bl	1a0047d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0017a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0017a8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0017ac:	3a01      	subs	r2, #1
1a0017ae:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0017b2:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0017b6:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017b8:	2300      	movs	r3, #0
1a0017ba:	e006      	b.n	1a0017ca <prvInitialiseNewTask+0x42>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0017bc:	5ce9      	ldrb	r1, [r5, r3]
1a0017be:	18e2      	adds	r2, r4, r3
1a0017c0:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a0017c4:	5cea      	ldrb	r2, [r5, r3]
1a0017c6:	b112      	cbz	r2, 1a0017ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017c8:	3301      	adds	r3, #1
1a0017ca:	2b0f      	cmp	r3, #15
1a0017cc:	d9f6      	bls.n	1a0017bc <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0017ce:	2300      	movs	r3, #0
1a0017d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0017d4:	2e06      	cmp	r6, #6
1a0017d6:	d900      	bls.n	1a0017da <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0017d8:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a0017da:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a0017dc:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0017de:	2500      	movs	r5, #0
1a0017e0:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0017e2:	1d20      	adds	r0, r4, #4
1a0017e4:	f7ff ff5c 	bl	1a0016a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0017e8:	f104 0018 	add.w	r0, r4, #24
1a0017ec:	f7ff ff58 	bl	1a0016a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0017f0:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017f2:	f1c6 0607 	rsb	r6, r6, #7
1a0017f6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0017f8:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a0017fa:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0017fc:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001800:	4638      	mov	r0, r7
1a001802:	4651      	mov	r1, sl
1a001804:	464a      	mov	r2, r9
1a001806:	f001 f855 	bl	1a0028b4 <pxPortInitialiseStack>
1a00180a:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a00180c:	f1b8 0f00 	cmp.w	r8, #0
1a001810:	d001      	beq.n	1a001816 <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001812:	f8c8 4000 	str.w	r4, [r8]
1a001816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00181a:	bf00      	nop

1a00181c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a00181c:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00181e:	2400      	movs	r4, #0
1a001820:	e007      	b.n	1a001832 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001822:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001826:	009b      	lsls	r3, r3, #2
1a001828:	480e      	ldr	r0, [pc, #56]	; (1a001864 <prvInitialiseTaskLists+0x48>)
1a00182a:	4418      	add	r0, r3
1a00182c:	f7ff ff2c 	bl	1a001688 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001830:	3401      	adds	r4, #1
1a001832:	2c06      	cmp	r4, #6
1a001834:	d9f5      	bls.n	1a001822 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a001836:	4d0c      	ldr	r5, [pc, #48]	; (1a001868 <prvInitialiseTaskLists+0x4c>)
1a001838:	4628      	mov	r0, r5
1a00183a:	f7ff ff25 	bl	1a001688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00183e:	4c0b      	ldr	r4, [pc, #44]	; (1a00186c <prvInitialiseTaskLists+0x50>)
1a001840:	4620      	mov	r0, r4
1a001842:	f7ff ff21 	bl	1a001688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001846:	480a      	ldr	r0, [pc, #40]	; (1a001870 <prvInitialiseTaskLists+0x54>)
1a001848:	f7ff ff1e 	bl	1a001688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a00184c:	4809      	ldr	r0, [pc, #36]	; (1a001874 <prvInitialiseTaskLists+0x58>)
1a00184e:	f7ff ff1b 	bl	1a001688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a001852:	4809      	ldr	r0, [pc, #36]	; (1a001878 <prvInitialiseTaskLists+0x5c>)
1a001854:	f7ff ff18 	bl	1a001688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a001858:	4b08      	ldr	r3, [pc, #32]	; (1a00187c <prvInitialiseTaskLists+0x60>)
1a00185a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a00185c:	4b08      	ldr	r3, [pc, #32]	; (1a001880 <prvInitialiseTaskLists+0x64>)
1a00185e:	601c      	str	r4, [r3, #0]
1a001860:	bd38      	pop	{r3, r4, r5, pc}
1a001862:	bf00      	nop
1a001864:	10003094 	.word	0x10003094
1a001868:	10003154 	.word	0x10003154
1a00186c:	10003168 	.word	0x10003168
1a001870:	10003130 	.word	0x10003130
1a001874:	10003078 	.word	0x10003078
1a001878:	1000317c 	.word	0x1000317c
1a00187c:	10003070 	.word	0x10003070
1a001880:	1000308c 	.word	0x1000308c

1a001884 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a001884:	b510      	push	{r4, lr}
1a001886:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a001888:	f001 f842 	bl	1a002910 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a00188c:	4a20      	ldr	r2, [pc, #128]	; (1a001910 <prvAddNewTaskToReadyList+0x8c>)
1a00188e:	6813      	ldr	r3, [r2, #0]
1a001890:	3301      	adds	r3, #1
1a001892:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001894:	4b1f      	ldr	r3, [pc, #124]	; (1a001914 <prvAddNewTaskToReadyList+0x90>)
1a001896:	681b      	ldr	r3, [r3, #0]
1a001898:	b93b      	cbnz	r3, 1a0018aa <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a00189a:	4b1e      	ldr	r3, [pc, #120]	; (1a001914 <prvAddNewTaskToReadyList+0x90>)
1a00189c:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00189e:	6813      	ldr	r3, [r2, #0]
1a0018a0:	2b01      	cmp	r3, #1
1a0018a2:	d10d      	bne.n	1a0018c0 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a0018a4:	f7ff ffba 	bl	1a00181c <prvInitialiseTaskLists>
1a0018a8:	e00a      	b.n	1a0018c0 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a0018aa:	4b1b      	ldr	r3, [pc, #108]	; (1a001918 <prvAddNewTaskToReadyList+0x94>)
1a0018ac:	681b      	ldr	r3, [r3, #0]
1a0018ae:	b93b      	cbnz	r3, 1a0018c0 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0018b0:	4b18      	ldr	r3, [pc, #96]	; (1a001914 <prvAddNewTaskToReadyList+0x90>)
1a0018b2:	681b      	ldr	r3, [r3, #0]
1a0018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018b8:	429a      	cmp	r2, r3
1a0018ba:	d801      	bhi.n	1a0018c0 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
1a0018bc:	4b15      	ldr	r3, [pc, #84]	; (1a001914 <prvAddNewTaskToReadyList+0x90>)
1a0018be:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a0018c0:	4a16      	ldr	r2, [pc, #88]	; (1a00191c <prvAddNewTaskToReadyList+0x98>)
1a0018c2:	6813      	ldr	r3, [r2, #0]
1a0018c4:	3301      	adds	r3, #1
1a0018c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0018c8:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a0018ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a0018cc:	2301      	movs	r3, #1
1a0018ce:	4083      	lsls	r3, r0
1a0018d0:	4913      	ldr	r1, [pc, #76]	; (1a001920 <prvAddNewTaskToReadyList+0x9c>)
1a0018d2:	680a      	ldr	r2, [r1, #0]
1a0018d4:	4313      	orrs	r3, r2
1a0018d6:	600b      	str	r3, [r1, #0]
1a0018d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0018dc:	0080      	lsls	r0, r0, #2
1a0018de:	4b11      	ldr	r3, [pc, #68]	; (1a001924 <prvAddNewTaskToReadyList+0xa0>)
1a0018e0:	4418      	add	r0, r3
1a0018e2:	1d21      	adds	r1, r4, #4
1a0018e4:	f7ff fee0 	bl	1a0016a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a0018e8:	f001 f834 	bl	1a002954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a0018ec:	4b0a      	ldr	r3, [pc, #40]	; (1a001918 <prvAddNewTaskToReadyList+0x94>)
1a0018ee:	681b      	ldr	r3, [r3, #0]
1a0018f0:	b16b      	cbz	r3, 1a00190e <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0018f2:	4b08      	ldr	r3, [pc, #32]	; (1a001914 <prvAddNewTaskToReadyList+0x90>)
1a0018f4:	681b      	ldr	r3, [r3, #0]
1a0018f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018fa:	429a      	cmp	r2, r3
1a0018fc:	d207      	bcs.n	1a00190e <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a0018fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001902:	4b09      	ldr	r3, [pc, #36]	; (1a001928 <prvAddNewTaskToReadyList+0xa4>)
1a001904:	601a      	str	r2, [r3, #0]
1a001906:	f3bf 8f4f 	dsb	sy
1a00190a:	f3bf 8f6f 	isb	sy
1a00190e:	bd10      	pop	{r4, pc}
1a001910:	10003128 	.word	0x10003128
1a001914:	1000312c 	.word	0x1000312c
1a001918:	10003074 	.word	0x10003074
1a00191c:	10003150 	.word	0x10003150
1a001920:	10003190 	.word	0x10003190
1a001924:	10003094 	.word	0x10003094
1a001928:	e000ed04 	.word	0xe000ed04

1a00192c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a00192c:	b510      	push	{r4, lr}
1a00192e:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001930:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001934:	b933      	cbnz	r3, 1a001944 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a001936:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001938:	f7ff f97c 	bl	1a000c34 <vPortFree>
				vPortFree( pxTCB );
1a00193c:	4620      	mov	r0, r4
1a00193e:	f7ff f979 	bl	1a000c34 <vPortFree>
1a001942:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001944:	2b01      	cmp	r3, #1
1a001946:	d102      	bne.n	1a00194e <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a001948:	f7ff f974 	bl	1a000c34 <vPortFree>
1a00194c:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a00194e:	2b02      	cmp	r3, #2
1a001950:	d008      	beq.n	1a001964 <prvDeleteTCB+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001952:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001956:	f383 8811 	msr	BASEPRI, r3
1a00195a:	f3bf 8f6f 	isb	sy
1a00195e:	f3bf 8f4f 	dsb	sy
1a001962:	e7fe      	b.n	1a001962 <prvDeleteTCB+0x36>
1a001964:	bd10      	pop	{r4, pc}
1a001966:	bf00      	nop

1a001968 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a001968:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00196a:	e014      	b.n	1a001996 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
1a00196c:	f000 ffd0 	bl	1a002910 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001970:	4b0b      	ldr	r3, [pc, #44]	; (1a0019a0 <prvCheckTasksWaitingTermination+0x38>)
1a001972:	68db      	ldr	r3, [r3, #12]
1a001974:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001976:	1d20      	adds	r0, r4, #4
1a001978:	f7ff febc 	bl	1a0016f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a00197c:	4a09      	ldr	r2, [pc, #36]	; (1a0019a4 <prvCheckTasksWaitingTermination+0x3c>)
1a00197e:	6813      	ldr	r3, [r2, #0]
1a001980:	3b01      	subs	r3, #1
1a001982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001984:	4a08      	ldr	r2, [pc, #32]	; (1a0019a8 <prvCheckTasksWaitingTermination+0x40>)
1a001986:	6813      	ldr	r3, [r2, #0]
1a001988:	3b01      	subs	r3, #1
1a00198a:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a00198c:	f000 ffe2 	bl	1a002954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a001990:	4620      	mov	r0, r4
1a001992:	f7ff ffcb 	bl	1a00192c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001996:	4b04      	ldr	r3, [pc, #16]	; (1a0019a8 <prvCheckTasksWaitingTermination+0x40>)
1a001998:	681b      	ldr	r3, [r3, #0]
1a00199a:	2b00      	cmp	r3, #0
1a00199c:	d1e6      	bne.n	1a00196c <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a00199e:	bd10      	pop	{r4, pc}
1a0019a0:	10003078 	.word	0x10003078
1a0019a4:	10003128 	.word	0x10003128
1a0019a8:	10003124 	.word	0x10003124

1a0019ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a0019ac:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a0019ae:	f7ff ffdb 	bl	1a001968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0019b2:	4b06      	ldr	r3, [pc, #24]	; (1a0019cc <prvIdleTask+0x20>)
1a0019b4:	681b      	ldr	r3, [r3, #0]
1a0019b6:	2b01      	cmp	r3, #1
1a0019b8:	d9f9      	bls.n	1a0019ae <prvIdleTask+0x2>
			{
				taskYIELD();
1a0019ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019be:	4b04      	ldr	r3, [pc, #16]	; (1a0019d0 <prvIdleTask+0x24>)
1a0019c0:	601a      	str	r2, [r3, #0]
1a0019c2:	f3bf 8f4f 	dsb	sy
1a0019c6:	f3bf 8f6f 	isb	sy
1a0019ca:	e7f0      	b.n	1a0019ae <prvIdleTask+0x2>
1a0019cc:	10003094 	.word	0x10003094
1a0019d0:	e000ed04 	.word	0xe000ed04

1a0019d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0019d4:	b570      	push	{r4, r5, r6, lr}
1a0019d6:	4604      	mov	r4, r0
1a0019d8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0019da:	4b1c      	ldr	r3, [pc, #112]	; (1a001a4c <prvAddCurrentTaskToDelayedList+0x78>)
1a0019dc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019de:	4b1c      	ldr	r3, [pc, #112]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0019e0:	6818      	ldr	r0, [r3, #0]
1a0019e2:	3004      	adds	r0, #4
1a0019e4:	f7ff fe86 	bl	1a0016f4 <uxListRemove>
1a0019e8:	b948      	cbnz	r0, 1a0019fe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0019ea:	4b19      	ldr	r3, [pc, #100]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0019ec:	681b      	ldr	r3, [r3, #0]
1a0019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0019f0:	2301      	movs	r3, #1
1a0019f2:	4093      	lsls	r3, r2
1a0019f4:	4917      	ldr	r1, [pc, #92]	; (1a001a54 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019f6:	680a      	ldr	r2, [r1, #0]
1a0019f8:	ea22 0303 	bic.w	r3, r2, r3
1a0019fc:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0019fe:	f1b4 3fff 	cmp.w	r4, #4294967295
1a001a02:	d107      	bne.n	1a001a14 <prvAddCurrentTaskToDelayedList+0x40>
1a001a04:	b136      	cbz	r6, 1a001a14 <prvAddCurrentTaskToDelayedList+0x40>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a06:	4b12      	ldr	r3, [pc, #72]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a08:	6819      	ldr	r1, [r3, #0]
1a001a0a:	4813      	ldr	r0, [pc, #76]	; (1a001a58 <prvAddCurrentTaskToDelayedList+0x84>)
1a001a0c:	3104      	adds	r1, #4
1a001a0e:	f7ff fe4b 	bl	1a0016a8 <vListInsertEnd>
1a001a12:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001a14:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001a16:	4b0e      	ldr	r3, [pc, #56]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a18:	681b      	ldr	r3, [r3, #0]
1a001a1a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001a1c:	42ac      	cmp	r4, r5
1a001a1e:	d207      	bcs.n	1a001a30 <prvAddCurrentTaskToDelayedList+0x5c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a20:	4b0e      	ldr	r3, [pc, #56]	; (1a001a5c <prvAddCurrentTaskToDelayedList+0x88>)
1a001a22:	6818      	ldr	r0, [r3, #0]
1a001a24:	4b0a      	ldr	r3, [pc, #40]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a26:	6819      	ldr	r1, [r3, #0]
1a001a28:	3104      	adds	r1, #4
1a001a2a:	f7ff fe49 	bl	1a0016c0 <vListInsert>
1a001a2e:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a30:	4b0b      	ldr	r3, [pc, #44]	; (1a001a60 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a32:	6818      	ldr	r0, [r3, #0]
1a001a34:	4b06      	ldr	r3, [pc, #24]	; (1a001a50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a36:	6819      	ldr	r1, [r3, #0]
1a001a38:	3104      	adds	r1, #4
1a001a3a:	f7ff fe41 	bl	1a0016c0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001a3e:	4b09      	ldr	r3, [pc, #36]	; (1a001a64 <prvAddCurrentTaskToDelayedList+0x90>)
1a001a40:	681b      	ldr	r3, [r3, #0]
1a001a42:	429c      	cmp	r4, r3
1a001a44:	d201      	bcs.n	1a001a4a <prvAddCurrentTaskToDelayedList+0x76>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001a46:	4b07      	ldr	r3, [pc, #28]	; (1a001a64 <prvAddCurrentTaskToDelayedList+0x90>)
1a001a48:	601c      	str	r4, [r3, #0]
1a001a4a:	bd70      	pop	{r4, r5, r6, pc}
1a001a4c:	10003148 	.word	0x10003148
1a001a50:	1000312c 	.word	0x1000312c
1a001a54:	10003190 	.word	0x10003190
1a001a58:	1000317c 	.word	0x1000317c
1a001a5c:	1000308c 	.word	0x1000308c
1a001a60:	10003070 	.word	0x10003070
1a001a64:	1000314c 	.word	0x1000314c

1a001a68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a001a68:	b570      	push	{r4, r5, r6, lr}
1a001a6a:	b086      	sub	sp, #24
1a001a6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001a6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a001a70:	b945      	cbnz	r5, 1a001a84 <xTaskCreateStatic+0x1c>
1a001a72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a76:	f383 8811 	msr	BASEPRI, r3
1a001a7a:	f3bf 8f6f 	isb	sy
1a001a7e:	f3bf 8f4f 	dsb	sy
1a001a82:	e7fe      	b.n	1a001a82 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001a84:	b944      	cbnz	r4, 1a001a98 <xTaskCreateStatic+0x30>
1a001a86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a8a:	f383 8811 	msr	BASEPRI, r3
1a001a8e:	f3bf 8f6f 	isb	sy
1a001a92:	f3bf 8f4f 	dsb	sy
1a001a96:	e7fe      	b.n	1a001a96 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a001a98:	2660      	movs	r6, #96	; 0x60
1a001a9a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001a9c:	9e04      	ldr	r6, [sp, #16]
1a001a9e:	2e60      	cmp	r6, #96	; 0x60
1a001aa0:	d008      	beq.n	1a001ab4 <xTaskCreateStatic+0x4c>
1a001aa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa6:	f383 8811 	msr	BASEPRI, r3
1a001aaa:	f3bf 8f6f 	isb	sy
1a001aae:	f3bf 8f4f 	dsb	sy
1a001ab2:	e7fe      	b.n	1a001ab2 <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1a001ab4:	b18c      	cbz	r4, 1a001ada <xTaskCreateStatic+0x72>
1a001ab6:	b185      	cbz	r5, 1a001ada <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001ab8:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001aba:	2502      	movs	r5, #2
1a001abc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001ac0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001ac2:	9500      	str	r5, [sp, #0]
1a001ac4:	ad05      	add	r5, sp, #20
1a001ac6:	9501      	str	r5, [sp, #4]
1a001ac8:	9402      	str	r4, [sp, #8]
1a001aca:	2500      	movs	r5, #0
1a001acc:	9503      	str	r5, [sp, #12]
1a001ace:	f7ff fe5b 	bl	1a001788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001ad2:	4620      	mov	r0, r4
1a001ad4:	f7ff fed6 	bl	1a001884 <prvAddNewTaskToReadyList>
1a001ad8:	e001      	b.n	1a001ade <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
1a001ada:	2300      	movs	r3, #0
1a001adc:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
1a001ade:	9805      	ldr	r0, [sp, #20]
1a001ae0:	b006      	add	sp, #24
1a001ae2:	bd70      	pop	{r4, r5, r6, pc}

1a001ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a001ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001ae8:	b085      	sub	sp, #20
1a001aea:	4680      	mov	r8, r0
1a001aec:	460f      	mov	r7, r1
1a001aee:	4615      	mov	r5, r2
1a001af0:	461e      	mov	r6, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001af2:	0090      	lsls	r0, r2, #2
1a001af4:	f7ff f86c 	bl	1a000bd0 <pvPortMalloc>

			if( pxStack != NULL )
1a001af8:	b160      	cbz	r0, 1a001b14 <xTaskCreate+0x30>
1a001afa:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001afc:	2060      	movs	r0, #96	; 0x60
1a001afe:	f7ff f867 	bl	1a000bd0 <pvPortMalloc>

				if( pxNewTCB != NULL )
1a001b02:	4604      	mov	r4, r0
1a001b04:	b110      	cbz	r0, 1a001b0c <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a001b06:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a001b0a:	e004      	b.n	1a001b16 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a001b0c:	4648      	mov	r0, r9
1a001b0e:	f7ff f891 	bl	1a000c34 <vPortFree>
1a001b12:	e000      	b.n	1a001b16 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a001b14:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a001b16:	b19c      	cbz	r4, 1a001b40 <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001b18:	2300      	movs	r3, #0
1a001b1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001b20:	9200      	str	r2, [sp, #0]
1a001b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001b24:	9201      	str	r2, [sp, #4]
1a001b26:	9402      	str	r4, [sp, #8]
1a001b28:	9303      	str	r3, [sp, #12]
1a001b2a:	4640      	mov	r0, r8
1a001b2c:	4639      	mov	r1, r7
1a001b2e:	462a      	mov	r2, r5
1a001b30:	4633      	mov	r3, r6
1a001b32:	f7ff fe29 	bl	1a001788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b36:	4620      	mov	r0, r4
1a001b38:	f7ff fea4 	bl	1a001884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001b3c:	2001      	movs	r0, #1
1a001b3e:	e001      	b.n	1a001b44 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001b40:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
1a001b44:	b005      	add	sp, #20
1a001b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001b4a:	bf00      	nop

1a001b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a001b4c:	b510      	push	{r4, lr}
1a001b4e:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001b50:	2400      	movs	r4, #0
1a001b52:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001b54:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001b56:	a805      	add	r0, sp, #20
1a001b58:	a906      	add	r1, sp, #24
1a001b5a:	aa07      	add	r2, sp, #28
1a001b5c:	f7ff fdde 	bl	1a00171c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001b60:	9400      	str	r4, [sp, #0]
1a001b62:	9b06      	ldr	r3, [sp, #24]
1a001b64:	9301      	str	r3, [sp, #4]
1a001b66:	9b05      	ldr	r3, [sp, #20]
1a001b68:	9302      	str	r3, [sp, #8]
1a001b6a:	481a      	ldr	r0, [pc, #104]	; (1a001bd4 <vTaskStartScheduler+0x88>)
1a001b6c:	491a      	ldr	r1, [pc, #104]	; (1a001bd8 <vTaskStartScheduler+0x8c>)
1a001b6e:	9a07      	ldr	r2, [sp, #28]
1a001b70:	4623      	mov	r3, r4
1a001b72:	f7ff ff79 	bl	1a001a68 <xTaskCreateStatic>
1a001b76:	4b19      	ldr	r3, [pc, #100]	; (1a001bdc <vTaskStartScheduler+0x90>)
1a001b78:	6018      	str	r0, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a001b7a:	b108      	cbz	r0, 1a001b80 <vTaskStartScheduler+0x34>
		{
			xReturn = pdPASS;
1a001b7c:	2001      	movs	r0, #1
1a001b7e:	e000      	b.n	1a001b82 <vTaskStartScheduler+0x36>
		}
		else
		{
			xReturn = pdFAIL;
1a001b80:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1a001b82:	2801      	cmp	r0, #1
1a001b84:	d101      	bne.n	1a001b8a <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
1a001b86:	f000 fc75 	bl	1a002474 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a001b8a:	2801      	cmp	r0, #1
1a001b8c:	d114      	bne.n	1a001bb8 <vTaskStartScheduler+0x6c>
1a001b8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b92:	f383 8811 	msr	BASEPRI, r3
1a001b96:	f3bf 8f6f 	isb	sy
1a001b9a:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a001b9e:	f04f 32ff 	mov.w	r2, #4294967295
1a001ba2:	4b0f      	ldr	r3, [pc, #60]	; (1a001be0 <vTaskStartScheduler+0x94>)
1a001ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001ba6:	2201      	movs	r2, #1
1a001ba8:	4b0e      	ldr	r3, [pc, #56]	; (1a001be4 <vTaskStartScheduler+0x98>)
1a001baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001bac:	2200      	movs	r2, #0
1a001bae:	4b0e      	ldr	r3, [pc, #56]	; (1a001be8 <vTaskStartScheduler+0x9c>)
1a001bb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a001bb2:	f000 ff4f 	bl	1a002a54 <xPortStartScheduler>
1a001bb6:	e00b      	b.n	1a001bd0 <vTaskStartScheduler+0x84>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001bbc:	d108      	bne.n	1a001bd0 <vTaskStartScheduler+0x84>
1a001bbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bc2:	f383 8811 	msr	BASEPRI, r3
1a001bc6:	f3bf 8f6f 	isb	sy
1a001bca:	f3bf 8f4f 	dsb	sy
1a001bce:	e7fe      	b.n	1a001bce <vTaskStartScheduler+0x82>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a001bd0:	b008      	add	sp, #32
1a001bd2:	bd10      	pop	{r4, pc}
1a001bd4:	1a0019ad 	.word	0x1a0019ad
1a001bd8:	1a004858 	.word	0x1a004858
1a001bdc:	10003144 	.word	0x10003144
1a001be0:	1000314c 	.word	0x1000314c
1a001be4:	10003074 	.word	0x10003074
1a001be8:	10003148 	.word	0x10003148

1a001bec <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a001bec:	4a02      	ldr	r2, [pc, #8]	; (1a001bf8 <vTaskSuspendAll+0xc>)
1a001bee:	6813      	ldr	r3, [r2, #0]
1a001bf0:	3301      	adds	r3, #1
1a001bf2:	6013      	str	r3, [r2, #0]
1a001bf4:	4770      	bx	lr
1a001bf6:	bf00      	nop
1a001bf8:	10003120 	.word	0x10003120

1a001bfc <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a001bfc:	4b01      	ldr	r3, [pc, #4]	; (1a001c04 <xTaskGetTickCount+0x8>)
1a001bfe:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a001c00:	4770      	bx	lr
1a001c02:	bf00      	nop
1a001c04:	10003148 	.word	0x10003148

1a001c08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
1a001c08:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001c0a:	f000 ffb7 	bl	1a002b7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
1a001c0e:	4b01      	ldr	r3, [pc, #4]	; (1a001c14 <xTaskGetTickCountFromISR+0xc>)
1a001c10:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a001c12:	bd08      	pop	{r3, pc}
1a001c14:	10003148 	.word	0x10003148

1a001c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c1a:	4b3d      	ldr	r3, [pc, #244]	; (1a001d10 <xTaskIncrementTick+0xf8>)
1a001c1c:	681b      	ldr	r3, [r3, #0]
1a001c1e:	2b00      	cmp	r3, #0
1a001c20:	d169      	bne.n	1a001cf6 <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001c22:	4b3c      	ldr	r3, [pc, #240]	; (1a001d14 <xTaskIncrementTick+0xfc>)
1a001c24:	681d      	ldr	r5, [r3, #0]
1a001c26:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a001c28:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001c2a:	b9c5      	cbnz	r5, 1a001c5e <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a001c2c:	4b3a      	ldr	r3, [pc, #232]	; (1a001d18 <xTaskIncrementTick+0x100>)
1a001c2e:	681b      	ldr	r3, [r3, #0]
1a001c30:	681b      	ldr	r3, [r3, #0]
1a001c32:	b143      	cbz	r3, 1a001c46 <xTaskIncrementTick+0x2e>
1a001c34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c38:	f383 8811 	msr	BASEPRI, r3
1a001c3c:	f3bf 8f6f 	isb	sy
1a001c40:	f3bf 8f4f 	dsb	sy
1a001c44:	e7fe      	b.n	1a001c44 <xTaskIncrementTick+0x2c>
1a001c46:	4a34      	ldr	r2, [pc, #208]	; (1a001d18 <xTaskIncrementTick+0x100>)
1a001c48:	6811      	ldr	r1, [r2, #0]
1a001c4a:	4b34      	ldr	r3, [pc, #208]	; (1a001d1c <xTaskIncrementTick+0x104>)
1a001c4c:	6818      	ldr	r0, [r3, #0]
1a001c4e:	6010      	str	r0, [r2, #0]
1a001c50:	6019      	str	r1, [r3, #0]
1a001c52:	4a33      	ldr	r2, [pc, #204]	; (1a001d20 <xTaskIncrementTick+0x108>)
1a001c54:	6813      	ldr	r3, [r2, #0]
1a001c56:	3301      	adds	r3, #1
1a001c58:	6013      	str	r3, [r2, #0]
1a001c5a:	f7ff fd7b 	bl	1a001754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001c5e:	4b31      	ldr	r3, [pc, #196]	; (1a001d24 <xTaskIncrementTick+0x10c>)
1a001c60:	681b      	ldr	r3, [r3, #0]
1a001c62:	429d      	cmp	r5, r3
1a001c64:	d203      	bcs.n	1a001c6e <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001c66:	2400      	movs	r4, #0
1a001c68:	e03a      	b.n	1a001ce0 <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a001c6a:	2401      	movs	r4, #1
1a001c6c:	e000      	b.n	1a001c70 <xTaskIncrementTick+0x58>
1a001c6e:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001c70:	4b29      	ldr	r3, [pc, #164]	; (1a001d18 <xTaskIncrementTick+0x100>)
1a001c72:	681b      	ldr	r3, [r3, #0]
1a001c74:	681b      	ldr	r3, [r3, #0]
1a001c76:	b90b      	cbnz	r3, 1a001c7c <xTaskIncrementTick+0x64>
1a001c78:	2301      	movs	r3, #1
1a001c7a:	e000      	b.n	1a001c7e <xTaskIncrementTick+0x66>
1a001c7c:	2300      	movs	r3, #0
1a001c7e:	b123      	cbz	r3, 1a001c8a <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c80:	f04f 32ff 	mov.w	r2, #4294967295
1a001c84:	4b27      	ldr	r3, [pc, #156]	; (1a001d24 <xTaskIncrementTick+0x10c>)
1a001c86:	601a      	str	r2, [r3, #0]
					break;
1a001c88:	e02a      	b.n	1a001ce0 <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001c8a:	4b23      	ldr	r3, [pc, #140]	; (1a001d18 <xTaskIncrementTick+0x100>)
1a001c8c:	681b      	ldr	r3, [r3, #0]
1a001c8e:	68db      	ldr	r3, [r3, #12]
1a001c90:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001c92:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a001c94:	429d      	cmp	r5, r3
1a001c96:	d202      	bcs.n	1a001c9e <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a001c98:	4a22      	ldr	r2, [pc, #136]	; (1a001d24 <xTaskIncrementTick+0x10c>)
1a001c9a:	6013      	str	r3, [r2, #0]
						break;
1a001c9c:	e020      	b.n	1a001ce0 <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c9e:	1d37      	adds	r7, r6, #4
1a001ca0:	4638      	mov	r0, r7
1a001ca2:	f7ff fd27 	bl	1a0016f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001ca6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001ca8:	b11b      	cbz	r3, 1a001cb2 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001caa:	f106 0018 	add.w	r0, r6, #24
1a001cae:	f7ff fd21 	bl	1a0016f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a001cb2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001cb4:	2201      	movs	r2, #1
1a001cb6:	fa02 f103 	lsl.w	r1, r2, r3
1a001cba:	481b      	ldr	r0, [pc, #108]	; (1a001d28 <xTaskIncrementTick+0x110>)
1a001cbc:	6802      	ldr	r2, [r0, #0]
1a001cbe:	430a      	orrs	r2, r1
1a001cc0:	6002      	str	r2, [r0, #0]
1a001cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cc6:	009b      	lsls	r3, r3, #2
1a001cc8:	4818      	ldr	r0, [pc, #96]	; (1a001d2c <xTaskIncrementTick+0x114>)
1a001cca:	4418      	add	r0, r3
1a001ccc:	4639      	mov	r1, r7
1a001cce:	f7ff fceb 	bl	1a0016a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001cd2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001cd4:	4b16      	ldr	r3, [pc, #88]	; (1a001d30 <xTaskIncrementTick+0x118>)
1a001cd6:	681b      	ldr	r3, [r3, #0]
1a001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cda:	429a      	cmp	r2, r3
1a001cdc:	d2c5      	bcs.n	1a001c6a <xTaskIncrementTick+0x52>
1a001cde:	e7c7      	b.n	1a001c70 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001ce0:	4b13      	ldr	r3, [pc, #76]	; (1a001d30 <xTaskIncrementTick+0x118>)
1a001ce2:	681b      	ldr	r3, [r3, #0]
1a001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ce6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cea:	009b      	lsls	r3, r3, #2
1a001cec:	4a0f      	ldr	r2, [pc, #60]	; (1a001d2c <xTaskIncrementTick+0x114>)
1a001cee:	58d3      	ldr	r3, [r2, r3]
1a001cf0:	2b01      	cmp	r3, #1
1a001cf2:	d806      	bhi.n	1a001d02 <xTaskIncrementTick+0xea>
1a001cf4:	e006      	b.n	1a001d04 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a001cf6:	4a0f      	ldr	r2, [pc, #60]	; (1a001d34 <xTaskIncrementTick+0x11c>)
1a001cf8:	6813      	ldr	r3, [r2, #0]
1a001cfa:	3301      	adds	r3, #1
1a001cfc:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001cfe:	2400      	movs	r4, #0
1a001d00:	e000      	b.n	1a001d04 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
1a001d02:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a001d04:	4b0c      	ldr	r3, [pc, #48]	; (1a001d38 <xTaskIncrementTick+0x120>)
1a001d06:	681b      	ldr	r3, [r3, #0]
1a001d08:	b103      	cbz	r3, 1a001d0c <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
1a001d0a:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a001d0c:	4620      	mov	r0, r4
1a001d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001d10:	10003120 	.word	0x10003120
1a001d14:	10003148 	.word	0x10003148
1a001d18:	10003070 	.word	0x10003070
1a001d1c:	1000308c 	.word	0x1000308c
1a001d20:	1000306c 	.word	0x1000306c
1a001d24:	1000314c 	.word	0x1000314c
1a001d28:	10003190 	.word	0x10003190
1a001d2c:	10003094 	.word	0x10003094
1a001d30:	1000312c 	.word	0x1000312c
1a001d34:	10003090 	.word	0x10003090
1a001d38:	10003194 	.word	0x10003194

1a001d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a001d3c:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a001d3e:	4b34      	ldr	r3, [pc, #208]	; (1a001e10 <xTaskResumeAll+0xd4>)
1a001d40:	681b      	ldr	r3, [r3, #0]
1a001d42:	b943      	cbnz	r3, 1a001d56 <xTaskResumeAll+0x1a>
1a001d44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d48:	f383 8811 	msr	BASEPRI, r3
1a001d4c:	f3bf 8f6f 	isb	sy
1a001d50:	f3bf 8f4f 	dsb	sy
1a001d54:	e7fe      	b.n	1a001d54 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a001d56:	f000 fddb 	bl	1a002910 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a001d5a:	4b2d      	ldr	r3, [pc, #180]	; (1a001e10 <xTaskResumeAll+0xd4>)
1a001d5c:	681a      	ldr	r2, [r3, #0]
1a001d5e:	3a01      	subs	r2, #1
1a001d60:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d62:	681b      	ldr	r3, [r3, #0]
1a001d64:	2b00      	cmp	r3, #0
1a001d66:	d14c      	bne.n	1a001e02 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001d68:	4b2a      	ldr	r3, [pc, #168]	; (1a001e14 <xTaskResumeAll+0xd8>)
1a001d6a:	681b      	ldr	r3, [r3, #0]
1a001d6c:	bb33      	cbnz	r3, 1a001dbc <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001d6e:	2400      	movs	r4, #0
1a001d70:	e04a      	b.n	1a001e08 <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001d72:	4b29      	ldr	r3, [pc, #164]	; (1a001e18 <xTaskResumeAll+0xdc>)
1a001d74:	68db      	ldr	r3, [r3, #12]
1a001d76:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d78:	f104 0018 	add.w	r0, r4, #24
1a001d7c:	f7ff fcba 	bl	1a0016f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d80:	1d25      	adds	r5, r4, #4
1a001d82:	4628      	mov	r0, r5
1a001d84:	f7ff fcb6 	bl	1a0016f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d8a:	2201      	movs	r2, #1
1a001d8c:	fa02 f103 	lsl.w	r1, r2, r3
1a001d90:	4822      	ldr	r0, [pc, #136]	; (1a001e1c <xTaskResumeAll+0xe0>)
1a001d92:	6802      	ldr	r2, [r0, #0]
1a001d94:	430a      	orrs	r2, r1
1a001d96:	6002      	str	r2, [r0, #0]
1a001d98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d9c:	009b      	lsls	r3, r3, #2
1a001d9e:	4820      	ldr	r0, [pc, #128]	; (1a001e20 <xTaskResumeAll+0xe4>)
1a001da0:	4418      	add	r0, r3
1a001da2:	4629      	mov	r1, r5
1a001da4:	f7ff fc80 	bl	1a0016a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001daa:	4b1e      	ldr	r3, [pc, #120]	; (1a001e24 <xTaskResumeAll+0xe8>)
1a001dac:	681b      	ldr	r3, [r3, #0]
1a001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001db0:	429a      	cmp	r2, r3
1a001db2:	d304      	bcc.n	1a001dbe <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
1a001db4:	2201      	movs	r2, #1
1a001db6:	4b1c      	ldr	r3, [pc, #112]	; (1a001e28 <xTaskResumeAll+0xec>)
1a001db8:	601a      	str	r2, [r3, #0]
1a001dba:	e000      	b.n	1a001dbe <xTaskResumeAll+0x82>
1a001dbc:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001dbe:	4b16      	ldr	r3, [pc, #88]	; (1a001e18 <xTaskResumeAll+0xdc>)
1a001dc0:	681b      	ldr	r3, [r3, #0]
1a001dc2:	2b00      	cmp	r3, #0
1a001dc4:	d1d5      	bne.n	1a001d72 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a001dc6:	b10c      	cbz	r4, 1a001dcc <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a001dc8:	f7ff fcc4 	bl	1a001754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001dcc:	4b17      	ldr	r3, [pc, #92]	; (1a001e2c <xTaskResumeAll+0xf0>)
1a001dce:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001dd0:	b154      	cbz	r4, 1a001de8 <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a001dd2:	f7ff ff21 	bl	1a001c18 <xTaskIncrementTick>
1a001dd6:	b110      	cbz	r0, 1a001dde <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
1a001dd8:	2201      	movs	r2, #1
1a001dda:	4b13      	ldr	r3, [pc, #76]	; (1a001e28 <xTaskResumeAll+0xec>)
1a001ddc:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001dde:	3c01      	subs	r4, #1
1a001de0:	d1f7      	bne.n	1a001dd2 <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
1a001de2:	2200      	movs	r2, #0
1a001de4:	4b11      	ldr	r3, [pc, #68]	; (1a001e2c <xTaskResumeAll+0xf0>)
1a001de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a001de8:	4b0f      	ldr	r3, [pc, #60]	; (1a001e28 <xTaskResumeAll+0xec>)
1a001dea:	681b      	ldr	r3, [r3, #0]
1a001dec:	b15b      	cbz	r3, 1a001e06 <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a001dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001df2:	4b0f      	ldr	r3, [pc, #60]	; (1a001e30 <xTaskResumeAll+0xf4>)
1a001df4:	601a      	str	r2, [r3, #0]
1a001df6:	f3bf 8f4f 	dsb	sy
1a001dfa:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a001dfe:	2401      	movs	r4, #1
1a001e00:	e002      	b.n	1a001e08 <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001e02:	2400      	movs	r4, #0
1a001e04:	e000      	b.n	1a001e08 <xTaskResumeAll+0xcc>
1a001e06:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001e08:	f000 fda4 	bl	1a002954 <vPortExitCritical>

	return xAlreadyYielded;
}
1a001e0c:	4620      	mov	r0, r4
1a001e0e:	bd38      	pop	{r3, r4, r5, pc}
1a001e10:	10003120 	.word	0x10003120
1a001e14:	10003128 	.word	0x10003128
1a001e18:	10003130 	.word	0x10003130
1a001e1c:	10003190 	.word	0x10003190
1a001e20:	10003094 	.word	0x10003094
1a001e24:	1000312c 	.word	0x1000312c
1a001e28:	10003194 	.word	0x10003194
1a001e2c:	10003090 	.word	0x10003090
1a001e30:	e000ed04 	.word	0xe000ed04

1a001e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a001e34:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001e36:	b1a8      	cbz	r0, 1a001e64 <vTaskDelay+0x30>
1a001e38:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a001e3a:	4b10      	ldr	r3, [pc, #64]	; (1a001e7c <vTaskDelay+0x48>)
1a001e3c:	681b      	ldr	r3, [r3, #0]
1a001e3e:	b143      	cbz	r3, 1a001e52 <vTaskDelay+0x1e>
1a001e40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e44:	f383 8811 	msr	BASEPRI, r3
1a001e48:	f3bf 8f6f 	isb	sy
1a001e4c:	f3bf 8f4f 	dsb	sy
1a001e50:	e7fe      	b.n	1a001e50 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001e52:	f7ff fecb 	bl	1a001bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001e56:	4620      	mov	r0, r4
1a001e58:	2100      	movs	r1, #0
1a001e5a:	f7ff fdbb 	bl	1a0019d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a001e5e:	f7ff ff6d 	bl	1a001d3c <xTaskResumeAll>
1a001e62:	e000      	b.n	1a001e66 <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
1a001e64:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001e66:	b938      	cbnz	r0, 1a001e78 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
1a001e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e6c:	4b04      	ldr	r3, [pc, #16]	; (1a001e80 <vTaskDelay+0x4c>)
1a001e6e:	601a      	str	r2, [r3, #0]
1a001e70:	f3bf 8f4f 	dsb	sy
1a001e74:	f3bf 8f6f 	isb	sy
1a001e78:	bd10      	pop	{r4, pc}
1a001e7a:	bf00      	nop
1a001e7c:	10003120 	.word	0x10003120
1a001e80:	e000ed04 	.word	0xe000ed04

1a001e84 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001e84:	4b2b      	ldr	r3, [pc, #172]	; (1a001f34 <vTaskSwitchContext+0xb0>)
1a001e86:	681b      	ldr	r3, [r3, #0]
1a001e88:	b11b      	cbz	r3, 1a001e92 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a001e8a:	2201      	movs	r2, #1
1a001e8c:	4b2a      	ldr	r3, [pc, #168]	; (1a001f38 <vTaskSwitchContext+0xb4>)
1a001e8e:	601a      	str	r2, [r3, #0]
1a001e90:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a001e92:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a001e94:	2200      	movs	r2, #0
1a001e96:	4b28      	ldr	r3, [pc, #160]	; (1a001f38 <vTaskSwitchContext+0xb4>)
1a001e98:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001e9a:	4b28      	ldr	r3, [pc, #160]	; (1a001f3c <vTaskSwitchContext+0xb8>)
1a001e9c:	681b      	ldr	r3, [r3, #0]
1a001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001ea0:	681a      	ldr	r2, [r3, #0]
1a001ea2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001ea6:	d10b      	bne.n	1a001ec0 <vTaskSwitchContext+0x3c>
1a001ea8:	685a      	ldr	r2, [r3, #4]
1a001eaa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001eae:	d107      	bne.n	1a001ec0 <vTaskSwitchContext+0x3c>
1a001eb0:	689a      	ldr	r2, [r3, #8]
1a001eb2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001eb6:	d103      	bne.n	1a001ec0 <vTaskSwitchContext+0x3c>
1a001eb8:	68db      	ldr	r3, [r3, #12]
1a001eba:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001ebe:	d005      	beq.n	1a001ecc <vTaskSwitchContext+0x48>
1a001ec0:	4b1e      	ldr	r3, [pc, #120]	; (1a001f3c <vTaskSwitchContext+0xb8>)
1a001ec2:	6818      	ldr	r0, [r3, #0]
1a001ec4:	6819      	ldr	r1, [r3, #0]
1a001ec6:	3134      	adds	r1, #52	; 0x34
1a001ec8:	f7ff fc40 	bl	1a00174c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001ecc:	4b1c      	ldr	r3, [pc, #112]	; (1a001f40 <vTaskSwitchContext+0xbc>)
1a001ece:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001ed0:	fab3 f383 	clz	r3, r3
1a001ed4:	b2db      	uxtb	r3, r3
1a001ed6:	f1c3 031f 	rsb	r3, r3, #31
1a001eda:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001ede:	0092      	lsls	r2, r2, #2
1a001ee0:	4918      	ldr	r1, [pc, #96]	; (1a001f44 <vTaskSwitchContext+0xc0>)
1a001ee2:	588a      	ldr	r2, [r1, r2]
1a001ee4:	b942      	cbnz	r2, 1a001ef8 <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001ee6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eea:	f383 8811 	msr	BASEPRI, r3
1a001eee:	f3bf 8f6f 	isb	sy
1a001ef2:	f3bf 8f4f 	dsb	sy
1a001ef6:	e7fe      	b.n	1a001ef6 <vTaskSwitchContext+0x72>
1a001ef8:	4c12      	ldr	r4, [pc, #72]	; (1a001f44 <vTaskSwitchContext+0xc0>)
1a001efa:	009a      	lsls	r2, r3, #2
1a001efc:	18d1      	adds	r1, r2, r3
1a001efe:	0089      	lsls	r1, r1, #2
1a001f00:	4421      	add	r1, r4
1a001f02:	6848      	ldr	r0, [r1, #4]
1a001f04:	6840      	ldr	r0, [r0, #4]
1a001f06:	6048      	str	r0, [r1, #4]
1a001f08:	441a      	add	r2, r3
1a001f0a:	0092      	lsls	r2, r2, #2
1a001f0c:	3208      	adds	r2, #8
1a001f0e:	4422      	add	r2, r4
1a001f10:	4290      	cmp	r0, r2
1a001f12:	d105      	bne.n	1a001f20 <vTaskSwitchContext+0x9c>
1a001f14:	6841      	ldr	r1, [r0, #4]
1a001f16:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001f1a:	0092      	lsls	r2, r2, #2
1a001f1c:	4422      	add	r2, r4
1a001f1e:	6051      	str	r1, [r2, #4]
1a001f20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f24:	009b      	lsls	r3, r3, #2
1a001f26:	4a07      	ldr	r2, [pc, #28]	; (1a001f44 <vTaskSwitchContext+0xc0>)
1a001f28:	4413      	add	r3, r2
1a001f2a:	685b      	ldr	r3, [r3, #4]
1a001f2c:	68da      	ldr	r2, [r3, #12]
1a001f2e:	4b03      	ldr	r3, [pc, #12]	; (1a001f3c <vTaskSwitchContext+0xb8>)
1a001f30:	601a      	str	r2, [r3, #0]
1a001f32:	bd10      	pop	{r4, pc}
1a001f34:	10003120 	.word	0x10003120
1a001f38:	10003194 	.word	0x10003194
1a001f3c:	1000312c 	.word	0x1000312c
1a001f40:	10003190 	.word	0x10003190
1a001f44:	10003094 	.word	0x10003094

1a001f48 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a001f48:	b940      	cbnz	r0, 1a001f5c <vTaskPlaceOnEventList+0x14>
1a001f4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f4e:	f383 8811 	msr	BASEPRI, r3
1a001f52:	f3bf 8f6f 	isb	sy
1a001f56:	f3bf 8f4f 	dsb	sy
1a001f5a:	e7fe      	b.n	1a001f5a <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001f5c:	b510      	push	{r4, lr}
1a001f5e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001f60:	4b04      	ldr	r3, [pc, #16]	; (1a001f74 <vTaskPlaceOnEventList+0x2c>)
1a001f62:	6819      	ldr	r1, [r3, #0]
1a001f64:	3118      	adds	r1, #24
1a001f66:	f7ff fbab 	bl	1a0016c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001f6a:	4620      	mov	r0, r4
1a001f6c:	2101      	movs	r1, #1
1a001f6e:	f7ff fd31 	bl	1a0019d4 <prvAddCurrentTaskToDelayedList>
1a001f72:	bd10      	pop	{r4, pc}
1a001f74:	1000312c 	.word	0x1000312c

1a001f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001f78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001f7a:	b940      	cbnz	r0, 1a001f8e <vTaskPlaceOnEventListRestricted+0x16>
1a001f7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f80:	f383 8811 	msr	BASEPRI, r3
1a001f84:	f3bf 8f6f 	isb	sy
1a001f88:	f3bf 8f4f 	dsb	sy
1a001f8c:	e7fe      	b.n	1a001f8c <vTaskPlaceOnEventListRestricted+0x14>
1a001f8e:	460d      	mov	r5, r1
1a001f90:	4614      	mov	r4, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001f92:	4a06      	ldr	r2, [pc, #24]	; (1a001fac <vTaskPlaceOnEventListRestricted+0x34>)
1a001f94:	6811      	ldr	r1, [r2, #0]
1a001f96:	3118      	adds	r1, #24
1a001f98:	f7ff fb86 	bl	1a0016a8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a001f9c:	b10c      	cbz	r4, 1a001fa2 <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a001f9e:	f04f 35ff 	mov.w	r5, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001fa2:	4628      	mov	r0, r5
1a001fa4:	4621      	mov	r1, r4
1a001fa6:	f7ff fd15 	bl	1a0019d4 <prvAddCurrentTaskToDelayedList>
1a001faa:	bd38      	pop	{r3, r4, r5, pc}
1a001fac:	1000312c 	.word	0x1000312c

1a001fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a001fb0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001fb2:	68c3      	ldr	r3, [r0, #12]
1a001fb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001fb6:	b944      	cbnz	r4, 1a001fca <xTaskRemoveFromEventList+0x1a>
1a001fb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fbc:	f383 8811 	msr	BASEPRI, r3
1a001fc0:	f3bf 8f6f 	isb	sy
1a001fc4:	f3bf 8f4f 	dsb	sy
1a001fc8:	e7fe      	b.n	1a001fc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001fca:	f104 0518 	add.w	r5, r4, #24
1a001fce:	4628      	mov	r0, r5
1a001fd0:	f7ff fb90 	bl	1a0016f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001fd4:	4b13      	ldr	r3, [pc, #76]	; (1a002024 <xTaskRemoveFromEventList+0x74>)
1a001fd6:	681b      	ldr	r3, [r3, #0]
1a001fd8:	b9a3      	cbnz	r3, 1a002004 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001fda:	1d25      	adds	r5, r4, #4
1a001fdc:	4628      	mov	r0, r5
1a001fde:	f7ff fb89 	bl	1a0016f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001fe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001fe4:	2201      	movs	r2, #1
1a001fe6:	fa02 f103 	lsl.w	r1, r2, r3
1a001fea:	480f      	ldr	r0, [pc, #60]	; (1a002028 <xTaskRemoveFromEventList+0x78>)
1a001fec:	6802      	ldr	r2, [r0, #0]
1a001fee:	430a      	orrs	r2, r1
1a001ff0:	6002      	str	r2, [r0, #0]
1a001ff2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ff6:	009b      	lsls	r3, r3, #2
1a001ff8:	480c      	ldr	r0, [pc, #48]	; (1a00202c <xTaskRemoveFromEventList+0x7c>)
1a001ffa:	4418      	add	r0, r3
1a001ffc:	4629      	mov	r1, r5
1a001ffe:	f7ff fb53 	bl	1a0016a8 <vListInsertEnd>
1a002002:	e003      	b.n	1a00200c <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002004:	480a      	ldr	r0, [pc, #40]	; (1a002030 <xTaskRemoveFromEventList+0x80>)
1a002006:	4629      	mov	r1, r5
1a002008:	f7ff fb4e 	bl	1a0016a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00200c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00200e:	4b09      	ldr	r3, [pc, #36]	; (1a002034 <xTaskRemoveFromEventList+0x84>)
1a002010:	681b      	ldr	r3, [r3, #0]
1a002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002014:	429a      	cmp	r2, r3
1a002016:	d903      	bls.n	1a002020 <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a002018:	2001      	movs	r0, #1
1a00201a:	4b07      	ldr	r3, [pc, #28]	; (1a002038 <xTaskRemoveFromEventList+0x88>)
1a00201c:	6018      	str	r0, [r3, #0]
1a00201e:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
1a002020:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a002022:	bd38      	pop	{r3, r4, r5, pc}
1a002024:	10003120 	.word	0x10003120
1a002028:	10003190 	.word	0x10003190
1a00202c:	10003094 	.word	0x10003094
1a002030:	10003130 	.word	0x10003130
1a002034:	1000312c 	.word	0x1000312c
1a002038:	10003194 	.word	0x10003194

1a00203c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00203c:	4b03      	ldr	r3, [pc, #12]	; (1a00204c <vTaskInternalSetTimeOutState+0x10>)
1a00203e:	681b      	ldr	r3, [r3, #0]
1a002040:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002042:	4b03      	ldr	r3, [pc, #12]	; (1a002050 <vTaskInternalSetTimeOutState+0x14>)
1a002044:	681b      	ldr	r3, [r3, #0]
1a002046:	6043      	str	r3, [r0, #4]
1a002048:	4770      	bx	lr
1a00204a:	bf00      	nop
1a00204c:	1000306c 	.word	0x1000306c
1a002050:	10003148 	.word	0x10003148

1a002054 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a002056:	b940      	cbnz	r0, 1a00206a <xTaskCheckForTimeOut+0x16>
1a002058:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00205c:	f383 8811 	msr	BASEPRI, r3
1a002060:	f3bf 8f6f 	isb	sy
1a002064:	f3bf 8f4f 	dsb	sy
1a002068:	e7fe      	b.n	1a002068 <xTaskCheckForTimeOut+0x14>
1a00206a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00206c:	b941      	cbnz	r1, 1a002080 <xTaskCheckForTimeOut+0x2c>
1a00206e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002072:	f383 8811 	msr	BASEPRI, r3
1a002076:	f3bf 8f6f 	isb	sy
1a00207a:	f3bf 8f4f 	dsb	sy
1a00207e:	e7fe      	b.n	1a00207e <xTaskCheckForTimeOut+0x2a>
1a002080:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a002082:	f000 fc45 	bl	1a002910 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a002086:	4b11      	ldr	r3, [pc, #68]	; (1a0020cc <xTaskCheckForTimeOut+0x78>)
1a002088:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00208a:	6869      	ldr	r1, [r5, #4]
1a00208c:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a00208e:	6823      	ldr	r3, [r4, #0]
1a002090:	f1b3 3fff 	cmp.w	r3, #4294967295
1a002094:	d013      	beq.n	1a0020be <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002096:	682f      	ldr	r7, [r5, #0]
1a002098:	4e0d      	ldr	r6, [pc, #52]	; (1a0020d0 <xTaskCheckForTimeOut+0x7c>)
1a00209a:	6836      	ldr	r6, [r6, #0]
1a00209c:	42b7      	cmp	r7, r6
1a00209e:	d001      	beq.n	1a0020a4 <xTaskCheckForTimeOut+0x50>
1a0020a0:	4288      	cmp	r0, r1
1a0020a2:	d20e      	bcs.n	1a0020c2 <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0020a4:	429a      	cmp	r2, r3
1a0020a6:	d206      	bcs.n	1a0020b6 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a0020a8:	1a9b      	subs	r3, r3, r2
1a0020aa:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0020ac:	4628      	mov	r0, r5
1a0020ae:	f7ff ffc5 	bl	1a00203c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0020b2:	2400      	movs	r4, #0
1a0020b4:	e006      	b.n	1a0020c4 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
1a0020b6:	2300      	movs	r3, #0
1a0020b8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0020ba:	2401      	movs	r4, #1
1a0020bc:	e002      	b.n	1a0020c4 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a0020be:	2400      	movs	r4, #0
1a0020c0:	e000      	b.n	1a0020c4 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a0020c2:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a0020c4:	f000 fc46 	bl	1a002954 <vPortExitCritical>

	return xReturn;
}
1a0020c8:	4620      	mov	r0, r4
1a0020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0020cc:	10003148 	.word	0x10003148
1a0020d0:	1000306c 	.word	0x1000306c

1a0020d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a0020d4:	2201      	movs	r2, #1
1a0020d6:	4b01      	ldr	r3, [pc, #4]	; (1a0020dc <vTaskMissedYield+0x8>)
1a0020d8:	601a      	str	r2, [r3, #0]
1a0020da:	4770      	bx	lr
1a0020dc:	10003194 	.word	0x10003194

1a0020e0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a0020e0:	4b05      	ldr	r3, [pc, #20]	; (1a0020f8 <xTaskGetSchedulerState+0x18>)
1a0020e2:	681b      	ldr	r3, [r3, #0]
1a0020e4:	b123      	cbz	r3, 1a0020f0 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0020e6:	4b05      	ldr	r3, [pc, #20]	; (1a0020fc <xTaskGetSchedulerState+0x1c>)
1a0020e8:	681b      	ldr	r3, [r3, #0]
1a0020ea:	b91b      	cbnz	r3, 1a0020f4 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
1a0020ec:	2002      	movs	r0, #2
1a0020ee:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0020f0:	2001      	movs	r0, #1
1a0020f2:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a0020f4:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a0020f6:	4770      	bx	lr
1a0020f8:	10003074 	.word	0x10003074
1a0020fc:	10003120 	.word	0x10003120

1a002100 <xTaskPriorityInherit>:
	BaseType_t xReturn = pdFALSE;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
1a002100:	2800      	cmp	r0, #0
1a002102:	d054      	beq.n	1a0021ae <xTaskPriorityInherit+0xae>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
1a002104:	b538      	push	{r3, r4, r5, lr}
1a002106:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a002108:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
1a00210a:	4a2b      	ldr	r2, [pc, #172]	; (1a0021b8 <xTaskPriorityInherit+0xb8>)
1a00210c:	6812      	ldr	r2, [r2, #0]
1a00210e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002110:	4291      	cmp	r1, r2
1a002112:	d244      	bcs.n	1a00219e <xTaskPriorityInherit+0x9e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002114:	6982      	ldr	r2, [r0, #24]
1a002116:	2a00      	cmp	r2, #0
1a002118:	db05      	blt.n	1a002126 <xTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00211a:	4a27      	ldr	r2, [pc, #156]	; (1a0021b8 <xTaskPriorityInherit+0xb8>)
1a00211c:	6812      	ldr	r2, [r2, #0]
1a00211e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002120:	f1c2 0207 	rsb	r2, r2, #7
1a002124:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002126:	6959      	ldr	r1, [r3, #20]
1a002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00212a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00212e:	0092      	lsls	r2, r2, #2
1a002130:	4822      	ldr	r0, [pc, #136]	; (1a0021bc <xTaskPriorityInherit+0xbc>)
1a002132:	4402      	add	r2, r0
1a002134:	4291      	cmp	r1, r2
1a002136:	d101      	bne.n	1a00213c <xTaskPriorityInherit+0x3c>
1a002138:	2201      	movs	r2, #1
1a00213a:	e000      	b.n	1a00213e <xTaskPriorityInherit+0x3e>
1a00213c:	2200      	movs	r2, #0
1a00213e:	b342      	cbz	r2, 1a002192 <xTaskPriorityInherit+0x92>
1a002140:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002142:	1d1d      	adds	r5, r3, #4
1a002144:	4628      	mov	r0, r5
1a002146:	f7ff fad5 	bl	1a0016f4 <uxListRemove>
1a00214a:	b968      	cbnz	r0, 1a002168 <xTaskPriorityInherit+0x68>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a00214c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00214e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a002152:	009b      	lsls	r3, r3, #2
1a002154:	4919      	ldr	r1, [pc, #100]	; (1a0021bc <xTaskPriorityInherit+0xbc>)
1a002156:	58cb      	ldr	r3, [r1, r3]
1a002158:	b933      	cbnz	r3, 1a002168 <xTaskPriorityInherit+0x68>
1a00215a:	2301      	movs	r3, #1
1a00215c:	4093      	lsls	r3, r2
1a00215e:	4918      	ldr	r1, [pc, #96]	; (1a0021c0 <xTaskPriorityInherit+0xc0>)
1a002160:	680a      	ldr	r2, [r1, #0]
1a002162:	ea22 0303 	bic.w	r3, r2, r3
1a002166:	600b      	str	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002168:	4b13      	ldr	r3, [pc, #76]	; (1a0021b8 <xTaskPriorityInherit+0xb8>)
1a00216a:	681b      	ldr	r3, [r3, #0]
1a00216c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
1a00216e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002170:	2401      	movs	r4, #1
1a002172:	fa04 f100 	lsl.w	r1, r4, r0
1a002176:	4a12      	ldr	r2, [pc, #72]	; (1a0021c0 <xTaskPriorityInherit+0xc0>)
1a002178:	6813      	ldr	r3, [r2, #0]
1a00217a:	430b      	orrs	r3, r1
1a00217c:	6013      	str	r3, [r2, #0]
1a00217e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002182:	0080      	lsls	r0, r0, #2
1a002184:	4b0d      	ldr	r3, [pc, #52]	; (1a0021bc <xTaskPriorityInherit+0xbc>)
1a002186:	4418      	add	r0, r3
1a002188:	4629      	mov	r1, r5
1a00218a:	f7ff fa8d 	bl	1a0016a8 <vListInsertEnd>
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a00218e:	4620      	mov	r0, r4
1a002190:	bd38      	pop	{r3, r4, r5, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002192:	4a09      	ldr	r2, [pc, #36]	; (1a0021b8 <xTaskPriorityInherit+0xb8>)
1a002194:	6812      	ldr	r2, [r2, #0]
1a002196:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002198:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a00219a:	2001      	movs	r0, #1
1a00219c:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a00219e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a0021a0:	4b05      	ldr	r3, [pc, #20]	; (1a0021b8 <xTaskPriorityInherit+0xb8>)
1a0021a2:	681b      	ldr	r3, [r3, #0]
1a0021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0021a6:	429a      	cmp	r2, r3
1a0021a8:	d303      	bcc.n	1a0021b2 <xTaskPriorityInherit+0xb2>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a0021aa:	2000      	movs	r0, #0
1a0021ac:	bd38      	pop	{r3, r4, r5, pc}
1a0021ae:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a0021b0:	4770      	bx	lr
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
1a0021b2:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a0021b4:	bd38      	pop	{r3, r4, r5, pc}
1a0021b6:	bf00      	nop
1a0021b8:	1000312c 	.word	0x1000312c
1a0021bc:	10003094 	.word	0x10003094
1a0021c0:	10003190 	.word	0x10003190

1a0021c4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a0021c4:	2800      	cmp	r0, #0
1a0021c6:	d04b      	beq.n	1a002260 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a0021c8:	b538      	push	{r3, r4, r5, lr}
1a0021ca:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a0021cc:	4a27      	ldr	r2, [pc, #156]	; (1a00226c <xTaskPriorityDisinherit+0xa8>)
1a0021ce:	6812      	ldr	r2, [r2, #0]
1a0021d0:	4290      	cmp	r0, r2
1a0021d2:	d008      	beq.n	1a0021e6 <xTaskPriorityDisinherit+0x22>
1a0021d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021d8:	f383 8811 	msr	BASEPRI, r3
1a0021dc:	f3bf 8f6f 	isb	sy
1a0021e0:	f3bf 8f4f 	dsb	sy
1a0021e4:	e7fe      	b.n	1a0021e4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0021e6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0021e8:	b942      	cbnz	r2, 1a0021fc <xTaskPriorityDisinherit+0x38>
1a0021ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ee:	f383 8811 	msr	BASEPRI, r3
1a0021f2:	f3bf 8f6f 	isb	sy
1a0021f6:	f3bf 8f4f 	dsb	sy
1a0021fa:	e7fe      	b.n	1a0021fa <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0021fc:	3a01      	subs	r2, #1
1a0021fe:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002200:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002202:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a002204:	4288      	cmp	r0, r1
1a002206:	d02d      	beq.n	1a002264 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002208:	bb72      	cbnz	r2, 1a002268 <xTaskPriorityDisinherit+0xa4>
1a00220a:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00220c:	1d1d      	adds	r5, r3, #4
1a00220e:	4628      	mov	r0, r5
1a002210:	f7ff fa70 	bl	1a0016f4 <uxListRemove>
1a002214:	b970      	cbnz	r0, 1a002234 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002216:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002218:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a00221c:	009b      	lsls	r3, r3, #2
1a00221e:	4914      	ldr	r1, [pc, #80]	; (1a002270 <xTaskPriorityDisinherit+0xac>)
1a002220:	58cb      	ldr	r3, [r1, r3]
1a002222:	b93b      	cbnz	r3, 1a002234 <xTaskPriorityDisinherit+0x70>
1a002224:	2301      	movs	r3, #1
1a002226:	fa03 f202 	lsl.w	r2, r3, r2
1a00222a:	4912      	ldr	r1, [pc, #72]	; (1a002274 <xTaskPriorityDisinherit+0xb0>)
1a00222c:	680b      	ldr	r3, [r1, #0]
1a00222e:	ea23 0302 	bic.w	r3, r3, r2
1a002232:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002234:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a002236:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002238:	f1c0 0307 	rsb	r3, r0, #7
1a00223c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00223e:	2401      	movs	r4, #1
1a002240:	fa04 f100 	lsl.w	r1, r4, r0
1a002244:	4a0b      	ldr	r2, [pc, #44]	; (1a002274 <xTaskPriorityDisinherit+0xb0>)
1a002246:	6813      	ldr	r3, [r2, #0]
1a002248:	430b      	orrs	r3, r1
1a00224a:	6013      	str	r3, [r2, #0]
1a00224c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002250:	0080      	lsls	r0, r0, #2
1a002252:	4b07      	ldr	r3, [pc, #28]	; (1a002270 <xTaskPriorityDisinherit+0xac>)
1a002254:	4418      	add	r0, r3
1a002256:	4629      	mov	r1, r5
1a002258:	f7ff fa26 	bl	1a0016a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a00225c:	4620      	mov	r0, r4
1a00225e:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a002260:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a002262:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a002264:	2000      	movs	r0, #0
1a002266:	bd38      	pop	{r3, r4, r5, pc}
1a002268:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a00226a:	bd38      	pop	{r3, r4, r5, pc}
1a00226c:	1000312c 	.word	0x1000312c
1a002270:	10003094 	.word	0x10003094
1a002274:	10003190 	.word	0x10003190

1a002278 <vTaskPriorityDisinheritAfterTimeout>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;

		if( pxMutexHolder != NULL )
1a002278:	2800      	cmp	r0, #0
1a00227a:	d05b      	beq.n	1a002334 <vTaskPriorityDisinheritAfterTimeout+0xbc>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
1a00227c:	b538      	push	{r3, r4, r5, lr}
1a00227e:	4603      	mov	r3, r0

		if( pxMutexHolder != NULL )
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
1a002280:	6d44      	ldr	r4, [r0, #84]	; 0x54
1a002282:	b944      	cbnz	r4, 1a002296 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002284:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002288:	f383 8811 	msr	BASEPRI, r3
1a00228c:	f3bf 8f6f 	isb	sy
1a002290:	f3bf 8f4f 	dsb	sy
1a002294:	e7fe      	b.n	1a002294 <vTaskPriorityDisinheritAfterTimeout+0x1c>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002296:	6d00      	ldr	r0, [r0, #80]	; 0x50
1a002298:	4288      	cmp	r0, r1
1a00229a:	d200      	bcs.n	1a00229e <vTaskPriorityDisinheritAfterTimeout+0x26>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a00229c:	4608      	mov	r0, r1
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0022a0:	4282      	cmp	r2, r0
1a0022a2:	d046      	beq.n	1a002332 <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a0022a4:	2c01      	cmp	r4, #1
1a0022a6:	d144      	bne.n	1a002332 <vTaskPriorityDisinheritAfterTimeout+0xba>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
1a0022a8:	4923      	ldr	r1, [pc, #140]	; (1a002338 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a0022aa:	6809      	ldr	r1, [r1, #0]
1a0022ac:	428b      	cmp	r3, r1
1a0022ae:	d108      	bne.n	1a0022c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
1a0022b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022b4:	f383 8811 	msr	BASEPRI, r3
1a0022b8:	f3bf 8f6f 	isb	sy
1a0022bc:	f3bf 8f4f 	dsb	sy
1a0022c0:	e7fe      	b.n	1a0022c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
					pxTCB->uxPriority = uxPriorityToUse;
1a0022c2:	62d8      	str	r0, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0022c4:	6999      	ldr	r1, [r3, #24]
1a0022c6:	2900      	cmp	r1, #0
1a0022c8:	db02      	blt.n	1a0022d0 <vTaskPriorityDisinheritAfterTimeout+0x58>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022ca:	f1c0 0007 	rsb	r0, r0, #7
1a0022ce:	6198      	str	r0, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0022d0:	6959      	ldr	r1, [r3, #20]
1a0022d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0022d6:	0092      	lsls	r2, r2, #2
1a0022d8:	4818      	ldr	r0, [pc, #96]	; (1a00233c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a0022da:	4402      	add	r2, r0
1a0022dc:	4291      	cmp	r1, r2
1a0022de:	d101      	bne.n	1a0022e4 <vTaskPriorityDisinheritAfterTimeout+0x6c>
1a0022e0:	2201      	movs	r2, #1
1a0022e2:	e000      	b.n	1a0022e6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
1a0022e4:	2200      	movs	r2, #0
1a0022e6:	b322      	cbz	r2, 1a002332 <vTaskPriorityDisinheritAfterTimeout+0xba>
1a0022e8:	461c      	mov	r4, r3
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0022ea:	1d1d      	adds	r5, r3, #4
1a0022ec:	4628      	mov	r0, r5
1a0022ee:	f7ff fa01 	bl	1a0016f4 <uxListRemove>
1a0022f2:	b970      	cbnz	r0, 1a002312 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0022f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0022f6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a0022fa:	009b      	lsls	r3, r3, #2
1a0022fc:	490f      	ldr	r1, [pc, #60]	; (1a00233c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a0022fe:	58cb      	ldr	r3, [r1, r3]
1a002300:	b93b      	cbnz	r3, 1a002312 <vTaskPriorityDisinheritAfterTimeout+0x9a>
1a002302:	2301      	movs	r3, #1
1a002304:	fa03 f202 	lsl.w	r2, r3, r2
1a002308:	490d      	ldr	r1, [pc, #52]	; (1a002340 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a00230a:	680b      	ldr	r3, [r1, #0]
1a00230c:	ea23 0302 	bic.w	r3, r3, r2
1a002310:	600b      	str	r3, [r1, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
1a002312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002314:	2201      	movs	r2, #1
1a002316:	fa02 f103 	lsl.w	r1, r2, r3
1a00231a:	4809      	ldr	r0, [pc, #36]	; (1a002340 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a00231c:	6802      	ldr	r2, [r0, #0]
1a00231e:	430a      	orrs	r2, r1
1a002320:	6002      	str	r2, [r0, #0]
1a002322:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002326:	009b      	lsls	r3, r3, #2
1a002328:	4804      	ldr	r0, [pc, #16]	; (1a00233c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a00232a:	4418      	add	r0, r3
1a00232c:	4629      	mov	r1, r5
1a00232e:	f7ff f9bb 	bl	1a0016a8 <vListInsertEnd>
1a002332:	bd38      	pop	{r3, r4, r5, pc}
1a002334:	4770      	bx	lr
1a002336:	bf00      	nop
1a002338:	1000312c 	.word	0x1000312c
1a00233c:	10003094 	.word	0x10003094
1a002340:	10003190 	.word	0x10003190

1a002344 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
1a002344:	4b05      	ldr	r3, [pc, #20]	; (1a00235c <pvTaskIncrementMutexHeldCount+0x18>)
1a002346:	681b      	ldr	r3, [r3, #0]
1a002348:	b123      	cbz	r3, 1a002354 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
1a00234a:	4b04      	ldr	r3, [pc, #16]	; (1a00235c <pvTaskIncrementMutexHeldCount+0x18>)
1a00234c:	681a      	ldr	r2, [r3, #0]
1a00234e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002350:	3301      	adds	r3, #1
1a002352:	6553      	str	r3, [r2, #84]	; 0x54
		}

		return pxCurrentTCB;
1a002354:	4b01      	ldr	r3, [pc, #4]	; (1a00235c <pvTaskIncrementMutexHeldCount+0x18>)
1a002356:	6818      	ldr	r0, [r3, #0]
	}
1a002358:	4770      	bx	lr
1a00235a:	bf00      	nop
1a00235c:	1000312c 	.word	0x1000312c

1a002360 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002360:	4b06      	ldr	r3, [pc, #24]	; (1a00237c <prvGetNextExpireTime+0x1c>)
1a002362:	681a      	ldr	r2, [r3, #0]
1a002364:	6813      	ldr	r3, [r2, #0]
1a002366:	fab3 f383 	clz	r3, r3
1a00236a:	095b      	lsrs	r3, r3, #5
1a00236c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00236e:	b913      	cbnz	r3, 1a002376 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002370:	68d3      	ldr	r3, [r2, #12]
1a002372:	6818      	ldr	r0, [r3, #0]
1a002374:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002376:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002378:	4770      	bx	lr
1a00237a:	bf00      	nop
1a00237c:	10003198 	.word	0x10003198

1a002380 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002380:	b510      	push	{r4, lr}
1a002382:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002384:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002386:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002388:	4291      	cmp	r1, r2
1a00238a:	d80a      	bhi.n	1a0023a2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00238c:	1ad2      	subs	r2, r2, r3
1a00238e:	6983      	ldr	r3, [r0, #24]
1a002390:	429a      	cmp	r2, r3
1a002392:	d211      	bcs.n	1a0023b8 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002394:	4b0a      	ldr	r3, [pc, #40]	; (1a0023c0 <prvInsertTimerInActiveList+0x40>)
1a002396:	6818      	ldr	r0, [r3, #0]
1a002398:	1d21      	adds	r1, r4, #4
1a00239a:	f7ff f991 	bl	1a0016c0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a00239e:	2000      	movs	r0, #0
1a0023a0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0023a2:	429a      	cmp	r2, r3
1a0023a4:	d201      	bcs.n	1a0023aa <prvInsertTimerInActiveList+0x2a>
1a0023a6:	4299      	cmp	r1, r3
1a0023a8:	d208      	bcs.n	1a0023bc <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0023aa:	4b06      	ldr	r3, [pc, #24]	; (1a0023c4 <prvInsertTimerInActiveList+0x44>)
1a0023ac:	6818      	ldr	r0, [r3, #0]
1a0023ae:	1d21      	adds	r1, r4, #4
1a0023b0:	f7ff f986 	bl	1a0016c0 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a0023b4:	2000      	movs	r0, #0
1a0023b6:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0023b8:	2001      	movs	r0, #1
1a0023ba:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a0023bc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a0023be:	bd10      	pop	{r4, pc}
1a0023c0:	100032bc 	.word	0x100032bc
1a0023c4:	10003198 	.word	0x10003198

1a0023c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0023c8:	b530      	push	{r4, r5, lr}
1a0023ca:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0023cc:	f000 faa0 	bl	1a002910 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0023d0:	4b10      	ldr	r3, [pc, #64]	; (1a002414 <prvCheckForValidListAndQueue+0x4c>)
1a0023d2:	681b      	ldr	r3, [r3, #0]
1a0023d4:	b9cb      	cbnz	r3, 1a00240a <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
1a0023d6:	4d10      	ldr	r5, [pc, #64]	; (1a002418 <prvCheckForValidListAndQueue+0x50>)
1a0023d8:	4628      	mov	r0, r5
1a0023da:	f7ff f955 	bl	1a001688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0023de:	4c0f      	ldr	r4, [pc, #60]	; (1a00241c <prvCheckForValidListAndQueue+0x54>)
1a0023e0:	4620      	mov	r0, r4
1a0023e2:	f7ff f951 	bl	1a001688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0023e6:	4b0e      	ldr	r3, [pc, #56]	; (1a002420 <prvCheckForValidListAndQueue+0x58>)
1a0023e8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0023ea:	4b0e      	ldr	r3, [pc, #56]	; (1a002424 <prvCheckForValidListAndQueue+0x5c>)
1a0023ec:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0023ee:	2300      	movs	r3, #0
1a0023f0:	9300      	str	r3, [sp, #0]
1a0023f2:	200a      	movs	r0, #10
1a0023f4:	2110      	movs	r1, #16
1a0023f6:	4a0c      	ldr	r2, [pc, #48]	; (1a002428 <prvCheckForValidListAndQueue+0x60>)
1a0023f8:	4b0c      	ldr	r3, [pc, #48]	; (1a00242c <prvCheckForValidListAndQueue+0x64>)
1a0023fa:	f7fe fd25 	bl	1a000e48 <xQueueGenericCreateStatic>
1a0023fe:	4b05      	ldr	r3, [pc, #20]	; (1a002414 <prvCheckForValidListAndQueue+0x4c>)
1a002400:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a002402:	b110      	cbz	r0, 1a00240a <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002404:	490a      	ldr	r1, [pc, #40]	; (1a002430 <prvCheckForValidListAndQueue+0x68>)
1a002406:	f7ff f905 	bl	1a001614 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00240a:	f000 faa3 	bl	1a002954 <vPortExitCritical>
}
1a00240e:	b003      	add	sp, #12
1a002410:	bd30      	pop	{r4, r5, pc}
1a002412:	bf00      	nop
1a002414:	100032b8 	.word	0x100032b8
1a002418:	1000319c 	.word	0x1000319c
1a00241c:	100031b0 	.word	0x100031b0
1a002420:	10003198 	.word	0x10003198
1a002424:	100032bc 	.word	0x100032bc
1a002428:	100031c4 	.word	0x100031c4
1a00242c:	10003268 	.word	0x10003268
1a002430:	1a004860 	.word	0x1a004860

1a002434 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a002434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002438:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00243a:	b941      	cbnz	r1, 1a00244e <prvInitialiseNewTimer+0x1a>
1a00243c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002440:	f383 8811 	msr	BASEPRI, r3
1a002444:	f3bf 8f6f 	isb	sy
1a002448:	f3bf 8f4f 	dsb	sy
1a00244c:	e7fe      	b.n	1a00244c <prvInitialiseNewTimer+0x18>
1a00244e:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a002450:	b174      	cbz	r4, 1a002470 <prvInitialiseNewTimer+0x3c>
1a002452:	461d      	mov	r5, r3
1a002454:	4616      	mov	r6, r2
1a002456:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a002458:	f7ff ffb6 	bl	1a0023c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a00245c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002460:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002462:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002464:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002466:	9b06      	ldr	r3, [sp, #24]
1a002468:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a00246a:	1d20      	adds	r0, r4, #4
1a00246c:	f7ff f918 	bl	1a0016a0 <vListInitialiseItem>
1a002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a002474:	b510      	push	{r4, lr}
1a002476:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a002478:	f7ff ffa6 	bl	1a0023c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a00247c:	4b15      	ldr	r3, [pc, #84]	; (1a0024d4 <xTimerCreateTimerTask+0x60>)
1a00247e:	681b      	ldr	r3, [r3, #0]
1a002480:	b1d3      	cbz	r3, 1a0024b8 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002482:	2400      	movs	r4, #0
1a002484:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002486:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002488:	a805      	add	r0, sp, #20
1a00248a:	a906      	add	r1, sp, #24
1a00248c:	aa07      	add	r2, sp, #28
1a00248e:	f7ff f951 	bl	1a001734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002492:	2304      	movs	r3, #4
1a002494:	9300      	str	r3, [sp, #0]
1a002496:	9b06      	ldr	r3, [sp, #24]
1a002498:	9301      	str	r3, [sp, #4]
1a00249a:	9b05      	ldr	r3, [sp, #20]
1a00249c:	9302      	str	r3, [sp, #8]
1a00249e:	480e      	ldr	r0, [pc, #56]	; (1a0024d8 <xTimerCreateTimerTask+0x64>)
1a0024a0:	490e      	ldr	r1, [pc, #56]	; (1a0024dc <xTimerCreateTimerTask+0x68>)
1a0024a2:	9a07      	ldr	r2, [sp, #28]
1a0024a4:	4623      	mov	r3, r4
1a0024a6:	f7ff fadf 	bl	1a001a68 <xTaskCreateStatic>
1a0024aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0024e0 <xTimerCreateTimerTask+0x6c>)
1a0024ac:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a0024ae:	b908      	cbnz	r0, 1a0024b4 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a0024b0:	4620      	mov	r0, r4
1a0024b2:	e002      	b.n	1a0024ba <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
1a0024b4:	2001      	movs	r0, #1
1a0024b6:	e000      	b.n	1a0024ba <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a0024b8:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1a0024ba:	b940      	cbnz	r0, 1a0024ce <xTimerCreateTimerTask+0x5a>
1a0024bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c0:	f383 8811 	msr	BASEPRI, r3
1a0024c4:	f3bf 8f6f 	isb	sy
1a0024c8:	f3bf 8f4f 	dsb	sy
1a0024cc:	e7fe      	b.n	1a0024cc <xTimerCreateTimerTask+0x58>
	return xReturn;
}
1a0024ce:	b008      	add	sp, #32
1a0024d0:	bd10      	pop	{r4, pc}
1a0024d2:	bf00      	nop
1a0024d4:	100032b8 	.word	0x100032b8
1a0024d8:	1a002821 	.word	0x1a002821
1a0024dc:	1a004868 	.word	0x1a004868
1a0024e0:	100032c0 	.word	0x100032c0

1a0024e4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
1a0024e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0024e8:	b082      	sub	sp, #8
1a0024ea:	4680      	mov	r8, r0
1a0024ec:	460f      	mov	r7, r1
1a0024ee:	4616      	mov	r6, r2
1a0024f0:	461d      	mov	r5, r3
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a0024f2:	2030      	movs	r0, #48	; 0x30
1a0024f4:	f7fe fb6c 	bl	1a000bd0 <pvPortMalloc>

		if( pxNewTimer != NULL )
1a0024f8:	4604      	mov	r4, r0
1a0024fa:	b158      	cbz	r0, 1a002514 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0024fc:	9b08      	ldr	r3, [sp, #32]
1a0024fe:	9300      	str	r3, [sp, #0]
1a002500:	9001      	str	r0, [sp, #4]
1a002502:	4640      	mov	r0, r8
1a002504:	4639      	mov	r1, r7
1a002506:	4632      	mov	r2, r6
1a002508:	462b      	mov	r3, r5
1a00250a:	f7ff ff93 	bl	1a002434 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a00250e:	2300      	movs	r3, #0
1a002510:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a002514:	4620      	mov	r0, r4
1a002516:	b002      	add	sp, #8
1a002518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00251c <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a00251c:	b530      	push	{r4, r5, lr}
1a00251e:	b085      	sub	sp, #20
1a002520:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002522:	2530      	movs	r5, #48	; 0x30
1a002524:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002526:	9d03      	ldr	r5, [sp, #12]
1a002528:	2d30      	cmp	r5, #48	; 0x30
1a00252a:	d008      	beq.n	1a00253e <xTimerCreateStatic+0x22>
1a00252c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002530:	f383 8811 	msr	BASEPRI, r3
1a002534:	f3bf 8f6f 	isb	sy
1a002538:	f3bf 8f4f 	dsb	sy
1a00253c:	e7fe      	b.n	1a00253c <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a00253e:	b944      	cbnz	r4, 1a002552 <xTimerCreateStatic+0x36>
1a002540:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002544:	f383 8811 	msr	BASEPRI, r3
1a002548:	f3bf 8f6f 	isb	sy
1a00254c:	f3bf 8f4f 	dsb	sy
1a002550:	e7fe      	b.n	1a002550 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
1a002552:	b13c      	cbz	r4, 1a002564 <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002554:	9d08      	ldr	r5, [sp, #32]
1a002556:	9500      	str	r5, [sp, #0]
1a002558:	9401      	str	r4, [sp, #4]
1a00255a:	f7ff ff6b 	bl	1a002434 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00255e:	2301      	movs	r3, #1
1a002560:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a002564:	4620      	mov	r0, r4
1a002566:	b005      	add	sp, #20
1a002568:	bd30      	pop	{r4, r5, pc}
1a00256a:	bf00      	nop

1a00256c <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a00256c:	b940      	cbnz	r0, 1a002580 <xTimerGenericCommand+0x14>
1a00256e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002572:	f383 8811 	msr	BASEPRI, r3
1a002576:	f3bf 8f6f 	isb	sy
1a00257a:	f3bf 8f4f 	dsb	sy
1a00257e:	e7fe      	b.n	1a00257e <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a002580:	b530      	push	{r4, r5, lr}
1a002582:	b085      	sub	sp, #20
1a002584:	4615      	mov	r5, r2
1a002586:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a002588:	4a12      	ldr	r2, [pc, #72]	; (1a0025d4 <xTimerGenericCommand+0x68>)
1a00258a:	6810      	ldr	r0, [r2, #0]
1a00258c:	b1f0      	cbz	r0, 1a0025cc <xTimerGenericCommand+0x60>
1a00258e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a002590:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002592:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002594:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002596:	2905      	cmp	r1, #5
1a002598:	dc13      	bgt.n	1a0025c2 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a00259a:	f7ff fda1 	bl	1a0020e0 <xTaskGetSchedulerState>
1a00259e:	2802      	cmp	r0, #2
1a0025a0:	d107      	bne.n	1a0025b2 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0025a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0025d4 <xTimerGenericCommand+0x68>)
1a0025a4:	6818      	ldr	r0, [r3, #0]
1a0025a6:	4669      	mov	r1, sp
1a0025a8:	9a08      	ldr	r2, [sp, #32]
1a0025aa:	2300      	movs	r3, #0
1a0025ac:	f7fe fcca 	bl	1a000f44 <xQueueGenericSend>
1a0025b0:	e00d      	b.n	1a0025ce <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0025b2:	4b08      	ldr	r3, [pc, #32]	; (1a0025d4 <xTimerGenericCommand+0x68>)
1a0025b4:	6818      	ldr	r0, [r3, #0]
1a0025b6:	4669      	mov	r1, sp
1a0025b8:	2200      	movs	r2, #0
1a0025ba:	4613      	mov	r3, r2
1a0025bc:	f7fe fcc2 	bl	1a000f44 <xQueueGenericSend>
1a0025c0:	e005      	b.n	1a0025ce <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0025c2:	4669      	mov	r1, sp
1a0025c4:	2300      	movs	r3, #0
1a0025c6:	f7fe fd85 	bl	1a0010d4 <xQueueGenericSendFromISR>
1a0025ca:	e000      	b.n	1a0025ce <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a0025cc:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a0025ce:	b005      	add	sp, #20
1a0025d0:	bd30      	pop	{r4, r5, pc}
1a0025d2:	bf00      	nop
1a0025d4:	100032b8 	.word	0x100032b8

1a0025d8 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a0025d8:	b570      	push	{r4, r5, r6, lr}
1a0025da:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0025dc:	e029      	b.n	1a002632 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025de:	68db      	ldr	r3, [r3, #12]
1a0025e0:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025e2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0025e4:	1d25      	adds	r5, r4, #4
1a0025e6:	4628      	mov	r0, r5
1a0025e8:	f7ff f884 	bl	1a0016f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025ee:	4620      	mov	r0, r4
1a0025f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025f2:	69e3      	ldr	r3, [r4, #28]
1a0025f4:	2b01      	cmp	r3, #1
1a0025f6:	d11c      	bne.n	1a002632 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0025f8:	69a3      	ldr	r3, [r4, #24]
1a0025fa:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0025fc:	42b3      	cmp	r3, r6
1a0025fe:	d907      	bls.n	1a002610 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002600:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002602:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002604:	4b11      	ldr	r3, [pc, #68]	; (1a00264c <prvSwitchTimerLists+0x74>)
1a002606:	6818      	ldr	r0, [r3, #0]
1a002608:	4629      	mov	r1, r5
1a00260a:	f7ff f859 	bl	1a0016c0 <vListInsert>
1a00260e:	e010      	b.n	1a002632 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002610:	2300      	movs	r3, #0
1a002612:	9300      	str	r3, [sp, #0]
1a002614:	4620      	mov	r0, r4
1a002616:	4619      	mov	r1, r3
1a002618:	4632      	mov	r2, r6
1a00261a:	f7ff ffa7 	bl	1a00256c <xTimerGenericCommand>
				configASSERT( xResult );
1a00261e:	b940      	cbnz	r0, 1a002632 <prvSwitchTimerLists+0x5a>
1a002620:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002624:	f383 8811 	msr	BASEPRI, r3
1a002628:	f3bf 8f6f 	isb	sy
1a00262c:	f3bf 8f4f 	dsb	sy
1a002630:	e7fe      	b.n	1a002630 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002632:	4b06      	ldr	r3, [pc, #24]	; (1a00264c <prvSwitchTimerLists+0x74>)
1a002634:	681b      	ldr	r3, [r3, #0]
1a002636:	681a      	ldr	r2, [r3, #0]
1a002638:	2a00      	cmp	r2, #0
1a00263a:	d1d0      	bne.n	1a0025de <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a00263c:	4a04      	ldr	r2, [pc, #16]	; (1a002650 <prvSwitchTimerLists+0x78>)
1a00263e:	6810      	ldr	r0, [r2, #0]
1a002640:	4902      	ldr	r1, [pc, #8]	; (1a00264c <prvSwitchTimerLists+0x74>)
1a002642:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002644:	6013      	str	r3, [r2, #0]
}
1a002646:	b002      	add	sp, #8
1a002648:	bd70      	pop	{r4, r5, r6, pc}
1a00264a:	bf00      	nop
1a00264c:	10003198 	.word	0x10003198
1a002650:	100032bc 	.word	0x100032bc

1a002654 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a002654:	b538      	push	{r3, r4, r5, lr}
1a002656:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a002658:	f7ff fad0 	bl	1a001bfc <xTaskGetTickCount>
1a00265c:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a00265e:	4b07      	ldr	r3, [pc, #28]	; (1a00267c <prvSampleTimeNow+0x28>)
1a002660:	681b      	ldr	r3, [r3, #0]
1a002662:	4298      	cmp	r0, r3
1a002664:	d204      	bcs.n	1a002670 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
1a002666:	f7ff ffb7 	bl	1a0025d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00266a:	2301      	movs	r3, #1
1a00266c:	602b      	str	r3, [r5, #0]
1a00266e:	e001      	b.n	1a002674 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a002670:	2300      	movs	r3, #0
1a002672:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a002674:	4b01      	ldr	r3, [pc, #4]	; (1a00267c <prvSampleTimeNow+0x28>)
1a002676:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a002678:	4620      	mov	r0, r4
1a00267a:	bd38      	pop	{r3, r4, r5, pc}
1a00267c:	10003264 	.word	0x10003264

1a002680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a002680:	b570      	push	{r4, r5, r6, lr}
1a002682:	b082      	sub	sp, #8
1a002684:	4605      	mov	r5, r0
1a002686:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002688:	4b13      	ldr	r3, [pc, #76]	; (1a0026d8 <prvProcessExpiredTimer+0x58>)
1a00268a:	681b      	ldr	r3, [r3, #0]
1a00268c:	68db      	ldr	r3, [r3, #12]
1a00268e:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002690:	1d20      	adds	r0, r4, #4
1a002692:	f7ff f82f 	bl	1a0016f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002696:	69e3      	ldr	r3, [r4, #28]
1a002698:	2b01      	cmp	r3, #1
1a00269a:	d118      	bne.n	1a0026ce <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00269c:	69a1      	ldr	r1, [r4, #24]
1a00269e:	4620      	mov	r0, r4
1a0026a0:	4429      	add	r1, r5
1a0026a2:	4632      	mov	r2, r6
1a0026a4:	462b      	mov	r3, r5
1a0026a6:	f7ff fe6b 	bl	1a002380 <prvInsertTimerInActiveList>
1a0026aa:	b180      	cbz	r0, 1a0026ce <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0026ac:	2300      	movs	r3, #0
1a0026ae:	9300      	str	r3, [sp, #0]
1a0026b0:	4620      	mov	r0, r4
1a0026b2:	4619      	mov	r1, r3
1a0026b4:	462a      	mov	r2, r5
1a0026b6:	f7ff ff59 	bl	1a00256c <xTimerGenericCommand>
			configASSERT( xResult );
1a0026ba:	b940      	cbnz	r0, 1a0026ce <prvProcessExpiredTimer+0x4e>
1a0026bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026c0:	f383 8811 	msr	BASEPRI, r3
1a0026c4:	f3bf 8f6f 	isb	sy
1a0026c8:	f3bf 8f4f 	dsb	sy
1a0026cc:	e7fe      	b.n	1a0026cc <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026d0:	4620      	mov	r0, r4
1a0026d2:	4798      	blx	r3
}
1a0026d4:	b002      	add	sp, #8
1a0026d6:	bd70      	pop	{r4, r5, r6, pc}
1a0026d8:	10003198 	.word	0x10003198

1a0026dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a0026dc:	b570      	push	{r4, r5, r6, lr}
1a0026de:	b082      	sub	sp, #8
1a0026e0:	4606      	mov	r6, r0
1a0026e2:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a0026e4:	f7ff fa82 	bl	1a001bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0026e8:	a801      	add	r0, sp, #4
1a0026ea:	f7ff ffb3 	bl	1a002654 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0026ee:	9b01      	ldr	r3, [sp, #4]
1a0026f0:	bb1b      	cbnz	r3, 1a00273a <prvProcessTimerOrBlockTask+0x5e>
1a0026f2:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0026f4:	b944      	cbnz	r4, 1a002708 <prvProcessTimerOrBlockTask+0x2c>
1a0026f6:	4286      	cmp	r6, r0
1a0026f8:	d806      	bhi.n	1a002708 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
1a0026fa:	f7ff fb1f 	bl	1a001d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0026fe:	4630      	mov	r0, r6
1a002700:	4629      	mov	r1, r5
1a002702:	f7ff ffbd 	bl	1a002680 <prvProcessExpiredTimer>
1a002706:	e01a      	b.n	1a00273e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a002708:	b12c      	cbz	r4, 1a002716 <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00270a:	4b0e      	ldr	r3, [pc, #56]	; (1a002744 <prvProcessTimerOrBlockTask+0x68>)
1a00270c:	681b      	ldr	r3, [r3, #0]
1a00270e:	681c      	ldr	r4, [r3, #0]
1a002710:	fab4 f484 	clz	r4, r4
1a002714:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002716:	4b0c      	ldr	r3, [pc, #48]	; (1a002748 <prvProcessTimerOrBlockTask+0x6c>)
1a002718:	6818      	ldr	r0, [r3, #0]
1a00271a:	1b71      	subs	r1, r6, r5
1a00271c:	4622      	mov	r2, r4
1a00271e:	f7fe ff8d 	bl	1a00163c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a002722:	f7ff fb0b 	bl	1a001d3c <xTaskResumeAll>
1a002726:	b950      	cbnz	r0, 1a00273e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a002728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00272c:	4b07      	ldr	r3, [pc, #28]	; (1a00274c <prvProcessTimerOrBlockTask+0x70>)
1a00272e:	601a      	str	r2, [r3, #0]
1a002730:	f3bf 8f4f 	dsb	sy
1a002734:	f3bf 8f6f 	isb	sy
1a002738:	e001      	b.n	1a00273e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a00273a:	f7ff faff 	bl	1a001d3c <xTaskResumeAll>
		}
	}
}
1a00273e:	b002      	add	sp, #8
1a002740:	bd70      	pop	{r4, r5, r6, pc}
1a002742:	bf00      	nop
1a002744:	100032bc 	.word	0x100032bc
1a002748:	100032b8 	.word	0x100032b8
1a00274c:	e000ed04 	.word	0xe000ed04

1a002750 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a002750:	b530      	push	{r4, r5, lr}
1a002752:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002754:	e057      	b.n	1a002806 <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002756:	9b04      	ldr	r3, [sp, #16]
1a002758:	2b00      	cmp	r3, #0
1a00275a:	da03      	bge.n	1a002764 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00275c:	9806      	ldr	r0, [sp, #24]
1a00275e:	9907      	ldr	r1, [sp, #28]
1a002760:	9b05      	ldr	r3, [sp, #20]
1a002762:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002764:	9b04      	ldr	r3, [sp, #16]
1a002766:	2b00      	cmp	r3, #0
1a002768:	db4d      	blt.n	1a002806 <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00276a:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00276c:	6963      	ldr	r3, [r4, #20]
1a00276e:	b113      	cbz	r3, 1a002776 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002770:	1d20      	adds	r0, r4, #4
1a002772:	f7fe ffbf 	bl	1a0016f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002776:	a803      	add	r0, sp, #12
1a002778:	f7ff ff6c 	bl	1a002654 <prvSampleTimeNow>
1a00277c:	4603      	mov	r3, r0

			switch( xMessage.xMessageID )
1a00277e:	9a04      	ldr	r2, [sp, #16]
1a002780:	2a09      	cmp	r2, #9
1a002782:	d840      	bhi.n	1a002806 <prvProcessReceivedCommands+0xb6>
1a002784:	e8df f002 	tbb	[pc, r2]
1a002788:	3f050505 	.word	0x3f050505
1a00278c:	05053927 	.word	0x05053927
1a002790:	273f      	.short	0x273f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002792:	9d05      	ldr	r5, [sp, #20]
1a002794:	69a1      	ldr	r1, [r4, #24]
1a002796:	4620      	mov	r0, r4
1a002798:	4429      	add	r1, r5
1a00279a:	461a      	mov	r2, r3
1a00279c:	462b      	mov	r3, r5
1a00279e:	f7ff fdef 	bl	1a002380 <prvInsertTimerInActiveList>
1a0027a2:	b380      	cbz	r0, 1a002806 <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0027a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0027a6:	4620      	mov	r0, r4
1a0027a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0027aa:	69e3      	ldr	r3, [r4, #28]
1a0027ac:	2b01      	cmp	r3, #1
1a0027ae:	d12a      	bne.n	1a002806 <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0027b0:	69a2      	ldr	r2, [r4, #24]
1a0027b2:	2300      	movs	r3, #0
1a0027b4:	9300      	str	r3, [sp, #0]
1a0027b6:	4620      	mov	r0, r4
1a0027b8:	4619      	mov	r1, r3
1a0027ba:	9c05      	ldr	r4, [sp, #20]
1a0027bc:	4422      	add	r2, r4
1a0027be:	f7ff fed5 	bl	1a00256c <xTimerGenericCommand>
							configASSERT( xResult );
1a0027c2:	bb00      	cbnz	r0, 1a002806 <prvProcessReceivedCommands+0xb6>
1a0027c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027c8:	f383 8811 	msr	BASEPRI, r3
1a0027cc:	f3bf 8f6f 	isb	sy
1a0027d0:	f3bf 8f4f 	dsb	sy
1a0027d4:	e7fe      	b.n	1a0027d4 <prvProcessReceivedCommands+0x84>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0027d6:	9905      	ldr	r1, [sp, #20]
1a0027d8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0027da:	b941      	cbnz	r1, 1a0027ee <prvProcessReceivedCommands+0x9e>
1a0027dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027e0:	f383 8811 	msr	BASEPRI, r3
1a0027e4:	f3bf 8f6f 	isb	sy
1a0027e8:	f3bf 8f4f 	dsb	sy
1a0027ec:	e7fe      	b.n	1a0027ec <prvProcessReceivedCommands+0x9c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a0027ee:	4620      	mov	r0, r4
1a0027f0:	4419      	add	r1, r3
1a0027f2:	461a      	mov	r2, r3
1a0027f4:	f7ff fdc4 	bl	1a002380 <prvInsertTimerInActiveList>
					break;
1a0027f8:	e005      	b.n	1a002806 <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0027fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0027fe:	b913      	cbnz	r3, 1a002806 <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
1a002800:	4620      	mov	r0, r4
1a002802:	f7fe fa17 	bl	1a000c34 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002806:	4b05      	ldr	r3, [pc, #20]	; (1a00281c <prvProcessReceivedCommands+0xcc>)
1a002808:	6818      	ldr	r0, [r3, #0]
1a00280a:	a904      	add	r1, sp, #16
1a00280c:	2200      	movs	r2, #0
1a00280e:	f7fe fd31 	bl	1a001274 <xQueueReceive>
1a002812:	2800      	cmp	r0, #0
1a002814:	d19f      	bne.n	1a002756 <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a002816:	b009      	add	sp, #36	; 0x24
1a002818:	bd30      	pop	{r4, r5, pc}
1a00281a:	bf00      	nop
1a00281c:	100032b8 	.word	0x100032b8

1a002820 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a002820:	b500      	push	{lr}
1a002822:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002824:	a801      	add	r0, sp, #4
1a002826:	f7ff fd9b 	bl	1a002360 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00282a:	9901      	ldr	r1, [sp, #4]
1a00282c:	f7ff ff56 	bl	1a0026dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a002830:	f7ff ff8e 	bl	1a002750 <prvProcessReceivedCommands>
	}
1a002834:	e7f6      	b.n	1a002824 <prvTimerTask+0x4>
1a002836:	bf00      	nop

1a002838 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002838:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00283a:	2300      	movs	r3, #0
1a00283c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00283e:	4b0d      	ldr	r3, [pc, #52]	; (1a002874 <prvTaskExitError+0x3c>)
1a002840:	681b      	ldr	r3, [r3, #0]
1a002842:	f1b3 3fff 	cmp.w	r3, #4294967295
1a002846:	d008      	beq.n	1a00285a <prvTaskExitError+0x22>
1a002848:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00284c:	f383 8811 	msr	BASEPRI, r3
1a002850:	f3bf 8f6f 	isb	sy
1a002854:	f3bf 8f4f 	dsb	sy
1a002858:	e7fe      	b.n	1a002858 <prvTaskExitError+0x20>
1a00285a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00285e:	f383 8811 	msr	BASEPRI, r3
1a002862:	f3bf 8f6f 	isb	sy
1a002866:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00286a:	9b01      	ldr	r3, [sp, #4]
1a00286c:	2b00      	cmp	r3, #0
1a00286e:	d0fc      	beq.n	1a00286a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002870:	b002      	add	sp, #8
1a002872:	4770      	bx	lr
1a002874:	10000004 	.word	0x10000004

1a002878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002878:	4808      	ldr	r0, [pc, #32]	; (1a00289c <prvPortStartFirstTask+0x24>)
1a00287a:	6800      	ldr	r0, [r0, #0]
1a00287c:	6800      	ldr	r0, [r0, #0]
1a00287e:	f380 8808 	msr	MSP, r0
1a002882:	f04f 0000 	mov.w	r0, #0
1a002886:	f380 8814 	msr	CONTROL, r0
1a00288a:	b662      	cpsie	i
1a00288c:	b661      	cpsie	f
1a00288e:	f3bf 8f4f 	dsb	sy
1a002892:	f3bf 8f6f 	isb	sy
1a002896:	df00      	svc	0
1a002898:	bf00      	nop
1a00289a:	0000      	.short	0x0000
1a00289c:	e000ed08 	.word	0xe000ed08

1a0028a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0028a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0028b0 <vPortEnableVFP+0x10>
1a0028a4:	6801      	ldr	r1, [r0, #0]
1a0028a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0028aa:	6001      	str	r1, [r0, #0]
1a0028ac:	4770      	bx	lr
1a0028ae:	0000      	.short	0x0000
1a0028b0:	e000ed88 	.word	0xe000ed88

1a0028b4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0028b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0028b8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0028bc:	f021 0101 	bic.w	r1, r1, #1
1a0028c0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0028c4:	4b05      	ldr	r3, [pc, #20]	; (1a0028dc <pxPortInitialiseStack+0x28>)
1a0028c6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0028ca:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0028ce:	f06f 0302 	mvn.w	r3, #2
1a0028d2:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a0028d6:	3844      	subs	r0, #68	; 0x44
1a0028d8:	4770      	bx	lr
1a0028da:	bf00      	nop
1a0028dc:	1a002839 	.word	0x1a002839

1a0028e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a0028e0:	4b07      	ldr	r3, [pc, #28]	; (1a002900 <pxCurrentTCBConst2>)
1a0028e2:	6819      	ldr	r1, [r3, #0]
1a0028e4:	6808      	ldr	r0, [r1, #0]
1a0028e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028ea:	f380 8809 	msr	PSP, r0
1a0028ee:	f3bf 8f6f 	isb	sy
1a0028f2:	f04f 0000 	mov.w	r0, #0
1a0028f6:	f380 8811 	msr	BASEPRI, r0
1a0028fa:	4770      	bx	lr
1a0028fc:	f3af 8000 	nop.w

1a002900 <pxCurrentTCBConst2>:
1a002900:	1000312c 	.word	0x1000312c
1a002904:	f3af 8000 	nop.w
1a002908:	f3af 8000 	nop.w
1a00290c:	f3af 8000 	nop.w

1a002910 <vPortEnterCritical>:
1a002910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002914:	f383 8811 	msr	BASEPRI, r3
1a002918:	f3bf 8f6f 	isb	sy
1a00291c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a002920:	4a0a      	ldr	r2, [pc, #40]	; (1a00294c <vPortEnterCritical+0x3c>)
1a002922:	6813      	ldr	r3, [r2, #0]
1a002924:	3301      	adds	r3, #1
1a002926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a002928:	2b01      	cmp	r3, #1
1a00292a:	d10d      	bne.n	1a002948 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a00292c:	4b08      	ldr	r3, [pc, #32]	; (1a002950 <vPortEnterCritical+0x40>)
1a00292e:	681b      	ldr	r3, [r3, #0]
1a002930:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002934:	d008      	beq.n	1a002948 <vPortEnterCritical+0x38>
1a002936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00293a:	f383 8811 	msr	BASEPRI, r3
1a00293e:	f3bf 8f6f 	isb	sy
1a002942:	f3bf 8f4f 	dsb	sy
1a002946:	e7fe      	b.n	1a002946 <vPortEnterCritical+0x36>
1a002948:	4770      	bx	lr
1a00294a:	bf00      	nop
1a00294c:	10000004 	.word	0x10000004
1a002950:	e000ed04 	.word	0xe000ed04

1a002954 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a002954:	4b09      	ldr	r3, [pc, #36]	; (1a00297c <vPortExitCritical+0x28>)
1a002956:	681b      	ldr	r3, [r3, #0]
1a002958:	b943      	cbnz	r3, 1a00296c <vPortExitCritical+0x18>
1a00295a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00295e:	f383 8811 	msr	BASEPRI, r3
1a002962:	f3bf 8f6f 	isb	sy
1a002966:	f3bf 8f4f 	dsb	sy
1a00296a:	e7fe      	b.n	1a00296a <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a00296c:	3b01      	subs	r3, #1
1a00296e:	4a03      	ldr	r2, [pc, #12]	; (1a00297c <vPortExitCritical+0x28>)
1a002970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002972:	b90b      	cbnz	r3, 1a002978 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002974:	f383 8811 	msr	BASEPRI, r3
1a002978:	4770      	bx	lr
1a00297a:	bf00      	nop
1a00297c:	10000004 	.word	0x10000004

1a002980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a002980:	f3ef 8009 	mrs	r0, PSP
1a002984:	f3bf 8f6f 	isb	sy
1a002988:	4b15      	ldr	r3, [pc, #84]	; (1a0029e0 <pxCurrentTCBConst>)
1a00298a:	681a      	ldr	r2, [r3, #0]
1a00298c:	f01e 0f10 	tst.w	lr, #16
1a002990:	bf08      	it	eq
1a002992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00299a:	6010      	str	r0, [r2, #0]
1a00299c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0029a0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0029a4:	f380 8811 	msr	BASEPRI, r0
1a0029a8:	f3bf 8f4f 	dsb	sy
1a0029ac:	f3bf 8f6f 	isb	sy
1a0029b0:	f7ff fa68 	bl	1a001e84 <vTaskSwitchContext>
1a0029b4:	f04f 0000 	mov.w	r0, #0
1a0029b8:	f380 8811 	msr	BASEPRI, r0
1a0029bc:	bc09      	pop	{r0, r3}
1a0029be:	6819      	ldr	r1, [r3, #0]
1a0029c0:	6808      	ldr	r0, [r1, #0]
1a0029c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0029c6:	f01e 0f10 	tst.w	lr, #16
1a0029ca:	bf08      	it	eq
1a0029cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0029d0:	f380 8809 	msr	PSP, r0
1a0029d4:	f3bf 8f6f 	isb	sy
1a0029d8:	4770      	bx	lr
1a0029da:	bf00      	nop
1a0029dc:	f3af 8000 	nop.w

1a0029e0 <pxCurrentTCBConst>:
1a0029e0:	1000312c 	.word	0x1000312c
1a0029e4:	f3af 8000 	nop.w
1a0029e8:	f3af 8000 	nop.w
1a0029ec:	f3af 8000 	nop.w

1a0029f0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a0029f0:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0029f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029f6:	f383 8811 	msr	BASEPRI, r3
1a0029fa:	f3bf 8f6f 	isb	sy
1a0029fe:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a002a02:	f7ff f909 	bl	1a001c18 <xTaskIncrementTick>
1a002a06:	b118      	cbz	r0, 1a002a10 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a0c:	4b02      	ldr	r3, [pc, #8]	; (1a002a18 <SysTick_Handler+0x28>)
1a002a0e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002a10:	2300      	movs	r3, #0
1a002a12:	f383 8811 	msr	BASEPRI, r3
1a002a16:	bd08      	pop	{r3, pc}
1a002a18:	e000ed04 	.word	0xe000ed04

1a002a1c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002a1c:	4a08      	ldr	r2, [pc, #32]	; (1a002a40 <vPortSetupTimerInterrupt+0x24>)
1a002a1e:	2300      	movs	r3, #0
1a002a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002a22:	4908      	ldr	r1, [pc, #32]	; (1a002a44 <vPortSetupTimerInterrupt+0x28>)
1a002a24:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002a26:	4b08      	ldr	r3, [pc, #32]	; (1a002a48 <vPortSetupTimerInterrupt+0x2c>)
1a002a28:	681b      	ldr	r3, [r3, #0]
1a002a2a:	4908      	ldr	r1, [pc, #32]	; (1a002a4c <vPortSetupTimerInterrupt+0x30>)
1a002a2c:	fba1 1303 	umull	r1, r3, r1, r3
1a002a30:	099b      	lsrs	r3, r3, #6
1a002a32:	3b01      	subs	r3, #1
1a002a34:	4906      	ldr	r1, [pc, #24]	; (1a002a50 <vPortSetupTimerInterrupt+0x34>)
1a002a36:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002a38:	2307      	movs	r3, #7
1a002a3a:	6013      	str	r3, [r2, #0]
1a002a3c:	4770      	bx	lr
1a002a3e:	bf00      	nop
1a002a40:	e000e010 	.word	0xe000e010
1a002a44:	e000e018 	.word	0xe000e018
1a002a48:	1000339c 	.word	0x1000339c
1a002a4c:	10624dd3 	.word	0x10624dd3
1a002a50:	e000e014 	.word	0xe000e014

1a002a54 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002a54:	4b40      	ldr	r3, [pc, #256]	; (1a002b58 <xPortStartScheduler+0x104>)
1a002a56:	681a      	ldr	r2, [r3, #0]
1a002a58:	4b40      	ldr	r3, [pc, #256]	; (1a002b5c <xPortStartScheduler+0x108>)
1a002a5a:	429a      	cmp	r2, r3
1a002a5c:	d108      	bne.n	1a002a70 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002a5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a62:	f383 8811 	msr	BASEPRI, r3
1a002a66:	f3bf 8f6f 	isb	sy
1a002a6a:	f3bf 8f4f 	dsb	sy
1a002a6e:	e7fe      	b.n	1a002a6e <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002a70:	4b39      	ldr	r3, [pc, #228]	; (1a002b58 <xPortStartScheduler+0x104>)
1a002a72:	681a      	ldr	r2, [r3, #0]
1a002a74:	4b3a      	ldr	r3, [pc, #232]	; (1a002b60 <xPortStartScheduler+0x10c>)
1a002a76:	429a      	cmp	r2, r3
1a002a78:	d108      	bne.n	1a002a8c <xPortStartScheduler+0x38>
1a002a7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a7e:	f383 8811 	msr	BASEPRI, r3
1a002a82:	f3bf 8f6f 	isb	sy
1a002a86:	f3bf 8f4f 	dsb	sy
1a002a8a:	e7fe      	b.n	1a002a8a <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a002a8c:	b510      	push	{r4, lr}
1a002a8e:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002a90:	4b34      	ldr	r3, [pc, #208]	; (1a002b64 <xPortStartScheduler+0x110>)
1a002a92:	781a      	ldrb	r2, [r3, #0]
1a002a94:	b2d2      	uxtb	r2, r2
1a002a96:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002a98:	22ff      	movs	r2, #255	; 0xff
1a002a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002a9c:	781b      	ldrb	r3, [r3, #0]
1a002a9e:	b2db      	uxtb	r3, r3
1a002aa0:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002aa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002aa8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002aac:	4a2e      	ldr	r2, [pc, #184]	; (1a002b68 <xPortStartScheduler+0x114>)
1a002aae:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002ab0:	2207      	movs	r2, #7
1a002ab2:	4b2e      	ldr	r3, [pc, #184]	; (1a002b6c <xPortStartScheduler+0x118>)
1a002ab4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002ab6:	e009      	b.n	1a002acc <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a002ab8:	4a2c      	ldr	r2, [pc, #176]	; (1a002b6c <xPortStartScheduler+0x118>)
1a002aba:	6813      	ldr	r3, [r2, #0]
1a002abc:	3b01      	subs	r3, #1
1a002abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002ac0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002ac4:	005b      	lsls	r3, r3, #1
1a002ac6:	b2db      	uxtb	r3, r3
1a002ac8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002acc:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ad4:	d1f0      	bne.n	1a002ab8 <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002ad6:	4b25      	ldr	r3, [pc, #148]	; (1a002b6c <xPortStartScheduler+0x118>)
1a002ad8:	681b      	ldr	r3, [r3, #0]
1a002ada:	f1c3 0207 	rsb	r2, r3, #7
1a002ade:	2a03      	cmp	r2, #3
1a002ae0:	d008      	beq.n	1a002af4 <xPortStartScheduler+0xa0>
1a002ae2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae6:	f383 8811 	msr	BASEPRI, r3
1a002aea:	f3bf 8f6f 	isb	sy
1a002aee:	f3bf 8f4f 	dsb	sy
1a002af2:	e7fe      	b.n	1a002af2 <xPortStartScheduler+0x9e>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a002af4:	2a03      	cmp	r2, #3
1a002af6:	d008      	beq.n	1a002b0a <xPortStartScheduler+0xb6>
1a002af8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002afc:	f383 8811 	msr	BASEPRI, r3
1a002b00:	f3bf 8f6f 	isb	sy
1a002b04:	f3bf 8f4f 	dsb	sy
1a002b08:	e7fe      	b.n	1a002b08 <xPortStartScheduler+0xb4>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002b0a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002b10:	4a16      	ldr	r2, [pc, #88]	; (1a002b6c <xPortStartScheduler+0x118>)
1a002b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002b14:	9b01      	ldr	r3, [sp, #4]
1a002b16:	b2db      	uxtb	r3, r3
1a002b18:	4a12      	ldr	r2, [pc, #72]	; (1a002b64 <xPortStartScheduler+0x110>)
1a002b1a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002b1c:	4b14      	ldr	r3, [pc, #80]	; (1a002b70 <xPortStartScheduler+0x11c>)
1a002b1e:	681a      	ldr	r2, [r3, #0]
1a002b20:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002b26:	681a      	ldr	r2, [r3, #0]
1a002b28:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002b2c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a002b2e:	f7ff ff75 	bl	1a002a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a002b32:	2400      	movs	r4, #0
1a002b34:	4b0f      	ldr	r3, [pc, #60]	; (1a002b74 <xPortStartScheduler+0x120>)
1a002b36:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a002b38:	f7ff feb2 	bl	1a0028a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002b3c:	4a0e      	ldr	r2, [pc, #56]	; (1a002b78 <xPortStartScheduler+0x124>)
1a002b3e:	6813      	ldr	r3, [r2, #0]
1a002b40:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002b44:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a002b46:	f7ff fe97 	bl	1a002878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a002b4a:	f7ff f99b 	bl	1a001e84 <vTaskSwitchContext>
	prvTaskExitError();
1a002b4e:	f7ff fe73 	bl	1a002838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a002b52:	4620      	mov	r0, r4
1a002b54:	b002      	add	sp, #8
1a002b56:	bd10      	pop	{r4, pc}
1a002b58:	e000ed00 	.word	0xe000ed00
1a002b5c:	410fc271 	.word	0x410fc271
1a002b60:	410fc270 	.word	0x410fc270
1a002b64:	e000e400 	.word	0xe000e400
1a002b68:	100032c4 	.word	0x100032c4
1a002b6c:	100032c8 	.word	0x100032c8
1a002b70:	e000ed20 	.word	0xe000ed20
1a002b74:	10000004 	.word	0x10000004
1a002b78:	e000ef34 	.word	0xe000ef34

1a002b7c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002b7c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002b80:	2b0f      	cmp	r3, #15
1a002b82:	d90f      	bls.n	1a002ba4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002b84:	4a10      	ldr	r2, [pc, #64]	; (1a002bc8 <vPortValidateInterruptPriority+0x4c>)
1a002b86:	5c9b      	ldrb	r3, [r3, r2]
1a002b88:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002b8a:	4a10      	ldr	r2, [pc, #64]	; (1a002bcc <vPortValidateInterruptPriority+0x50>)
1a002b8c:	7812      	ldrb	r2, [r2, #0]
1a002b8e:	4293      	cmp	r3, r2
1a002b90:	d208      	bcs.n	1a002ba4 <vPortValidateInterruptPriority+0x28>
1a002b92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b96:	f383 8811 	msr	BASEPRI, r3
1a002b9a:	f3bf 8f6f 	isb	sy
1a002b9e:	f3bf 8f4f 	dsb	sy
1a002ba2:	e7fe      	b.n	1a002ba2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ba4:	4b0a      	ldr	r3, [pc, #40]	; (1a002bd0 <vPortValidateInterruptPriority+0x54>)
1a002ba6:	681b      	ldr	r3, [r3, #0]
1a002ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002bac:	4a09      	ldr	r2, [pc, #36]	; (1a002bd4 <vPortValidateInterruptPriority+0x58>)
1a002bae:	6812      	ldr	r2, [r2, #0]
1a002bb0:	4293      	cmp	r3, r2
1a002bb2:	d908      	bls.n	1a002bc6 <vPortValidateInterruptPriority+0x4a>
1a002bb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bb8:	f383 8811 	msr	BASEPRI, r3
1a002bbc:	f3bf 8f6f 	isb	sy
1a002bc0:	f3bf 8f4f 	dsb	sy
1a002bc4:	e7fe      	b.n	1a002bc4 <vPortValidateInterruptPriority+0x48>
1a002bc6:	4770      	bx	lr
1a002bc8:	e000e3f0 	.word	0xe000e3f0
1a002bcc:	100032c4 	.word	0x100032c4
1a002bd0:	e000ed0c 	.word	0xe000ed0c
1a002bd4:	100032c8 	.word	0x100032c8

1a002bd8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002bd8:	4b04      	ldr	r3, [pc, #16]	; (1a002bec <cyclesCounterInit+0x14>)
1a002bda:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002bdc:	4b04      	ldr	r3, [pc, #16]	; (1a002bf0 <cyclesCounterInit+0x18>)
1a002bde:	681a      	ldr	r2, [r3, #0]
1a002be0:	6813      	ldr	r3, [r2, #0]
1a002be2:	f043 0301 	orr.w	r3, r3, #1
1a002be6:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002be8:	2001      	movs	r0, #1
1a002bea:	4770      	bx	lr
1a002bec:	1000000c 	.word	0x1000000c
1a002bf0:	10000008 	.word	0x10000008

1a002bf4 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002bf4:	b570      	push	{r4, r5, r6, lr}
1a002bf6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002bf8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002bfc:	009b      	lsls	r3, r3, #2
1a002bfe:	4a1e      	ldr	r2, [pc, #120]	; (1a002c78 <uartProcessIRQ+0x84>)
1a002c00:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002c02:	6975      	ldr	r5, [r6, #20]
1a002c04:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a002c06:	f015 0f01 	tst.w	r5, #1
1a002c0a:	d016      	beq.n	1a002c3a <uartProcessIRQ+0x46>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002c0c:	b928      	cbnz	r0, 1a002c1a <uartProcessIRQ+0x26>
1a002c0e:	4b1b      	ldr	r3, [pc, #108]	; (1a002c7c <uartProcessIRQ+0x88>)
1a002c10:	681b      	ldr	r3, [r3, #0]
1a002c12:	b113      	cbz	r3, 1a002c1a <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a002c14:	4a1a      	ldr	r2, [pc, #104]	; (1a002c80 <uartProcessIRQ+0x8c>)
1a002c16:	6810      	ldr	r0, [r2, #0]
1a002c18:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002c1a:	2c03      	cmp	r4, #3
1a002c1c:	d105      	bne.n	1a002c2a <uartProcessIRQ+0x36>
1a002c1e:	4b19      	ldr	r3, [pc, #100]	; (1a002c84 <uartProcessIRQ+0x90>)
1a002c20:	681b      	ldr	r3, [r3, #0]
1a002c22:	b113      	cbz	r3, 1a002c2a <uartProcessIRQ+0x36>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a002c24:	4a18      	ldr	r2, [pc, #96]	; (1a002c88 <uartProcessIRQ+0x94>)
1a002c26:	6810      	ldr	r0, [r2, #0]
1a002c28:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002c2a:	2c05      	cmp	r4, #5
1a002c2c:	d105      	bne.n	1a002c3a <uartProcessIRQ+0x46>
1a002c2e:	4b17      	ldr	r3, [pc, #92]	; (1a002c8c <uartProcessIRQ+0x98>)
1a002c30:	681b      	ldr	r3, [r3, #0]
1a002c32:	b113      	cbz	r3, 1a002c3a <uartProcessIRQ+0x46>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a002c34:	4a16      	ldr	r2, [pc, #88]	; (1a002c90 <uartProcessIRQ+0x9c>)
1a002c36:	6810      	ldr	r0, [r2, #0]
1a002c38:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002c3a:	f015 0f20 	tst.w	r5, #32
1a002c3e:	d01a      	beq.n	1a002c76 <uartProcessIRQ+0x82>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a002c40:	6873      	ldr	r3, [r6, #4]
1a002c42:	f013 0f02 	tst.w	r3, #2
1a002c46:	d016      	beq.n	1a002c76 <uartProcessIRQ+0x82>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002c48:	b92c      	cbnz	r4, 1a002c56 <uartProcessIRQ+0x62>
1a002c4a:	4b12      	ldr	r3, [pc, #72]	; (1a002c94 <uartProcessIRQ+0xa0>)
1a002c4c:	681b      	ldr	r3, [r3, #0]
1a002c4e:	b113      	cbz	r3, 1a002c56 <uartProcessIRQ+0x62>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a002c50:	4a11      	ldr	r2, [pc, #68]	; (1a002c98 <uartProcessIRQ+0xa4>)
1a002c52:	6810      	ldr	r0, [r2, #0]
1a002c54:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002c56:	2c03      	cmp	r4, #3
1a002c58:	d105      	bne.n	1a002c66 <uartProcessIRQ+0x72>
1a002c5a:	4b10      	ldr	r3, [pc, #64]	; (1a002c9c <uartProcessIRQ+0xa8>)
1a002c5c:	681b      	ldr	r3, [r3, #0]
1a002c5e:	b113      	cbz	r3, 1a002c66 <uartProcessIRQ+0x72>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a002c60:	4a0f      	ldr	r2, [pc, #60]	; (1a002ca0 <uartProcessIRQ+0xac>)
1a002c62:	6810      	ldr	r0, [r2, #0]
1a002c64:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002c66:	2c05      	cmp	r4, #5
1a002c68:	d105      	bne.n	1a002c76 <uartProcessIRQ+0x82>
1a002c6a:	4b0e      	ldr	r3, [pc, #56]	; (1a002ca4 <uartProcessIRQ+0xb0>)
1a002c6c:	681b      	ldr	r3, [r3, #0]
1a002c6e:	b113      	cbz	r3, 1a002c76 <uartProcessIRQ+0x82>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a002c70:	4a0d      	ldr	r2, [pc, #52]	; (1a002ca8 <uartProcessIRQ+0xb4>)
1a002c72:	6810      	ldr	r0, [r2, #0]
1a002c74:	4798      	blx	r3
1a002c76:	bd70      	pop	{r4, r5, r6, pc}
1a002c78:	1a004870 	.word	0x1a004870
1a002c7c:	100032d4 	.word	0x100032d4
1a002c80:	100032e0 	.word	0x100032e0
1a002c84:	100032f4 	.word	0x100032f4
1a002c88:	100032cc 	.word	0x100032cc
1a002c8c:	100032f8 	.word	0x100032f8
1a002c90:	100032dc 	.word	0x100032dc
1a002c94:	100032d8 	.word	0x100032d8
1a002c98:	100032e8 	.word	0x100032e8
1a002c9c:	100032f0 	.word	0x100032f0
1a002ca0:	100032d0 	.word	0x100032d0
1a002ca4:	100032ec 	.word	0x100032ec
1a002ca8:	100032e4 	.word	0x100032e4

1a002cac <uartInterrupt>:
#ifdef SAPI_USE_INTERRUPTS

// UART Global Interrupt Enable/Disable
void uartInterrupt( uartMap_t uart, bool_t enable )
{
   if( enable ) {
1a002cac:	b331      	cbz	r1, 1a002cfc <uartInterrupt+0x50>
      // Interrupt Priority for UART channel
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a002cae:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a002cb2:	0092      	lsls	r2, r2, #2
1a002cb4:	4b1a      	ldr	r3, [pc, #104]	; (1a002d20 <uartInterrupt+0x74>)
1a002cb6:	4413      	add	r3, r2
1a002cb8:	789b      	ldrb	r3, [r3, #2]
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
1a002cba:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002cbe:	d006      	beq.n	1a002cce <uartInterrupt+0x22>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a002cc0:	f003 030f 	and.w	r3, r3, #15
1a002cc4:	4a17      	ldr	r2, [pc, #92]	; (1a002d24 <uartInterrupt+0x78>)
1a002cc6:	441a      	add	r2, r3
1a002cc8:	23a0      	movs	r3, #160	; 0xa0
1a002cca:	7613      	strb	r3, [r2, #24]
1a002ccc:	e005      	b.n	1a002cda <uartInterrupt+0x2e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a002cce:	4a16      	ldr	r2, [pc, #88]	; (1a002d28 <uartInterrupt+0x7c>)
1a002cd0:	fa42 f383 	sxtab	r3, r2, r3
1a002cd4:	22a0      	movs	r2, #160	; 0xa0
1a002cd6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a002cda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002cde:	0080      	lsls	r0, r0, #2
1a002ce0:	4b0f      	ldr	r3, [pc, #60]	; (1a002d20 <uartInterrupt+0x74>)
1a002ce2:	4418      	add	r0, r3
1a002ce4:	7883      	ldrb	r3, [r0, #2]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a002ce6:	b25a      	sxtb	r2, r3
1a002ce8:	0952      	lsrs	r2, r2, #5
1a002cea:	f003 031f 	and.w	r3, r3, #31
1a002cee:	2101      	movs	r1, #1
1a002cf0:	fa01 f303 	lsl.w	r3, r1, r3
1a002cf4:	490c      	ldr	r1, [pc, #48]	; (1a002d28 <uartInterrupt+0x7c>)
1a002cf6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a002cfa:	4770      	bx	lr
   } else {
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a002cfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002d00:	0080      	lsls	r0, r0, #2
1a002d02:	4b07      	ldr	r3, [pc, #28]	; (1a002d20 <uartInterrupt+0x74>)
1a002d04:	4418      	add	r0, r3
1a002d06:	7882      	ldrb	r2, [r0, #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a002d08:	b253      	sxtb	r3, r2
1a002d0a:	095b      	lsrs	r3, r3, #5
1a002d0c:	f002 021f 	and.w	r2, r2, #31
1a002d10:	2101      	movs	r1, #1
1a002d12:	fa01 f202 	lsl.w	r2, r1, r2
1a002d16:	3320      	adds	r3, #32
1a002d18:	4903      	ldr	r1, [pc, #12]	; (1a002d28 <uartInterrupt+0x7c>)
1a002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002d1e:	4770      	bx	lr
1a002d20:	1a004878 	.word	0x1a004878
1a002d24:	e000ecfc 	.word	0xe000ecfc
1a002d28:	e000e100 	.word	0xe000e100

1a002d2c <uartCallbackSet>:
}

// UART Interrupt event Enable and set a callback
void uartCallbackSet( uartMap_t uart, uartEvents_t event, 
                      callBackFuncPtr_t callbackFunc, void* callbackParam )
{   
1a002d2c:	b410      	push	{r4}
   uint32_t intMask;

   switch(event){
1a002d2e:	b111      	cbz	r1, 1a002d36 <uartCallbackSet+0xa>
1a002d30:	2901      	cmp	r1, #1
1a002d32:	d018      	beq.n	1a002d66 <uartCallbackSet+0x3a>
1a002d34:	e039      	b.n	1a002daa <uartCallbackSet+0x7e>
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
         
         if( callbackFunc != 0 ) {
1a002d36:	2a00      	cmp	r2, #0
1a002d38:	d037      	beq.n	1a002daa <uartCallbackSet+0x7e>
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a002d3a:	2801      	cmp	r0, #1
1a002d3c:	d803      	bhi.n	1a002d46 <uartCallbackSet+0x1a>
               rxIsrCallbackUART0 = callbackFunc;
1a002d3e:	491c      	ldr	r1, [pc, #112]	; (1a002db0 <uartCallbackSet+0x84>)
1a002d40:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a002d42:	491c      	ldr	r1, [pc, #112]	; (1a002db4 <uartCallbackSet+0x88>)
1a002d44:	600b      	str	r3, [r1, #0]
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a002d46:	1ec1      	subs	r1, r0, #3
1a002d48:	b2c9      	uxtb	r1, r1
1a002d4a:	2901      	cmp	r1, #1
1a002d4c:	d803      	bhi.n	1a002d56 <uartCallbackSet+0x2a>
               rxIsrCallbackUART2 = callbackFunc;
1a002d4e:	491a      	ldr	r1, [pc, #104]	; (1a002db8 <uartCallbackSet+0x8c>)
1a002d50:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a002d52:	491a      	ldr	r1, [pc, #104]	; (1a002dbc <uartCallbackSet+0x90>)
1a002d54:	600b      	str	r3, [r1, #0]
            }            
            if( uart == UART_232 ){
1a002d56:	2805      	cmp	r0, #5
1a002d58:	d11c      	bne.n	1a002d94 <uartCallbackSet+0x68>
               rxIsrCallbackUART3 = callbackFunc;
1a002d5a:	4919      	ldr	r1, [pc, #100]	; (1a002dc0 <uartCallbackSet+0x94>)
1a002d5c:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a002d5e:	4a19      	ldr	r2, [pc, #100]	; (1a002dc4 <uartCallbackSet+0x98>)
1a002d60:	6013      	str	r3, [r2, #0]
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a002d62:	2105      	movs	r1, #5
1a002d64:	e019      	b.n	1a002d9a <uartCallbackSet+0x6e>

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;

         if( callbackFunc != 0 ) {
1a002d66:	b302      	cbz	r2, 1a002daa <uartCallbackSet+0x7e>
            
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a002d68:	2801      	cmp	r0, #1
1a002d6a:	d803      	bhi.n	1a002d74 <uartCallbackSet+0x48>
               txIsrCallbackUART0 = callbackFunc;
1a002d6c:	4916      	ldr	r1, [pc, #88]	; (1a002dc8 <uartCallbackSet+0x9c>)
1a002d6e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a002d70:	4916      	ldr	r1, [pc, #88]	; (1a002dcc <uartCallbackSet+0xa0>)
1a002d72:	600b      	str	r3, [r1, #0]
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a002d74:	1ec1      	subs	r1, r0, #3
1a002d76:	b2c9      	uxtb	r1, r1
1a002d78:	2901      	cmp	r1, #1
1a002d7a:	d803      	bhi.n	1a002d84 <uartCallbackSet+0x58>
               txIsrCallbackUART2 = callbackFunc;
1a002d7c:	4914      	ldr	r1, [pc, #80]	; (1a002dd0 <uartCallbackSet+0xa4>)
1a002d7e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a002d80:	4914      	ldr	r1, [pc, #80]	; (1a002dd4 <uartCallbackSet+0xa8>)
1a002d82:	600b      	str	r3, [r1, #0]
            }            
            if( uart == UART_232 ){
1a002d84:	2805      	cmp	r0, #5
1a002d86:	d107      	bne.n	1a002d98 <uartCallbackSet+0x6c>
               txIsrCallbackUART3 = callbackFunc;
1a002d88:	4913      	ldr	r1, [pc, #76]	; (1a002dd8 <uartCallbackSet+0xac>)
1a002d8a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a002d8c:	4a13      	ldr	r2, [pc, #76]	; (1a002ddc <uartCallbackSet+0xb0>)
1a002d8e:	6013      	str	r3, [r2, #0]
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a002d90:	2102      	movs	r1, #2
1a002d92:	e002      	b.n	1a002d9a <uartCallbackSet+0x6e>
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a002d94:	2105      	movs	r1, #5
1a002d96:	e000      	b.n	1a002d9a <uartCallbackSet+0x6e>
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a002d98:	2102      	movs	r1, #2
      default:
         return;
   }

   // Enable UART Interrupt
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a002d9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002d9e:	0080      	lsls	r0, r0, #2
1a002da0:	4a0f      	ldr	r2, [pc, #60]	; (1a002de0 <uartCallbackSet+0xb4>)
1a002da2:	5812      	ldr	r2, [r2, r0]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a002da4:	6853      	ldr	r3, [r2, #4]
1a002da6:	430b      	orrs	r3, r1
1a002da8:	6053      	str	r3, [r2, #4]
}
1a002daa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002dae:	4770      	bx	lr
1a002db0:	100032d4 	.word	0x100032d4
1a002db4:	100032e0 	.word	0x100032e0
1a002db8:	100032f4 	.word	0x100032f4
1a002dbc:	100032cc 	.word	0x100032cc
1a002dc0:	100032f8 	.word	0x100032f8
1a002dc4:	100032dc 	.word	0x100032dc
1a002dc8:	100032d8 	.word	0x100032d8
1a002dcc:	100032e8 	.word	0x100032e8
1a002dd0:	100032f0 	.word	0x100032f0
1a002dd4:	100032d0 	.word	0x100032d0
1a002dd8:	100032ec 	.word	0x100032ec
1a002ddc:	100032e4 	.word	0x100032e4
1a002de0:	1a004870 	.word	0x1a004870

1a002de4 <uartCallbackClr>:
// UART Interrupt event Disable
void uartCallbackClr( uartMap_t uart, uartEvents_t event )
{
   uint32_t intMask;

   switch(event){
1a002de4:	b111      	cbz	r1, 1a002dec <uartCallbackClr+0x8>
1a002de6:	2901      	cmp	r1, #1
1a002de8:	d002      	beq.n	1a002df0 <uartCallbackClr+0xc>
1a002dea:	4770      	bx	lr
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a002dec:	2105      	movs	r1, #5
1a002dee:	e000      	b.n	1a002df2 <uartCallbackClr+0xe>
      break;
      
      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a002df0:	2102      	movs	r1, #2
      default:
         return;
   }

   // Disable UART Interrupt
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a002df2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002df6:	0080      	lsls	r0, r0, #2
1a002df8:	4b03      	ldr	r3, [pc, #12]	; (1a002e08 <uartCallbackClr+0x24>)
1a002dfa:	581a      	ldr	r2, [r3, r0]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a002dfc:	6853      	ldr	r3, [r2, #4]
1a002dfe:	ea23 0301 	bic.w	r3, r3, r1
1a002e02:	6053      	str	r3, [r2, #4]
1a002e04:	4770      	bx	lr
1a002e06:	bf00      	nop
1a002e08:	1a004870 	.word	0x1a004870

1a002e0c <uartRxRead>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
}
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a002e0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002e10:	0080      	lsls	r0, r0, #2
1a002e12:	4b02      	ldr	r3, [pc, #8]	; (1a002e1c <uartRxRead+0x10>)
1a002e14:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002e16:	6818      	ldr	r0, [r3, #0]
}
1a002e18:	b2c0      	uxtb	r0, r0
1a002e1a:	4770      	bx	lr
1a002e1c:	1a004870 	.word	0x1a004870

1a002e20 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002e20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002e24:	0080      	lsls	r0, r0, #2
1a002e26:	4b02      	ldr	r3, [pc, #8]	; (1a002e30 <uartTxWrite+0x10>)
1a002e28:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a002e2a:	6019      	str	r1, [r3, #0]
1a002e2c:	4770      	bx	lr
1a002e2e:	bf00      	nop
1a002e30:	1a004870 	.word	0x1a004870

1a002e34 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002e38:	4607      	mov	r7, r0
1a002e3a:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002e3c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a002eac <uartInit+0x78>
1a002e40:	0044      	lsls	r4, r0, #1
1a002e42:	1823      	adds	r3, r4, r0
1a002e44:	009b      	lsls	r3, r3, #2
1a002e46:	eb08 0503 	add.w	r5, r8, r3
1a002e4a:	f858 6003 	ldr.w	r6, [r8, r3]
1a002e4e:	4630      	mov	r0, r6
1a002e50:	f000 fc34 	bl	1a0036bc <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002e54:	4630      	mov	r0, r6
1a002e56:	4649      	mov	r1, r9
1a002e58:	f000 fc5a 	bl	1a003710 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002e5c:	2307      	movs	r3, #7
1a002e5e:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002e60:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002e62:	2301      	movs	r3, #1
1a002e64:	65f3      	str	r3, [r6, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002e66:	7929      	ldrb	r1, [r5, #4]
1a002e68:	796b      	ldrb	r3, [r5, #5]
1a002e6a:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002e6c:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e70:	480c      	ldr	r0, [pc, #48]	; (1a002ea4 <uartInit+0x70>)
1a002e72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002e76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002e7a:	79ee      	ldrb	r6, [r5, #7]
1a002e7c:	7a2a      	ldrb	r2, [r5, #8]
1a002e7e:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002e80:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e84:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a002e88:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002e8c:	2f01      	cmp	r7, #1
1a002e8e:	d107      	bne.n	1a002ea0 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002e90:	4a05      	ldr	r2, [pc, #20]	; (1a002ea8 <uartInit+0x74>)
1a002e92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002e94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002e98:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002e9a:	221a      	movs	r2, #26
1a002e9c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a002ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002ea4:	40086000 	.word	0x40086000
1a002ea8:	40081000 	.word	0x40081000
1a002eac:	1a004870 	.word	0x1a004870

1a002eb0 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002eb0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a002eb2:	2003      	movs	r0, #3
1a002eb4:	f7ff fe9e 	bl	1a002bf4 <uartProcessIRQ>
1a002eb8:	bd08      	pop	{r3, pc}
1a002eba:	bf00      	nop

1a002ebc <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a002ebc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002ebe:	2005      	movs	r0, #5
1a002ec0:	f7ff fe98 	bl	1a002bf4 <uartProcessIRQ>
1a002ec4:	bd08      	pop	{r3, pc}
1a002ec6:	bf00      	nop

1a002ec8 <uartSetPendingInterrupt>:
#endif /* SAPI_USE_INTERRUPTS */


// UART Set Pending Interrupt. Useful to force first character in tx transmission
void uartSetPendingInterrupt(uartMap_t uart) {
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a002ec8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002ecc:	0080      	lsls	r0, r0, #2
1a002ece:	4b07      	ldr	r3, [pc, #28]	; (1a002eec <uartSetPendingInterrupt+0x24>)
1a002ed0:	4418      	add	r0, r3
1a002ed2:	7882      	ldrb	r2, [r0, #2]

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
1a002ed4:	b253      	sxtb	r3, r2
1a002ed6:	095b      	lsrs	r3, r3, #5
1a002ed8:	f002 021f 	and.w	r2, r2, #31
1a002edc:	2101      	movs	r1, #1
1a002ede:	fa01 f202 	lsl.w	r2, r1, r2
1a002ee2:	3340      	adds	r3, #64	; 0x40
1a002ee4:	4902      	ldr	r1, [pc, #8]	; (1a002ef0 <uartSetPendingInterrupt+0x28>)
1a002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002eea:	4770      	bx	lr
1a002eec:	1a004878 	.word	0x1a004878
1a002ef0:	e000e100 	.word	0xe000e100

1a002ef4 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002ef4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002ef6:	4907      	ldr	r1, [pc, #28]	; (1a002f14 <tickerCallback+0x20>)
1a002ef8:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002efc:	3201      	adds	r2, #1
1a002efe:	f143 0300 	adc.w	r3, r3, #0
1a002f02:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002f06:	4b04      	ldr	r3, [pc, #16]	; (1a002f18 <tickerCallback+0x24>)
1a002f08:	681b      	ldr	r3, [r3, #0]
1a002f0a:	b113      	cbz	r3, 1a002f12 <tickerCallback+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a002f0c:	4a03      	ldr	r2, [pc, #12]	; (1a002f1c <tickerCallback+0x28>)
1a002f0e:	6810      	ldr	r0, [r2, #0]
1a002f10:	4798      	blx	r3
1a002f12:	bd08      	pop	{r3, pc}
1a002f14:	10003330 	.word	0x10003330
1a002f18:	100032fc 	.word	0x100032fc
1a002f1c:	10003338 	.word	0x10003338

1a002f20 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002f20:	b510      	push	{r4, lr}
1a002f22:	b082      	sub	sp, #8
1a002f24:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002f26:	4b0e      	ldr	r3, [pc, #56]	; (1a002f60 <tickInit+0x40>)
1a002f28:	9300      	str	r3, [sp, #0]
1a002f2a:	4b0e      	ldr	r3, [pc, #56]	; (1a002f64 <tickInit+0x44>)
1a002f2c:	9301      	str	r3, [sp, #4]
1a002f2e:	480e      	ldr	r0, [pc, #56]	; (1a002f68 <tickInit+0x48>)
1a002f30:	2201      	movs	r2, #1
1a002f32:	2300      	movs	r3, #0
1a002f34:	f7ff faf2 	bl	1a00251c <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a002f38:	b170      	cbz	r0, 1a002f58 <tickInit+0x38>
1a002f3a:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a002f3c:	f7fe fe5e 	bl	1a001bfc <xTaskGetTickCount>
1a002f40:	4602      	mov	r2, r0
1a002f42:	2300      	movs	r3, #0
1a002f44:	9300      	str	r3, [sp, #0]
1a002f46:	4620      	mov	r0, r4
1a002f48:	2101      	movs	r1, #1
1a002f4a:	f7ff fb0f 	bl	1a00256c <xTimerGenericCommand>
1a002f4e:	2801      	cmp	r0, #1
1a002f50:	bf14      	ite	ne
1a002f52:	2000      	movne	r0, #0
1a002f54:	2001      	moveq	r0, #1
1a002f56:	e000      	b.n	1a002f5a <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a002f58:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a002f5a:	b002      	add	sp, #8
1a002f5c:	bd10      	pop	{r4, pc}
1a002f5e:	bf00      	nop
1a002f60:	1a002ef5 	.word	0x1a002ef5
1a002f64:	10003300 	.word	0x10003300
1a002f68:	1a0048b8 	.word	0x1a0048b8

1a002f6c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a002f6c:	e7fe      	b.n	1a002f6c <errorOcurred>
1a002f6e:	bf00      	nop

1a002f70 <doNothing>:
}

static void doNothing( void* ptr )
{
1a002f70:	4770      	bx	lr
1a002f72:	bf00      	nop

1a002f74 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002f74:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002f76:	2400      	movs	r4, #0
1a002f78:	e013      	b.n	1a002fa2 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002f7a:	4b0b      	ldr	r3, [pc, #44]	; (1a002fa8 <TIMER0_IRQHandler+0x34>)
1a002f7c:	681a      	ldr	r2, [r3, #0]
1a002f7e:	f004 010f 	and.w	r1, r4, #15
1a002f82:	2301      	movs	r3, #1
1a002f84:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a002f86:	421a      	tst	r2, r3
1a002f88:	d009      	beq.n	1a002f9e <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002f8a:	4b08      	ldr	r3, [pc, #32]	; (1a002fac <TIMER0_IRQHandler+0x38>)
1a002f8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002f90:	2000      	movs	r0, #0
1a002f92:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002f94:	b262      	sxtb	r2, r4
1a002f96:	2301      	movs	r3, #1
1a002f98:	4093      	lsls	r3, r2
1a002f9a:	4a03      	ldr	r2, [pc, #12]	; (1a002fa8 <TIMER0_IRQHandler+0x34>)
1a002f9c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002f9e:	3401      	adds	r4, #1
1a002fa0:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002fa2:	2c03      	cmp	r4, #3
1a002fa4:	d9e9      	bls.n	1a002f7a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002fa6:	bd10      	pop	{r4, pc}
1a002fa8:	40084000 	.word	0x40084000
1a002fac:	10000010 	.word	0x10000010

1a002fb0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002fb0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002fb2:	2400      	movs	r4, #0
1a002fb4:	e014      	b.n	1a002fe0 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002fb6:	4b0c      	ldr	r3, [pc, #48]	; (1a002fe8 <TIMER1_IRQHandler+0x38>)
1a002fb8:	681a      	ldr	r2, [r3, #0]
1a002fba:	f004 010f 	and.w	r1, r4, #15
1a002fbe:	2301      	movs	r3, #1
1a002fc0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002fc2:	421a      	tst	r2, r3
1a002fc4:	d00a      	beq.n	1a002fdc <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002fc6:	1d23      	adds	r3, r4, #4
1a002fc8:	4a08      	ldr	r2, [pc, #32]	; (1a002fec <TIMER1_IRQHandler+0x3c>)
1a002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002fce:	2000      	movs	r0, #0
1a002fd0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002fd2:	b262      	sxtb	r2, r4
1a002fd4:	2301      	movs	r3, #1
1a002fd6:	4093      	lsls	r3, r2
1a002fd8:	4a03      	ldr	r2, [pc, #12]	; (1a002fe8 <TIMER1_IRQHandler+0x38>)
1a002fda:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002fdc:	3401      	adds	r4, #1
1a002fde:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002fe0:	2c03      	cmp	r4, #3
1a002fe2:	d9e8      	bls.n	1a002fb6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002fe4:	bd10      	pop	{r4, pc}
1a002fe6:	bf00      	nop
1a002fe8:	40085000 	.word	0x40085000
1a002fec:	10000010 	.word	0x10000010

1a002ff0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002ff0:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002ff2:	2400      	movs	r4, #0
1a002ff4:	e015      	b.n	1a003022 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002ff6:	4b0c      	ldr	r3, [pc, #48]	; (1a003028 <TIMER2_IRQHandler+0x38>)
1a002ff8:	681a      	ldr	r2, [r3, #0]
1a002ffa:	f004 010f 	and.w	r1, r4, #15
1a002ffe:	2301      	movs	r3, #1
1a003000:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003002:	421a      	tst	r2, r3
1a003004:	d00b      	beq.n	1a00301e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003006:	f104 0308 	add.w	r3, r4, #8
1a00300a:	4a08      	ldr	r2, [pc, #32]	; (1a00302c <TIMER2_IRQHandler+0x3c>)
1a00300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003010:	2000      	movs	r0, #0
1a003012:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003014:	b262      	sxtb	r2, r4
1a003016:	2301      	movs	r3, #1
1a003018:	4093      	lsls	r3, r2
1a00301a:	4a03      	ldr	r2, [pc, #12]	; (1a003028 <TIMER2_IRQHandler+0x38>)
1a00301c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00301e:	3401      	adds	r4, #1
1a003020:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003022:	2c03      	cmp	r4, #3
1a003024:	d9e7      	bls.n	1a002ff6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003026:	bd10      	pop	{r4, pc}
1a003028:	400c3000 	.word	0x400c3000
1a00302c:	10000010 	.word	0x10000010

1a003030 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003030:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003032:	2400      	movs	r4, #0
1a003034:	e015      	b.n	1a003062 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003036:	4b0c      	ldr	r3, [pc, #48]	; (1a003068 <TIMER3_IRQHandler+0x38>)
1a003038:	681a      	ldr	r2, [r3, #0]
1a00303a:	f004 010f 	and.w	r1, r4, #15
1a00303e:	2301      	movs	r3, #1
1a003040:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003042:	421a      	tst	r2, r3
1a003044:	d00b      	beq.n	1a00305e <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003046:	f104 030c 	add.w	r3, r4, #12
1a00304a:	4a08      	ldr	r2, [pc, #32]	; (1a00306c <TIMER3_IRQHandler+0x3c>)
1a00304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003050:	2000      	movs	r0, #0
1a003052:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003054:	b262      	sxtb	r2, r4
1a003056:	2301      	movs	r3, #1
1a003058:	4093      	lsls	r3, r2
1a00305a:	4a03      	ldr	r2, [pc, #12]	; (1a003068 <TIMER3_IRQHandler+0x38>)
1a00305c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00305e:	3401      	adds	r4, #1
1a003060:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003062:	2c03      	cmp	r4, #3
1a003064:	d9e7      	bls.n	1a003036 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003066:	bd10      	pop	{r4, pc}
1a003068:	400c4000 	.word	0x400c4000
1a00306c:	10000010 	.word	0x10000010

1a003070 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003070:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003072:	4d09      	ldr	r5, [pc, #36]	; (1a003098 <gpioObtainPinInit+0x28>)
1a003074:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003078:	182c      	adds	r4, r5, r0
1a00307a:	5c28      	ldrb	r0, [r5, r0]
1a00307c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00307e:	7861      	ldrb	r1, [r4, #1]
1a003080:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003082:	78a2      	ldrb	r2, [r4, #2]
1a003084:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003086:	78e2      	ldrb	r2, [r4, #3]
1a003088:	9b02      	ldr	r3, [sp, #8]
1a00308a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00308c:	7922      	ldrb	r2, [r4, #4]
1a00308e:	9b03      	ldr	r3, [sp, #12]
1a003090:	701a      	strb	r2, [r3, #0]
}
1a003092:	bc30      	pop	{r4, r5}
1a003094:	4770      	bx	lr
1a003096:	bf00      	nop
1a003098:	1a0048c4 	.word	0x1a0048c4

1a00309c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00309c:	b570      	push	{r4, r5, r6, lr}
1a00309e:	b084      	sub	sp, #16
1a0030a0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0030a2:	2300      	movs	r3, #0
1a0030a4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0030a8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0030ac:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0030b0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0030b4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0030b8:	ab03      	add	r3, sp, #12
1a0030ba:	9300      	str	r3, [sp, #0]
1a0030bc:	f10d 030b 	add.w	r3, sp, #11
1a0030c0:	9301      	str	r3, [sp, #4]
1a0030c2:	f10d 010f 	add.w	r1, sp, #15
1a0030c6:	f10d 020e 	add.w	r2, sp, #14
1a0030ca:	f10d 030d 	add.w	r3, sp, #13
1a0030ce:	f7ff ffcf 	bl	1a003070 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0030d2:	2c05      	cmp	r4, #5
1a0030d4:	f200 80a8 	bhi.w	1a003228 <gpioInit+0x18c>
1a0030d8:	e8df f004 	tbb	[pc, r4]
1a0030dc:	46278408 	.word	0x46278408
1a0030e0:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0030e2:	4853      	ldr	r0, [pc, #332]	; (1a003230 <gpioInit+0x194>)
1a0030e4:	f000 ff9c 	bl	1a004020 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0030e8:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a0030ea:	e09e      	b.n	1a00322a <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0030ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0030f8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0030fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003100:	494c      	ldr	r1, [pc, #304]	; (1a003234 <gpioInit+0x198>)
1a003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003106:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00310a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00310e:	2001      	movs	r0, #1
1a003110:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003114:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00311c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a003120:	ea22 0204 	bic.w	r2, r2, r4
1a003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003128:	e07f      	b.n	1a00322a <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a00312a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00312e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003132:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003136:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00313a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00313e:	493d      	ldr	r1, [pc, #244]	; (1a003234 <gpioInit+0x198>)
1a003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003144:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003148:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00314c:	2001      	movs	r0, #1
1a00314e:	fa00 f402 	lsl.w	r4, r0, r2
1a003152:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00315a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00315e:	ea22 0204 	bic.w	r2, r2, r4
1a003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003166:	e060      	b.n	1a00322a <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a003168:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00316c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003170:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003174:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003178:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00317c:	492d      	ldr	r1, [pc, #180]	; (1a003234 <gpioInit+0x198>)
1a00317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003182:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003186:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00318a:	2001      	movs	r0, #1
1a00318c:	fa00 f402 	lsl.w	r4, r0, r2
1a003190:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a003194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003198:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00319c:	ea22 0204 	bic.w	r2, r2, r4
1a0031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0031a4:	e041      	b.n	1a00322a <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a0031a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0031aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0031ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0031b2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0031b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0031ba:	491e      	ldr	r1, [pc, #120]	; (1a003234 <gpioInit+0x198>)
1a0031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0031c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0031c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0031c8:	2001      	movs	r0, #1
1a0031ca:	fa00 f402 	lsl.w	r4, r0, r2
1a0031ce:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0031d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0031da:	ea22 0204 	bic.w	r2, r2, r4
1a0031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0031e2:	e022      	b.n	1a00322a <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0031e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0031e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0031ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0031f0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0031f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0031f8:	490e      	ldr	r1, [pc, #56]	; (1a003234 <gpioInit+0x198>)
1a0031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0031fe:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003202:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a003206:	b25a      	sxtb	r2, r3
1a003208:	2001      	movs	r0, #1
1a00320a:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00320e:	4a08      	ldr	r2, [pc, #32]	; (1a003230 <gpioInit+0x194>)
1a003210:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003214:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a003218:	4331      	orrs	r1, r6
1a00321a:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00321e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003222:	2100      	movs	r1, #0
1a003224:	54d1      	strb	r1, [r2, r3]
1a003226:	e000      	b.n	1a00322a <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a003228:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a00322a:	b004      	add	sp, #16
1a00322c:	bd70      	pop	{r4, r5, r6, pc}
1a00322e:	bf00      	nop
1a003230:	400f4000 	.word	0x400f4000
1a003234:	40086000 	.word	0x40086000

1a003238 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003238:	b510      	push	{r4, lr}
1a00323a:	b084      	sub	sp, #16
1a00323c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00323e:	2300      	movs	r3, #0
1a003240:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003244:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003248:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00324c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003250:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003254:	ab03      	add	r3, sp, #12
1a003256:	9300      	str	r3, [sp, #0]
1a003258:	f10d 030b 	add.w	r3, sp, #11
1a00325c:	9301      	str	r3, [sp, #4]
1a00325e:	f10d 010f 	add.w	r1, sp, #15
1a003262:	f10d 020e 	add.w	r2, sp, #14
1a003266:	f10d 030d 	add.w	r3, sp, #13
1a00326a:	f7ff ff01 	bl	1a003070 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00326e:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a003272:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a003276:	3400      	adds	r4, #0
1a003278:	bf18      	it	ne
1a00327a:	2401      	movne	r4, #1
1a00327c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a003280:	4a02      	ldr	r2, [pc, #8]	; (1a00328c <gpioWrite+0x54>)
1a003282:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a003284:	2001      	movs	r0, #1
1a003286:	b004      	add	sp, #16
1a003288:	bd10      	pop	{r4, pc}
1a00328a:	bf00      	nop
1a00328c:	400f4000 	.word	0x400f4000

1a003290 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003290:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003292:	4b04      	ldr	r3, [pc, #16]	; (1a0032a4 <USB0_IRQHandler+0x14>)
1a003294:	681b      	ldr	r3, [r3, #0]
1a003296:	681b      	ldr	r3, [r3, #0]
1a003298:	68db      	ldr	r3, [r3, #12]
1a00329a:	4a03      	ldr	r2, [pc, #12]	; (1a0032a8 <USB0_IRQHandler+0x18>)
1a00329c:	6810      	ldr	r0, [r2, #0]
1a00329e:	4798      	blx	r3
1a0032a0:	bd08      	pop	{r3, pc}
1a0032a2:	bf00      	nop
1a0032a4:	10003398 	.word	0x10003398
1a0032a8:	1000333c 	.word	0x1000333c

1a0032ac <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0032ac:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0032ae:	f000 fb23 	bl	1a0038f8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0032b2:	4b3a      	ldr	r3, [pc, #232]	; (1a00339c <boardInit+0xf0>)
1a0032b4:	6818      	ldr	r0, [r3, #0]
1a0032b6:	f7ff fc8f 	bl	1a002bd8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0032ba:	2001      	movs	r0, #1
1a0032bc:	2100      	movs	r1, #0
1a0032be:	f7ff fe2f 	bl	1a002f20 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0032c2:	2000      	movs	r0, #0
1a0032c4:	2105      	movs	r1, #5
1a0032c6:	f7ff fee9 	bl	1a00309c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0032ca:	2024      	movs	r0, #36	; 0x24
1a0032cc:	2100      	movs	r1, #0
1a0032ce:	f7ff fee5 	bl	1a00309c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0032d2:	2025      	movs	r0, #37	; 0x25
1a0032d4:	2100      	movs	r1, #0
1a0032d6:	f7ff fee1 	bl	1a00309c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0032da:	2026      	movs	r0, #38	; 0x26
1a0032dc:	2100      	movs	r1, #0
1a0032de:	f7ff fedd 	bl	1a00309c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0032e2:	2027      	movs	r0, #39	; 0x27
1a0032e4:	2100      	movs	r1, #0
1a0032e6:	f7ff fed9 	bl	1a00309c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0032ea:	2028      	movs	r0, #40	; 0x28
1a0032ec:	2101      	movs	r1, #1
1a0032ee:	f7ff fed5 	bl	1a00309c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0032f2:	2029      	movs	r0, #41	; 0x29
1a0032f4:	2101      	movs	r1, #1
1a0032f6:	f7ff fed1 	bl	1a00309c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0032fa:	202a      	movs	r0, #42	; 0x2a
1a0032fc:	2101      	movs	r1, #1
1a0032fe:	f7ff fecd 	bl	1a00309c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003302:	202b      	movs	r0, #43	; 0x2b
1a003304:	2101      	movs	r1, #1
1a003306:	f7ff fec9 	bl	1a00309c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00330a:	202c      	movs	r0, #44	; 0x2c
1a00330c:	2101      	movs	r1, #1
1a00330e:	f7ff fec5 	bl	1a00309c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003312:	202d      	movs	r0, #45	; 0x2d
1a003314:	2101      	movs	r1, #1
1a003316:	f7ff fec1 	bl	1a00309c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00331a:	202e      	movs	r0, #46	; 0x2e
1a00331c:	2100      	movs	r1, #0
1a00331e:	f7ff febd 	bl	1a00309c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003322:	202f      	movs	r0, #47	; 0x2f
1a003324:	2100      	movs	r1, #0
1a003326:	f7ff feb9 	bl	1a00309c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00332a:	2030      	movs	r0, #48	; 0x30
1a00332c:	2100      	movs	r1, #0
1a00332e:	f7ff feb5 	bl	1a00309c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003332:	2031      	movs	r0, #49	; 0x31
1a003334:	2100      	movs	r1, #0
1a003336:	f7ff feb1 	bl	1a00309c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00333a:	2032      	movs	r0, #50	; 0x32
1a00333c:	2100      	movs	r1, #0
1a00333e:	f7ff fead 	bl	1a00309c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003342:	2033      	movs	r0, #51	; 0x33
1a003344:	2100      	movs	r1, #0
1a003346:	f7ff fea9 	bl	1a00309c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00334a:	2034      	movs	r0, #52	; 0x34
1a00334c:	2100      	movs	r1, #0
1a00334e:	f7ff fea5 	bl	1a00309c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003352:	2035      	movs	r0, #53	; 0x35
1a003354:	2100      	movs	r1, #0
1a003356:	f7ff fea1 	bl	1a00309c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00335a:	2036      	movs	r0, #54	; 0x36
1a00335c:	2101      	movs	r1, #1
1a00335e:	f7ff fe9d 	bl	1a00309c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003362:	2037      	movs	r0, #55	; 0x37
1a003364:	2101      	movs	r1, #1
1a003366:	f7ff fe99 	bl	1a00309c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00336a:	2038      	movs	r0, #56	; 0x38
1a00336c:	2101      	movs	r1, #1
1a00336e:	f7ff fe95 	bl	1a00309c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003372:	2039      	movs	r0, #57	; 0x39
1a003374:	2101      	movs	r1, #1
1a003376:	f7ff fe91 	bl	1a00309c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00337a:	203a      	movs	r0, #58	; 0x3a
1a00337c:	2101      	movs	r1, #1
1a00337e:	f7ff fe8d 	bl	1a00309c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003382:	203b      	movs	r0, #59	; 0x3b
1a003384:	2101      	movs	r1, #1
1a003386:	f7ff fe89 	bl	1a00309c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00338a:	203c      	movs	r0, #60	; 0x3c
1a00338c:	2101      	movs	r1, #1
1a00338e:	f7ff fe85 	bl	1a00309c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003392:	203d      	movs	r0, #61	; 0x3d
1a003394:	2101      	movs	r1, #1
1a003396:	f7ff fe81 	bl	1a00309c <gpioInit>
1a00339a:	bd08      	pop	{r3, pc}
1a00339c:	1000339c 	.word	0x1000339c

1a0033a0 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0033a0:	2301      	movs	r3, #1
1a0033a2:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0033a4:	4a01      	ldr	r2, [pc, #4]	; (1a0033ac <clearInterrupt+0xc>)
1a0033a6:	6253      	str	r3, [r2, #36]	; 0x24
1a0033a8:	4770      	bx	lr
1a0033aa:	bf00      	nop
1a0033ac:	40087000 	.word	0x40087000

1a0033b0 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a0033b0:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0033b2:	4b13      	ldr	r3, [pc, #76]	; (1a003400 <serveInterrupt+0x50>)
1a0033b4:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a0033b6:	4a13      	ldr	r2, [pc, #76]	; (1a003404 <serveInterrupt+0x54>)
1a0033b8:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0033ba:	2401      	movs	r4, #1
1a0033bc:	4084      	lsls	r4, r0
1a0033be:	4214      	tst	r4, r2
1a0033c0:	d00a      	beq.n	1a0033d8 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0033c2:	4a11      	ldr	r2, [pc, #68]	; (1a003408 <serveInterrupt+0x58>)
1a0033c4:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0033c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0033ca:	00db      	lsls	r3, r3, #3
1a0033cc:	490f      	ldr	r1, [pc, #60]	; (1a00340c <serveInterrupt+0x5c>)
1a0033ce:	440b      	add	r3, r1
1a0033d0:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0033d2:	4b0c      	ldr	r3, [pc, #48]	; (1a003404 <serveInterrupt+0x54>)
1a0033d4:	61dc      	str	r4, [r3, #28]
1a0033d6:	e00f      	b.n	1a0033f8 <serveInterrupt+0x48>
1a0033d8:	4a0b      	ldr	r2, [pc, #44]	; (1a003408 <serveInterrupt+0x58>)
1a0033da:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0033dc:	4d0b      	ldr	r5, [pc, #44]	; (1a00340c <serveInterrupt+0x5c>)
1a0033de:	005e      	lsls	r6, r3, #1
1a0033e0:	18f2      	adds	r2, r6, r3
1a0033e2:	00d2      	lsls	r2, r2, #3
1a0033e4:	442a      	add	r2, r5
1a0033e6:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0033e8:	6852      	ldr	r2, [r2, #4]
1a0033ea:	1a89      	subs	r1, r1, r2
1a0033ec:	4433      	add	r3, r6
1a0033ee:	00db      	lsls	r3, r3, #3
1a0033f0:	442b      	add	r3, r5
1a0033f2:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0033f4:	4b03      	ldr	r3, [pc, #12]	; (1a003404 <serveInterrupt+0x54>)
1a0033f6:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0033f8:	f7ff ffd2 	bl	1a0033a0 <clearInterrupt>
1a0033fc:	bd70      	pop	{r4, r5, r6, pc}
1a0033fe:	bf00      	nop
1a003400:	1a0049fc 	.word	0x1a0049fc
1a003404:	40087000 	.word	0x40087000
1a003408:	40084000 	.word	0x40084000
1a00340c:	10000050 	.word	0x10000050

1a003410 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a003410:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a003412:	2000      	movs	r0, #0
1a003414:	f7ff ffcc 	bl	1a0033b0 <serveInterrupt>
1a003418:	bd08      	pop	{r3, pc}
1a00341a:	bf00      	nop

1a00341c <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a00341c:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00341e:	2001      	movs	r0, #1
1a003420:	f7ff ffc6 	bl	1a0033b0 <serveInterrupt>
1a003424:	bd08      	pop	{r3, pc}
1a003426:	bf00      	nop

1a003428 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a003428:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00342a:	2002      	movs	r0, #2
1a00342c:	f7ff ffc0 	bl	1a0033b0 <serveInterrupt>
1a003430:	bd08      	pop	{r3, pc}
1a003432:	bf00      	nop

1a003434 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a003434:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003436:	2200      	movs	r2, #0
1a003438:	e014      	b.n	1a003464 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00343a:	4b0c      	ldr	r3, [pc, #48]	; (1a00346c <Board_LED_Init+0x38>)
1a00343c:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a003440:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a003444:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003446:	480a      	ldr	r0, [pc, #40]	; (1a003470 <Board_LED_Init+0x3c>)
1a003448:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00344c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a003450:	2301      	movs	r3, #1
1a003452:	408b      	lsls	r3, r1
1a003454:	4333      	orrs	r3, r6
1a003456:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00345a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a00345e:	2300      	movs	r3, #0
1a003460:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003462:	3201      	adds	r2, #1
1a003464:	2a05      	cmp	r2, #5
1a003466:	d9e8      	bls.n	1a00343a <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a003468:	bc70      	pop	{r4, r5, r6}
1a00346a:	4770      	bx	lr
1a00346c:	1a004a24 	.word	0x1a004a24
1a003470:	400f4000 	.word	0x400f4000

1a003474 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a003474:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003476:	2300      	movs	r3, #0
1a003478:	e011      	b.n	1a00349e <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00347a:	490b      	ldr	r1, [pc, #44]	; (1a0034a8 <Board_TEC_Init+0x34>)
1a00347c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003480:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003484:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003486:	4c09      	ldr	r4, [pc, #36]	; (1a0034ac <Board_TEC_Init+0x38>)
1a003488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00348c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a003490:	2101      	movs	r1, #1
1a003492:	40a9      	lsls	r1, r5
1a003494:	ea20 0101 	bic.w	r1, r0, r1
1a003498:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00349c:	3301      	adds	r3, #1
1a00349e:	2b03      	cmp	r3, #3
1a0034a0:	d9eb      	bls.n	1a00347a <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0034a2:	bc30      	pop	{r4, r5}
1a0034a4:	4770      	bx	lr
1a0034a6:	bf00      	nop
1a0034a8:	1a004a1c 	.word	0x1a004a1c
1a0034ac:	400f4000 	.word	0x400f4000

1a0034b0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a0034b0:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0034b2:	2300      	movs	r3, #0
1a0034b4:	e011      	b.n	1a0034da <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0034b6:	490b      	ldr	r1, [pc, #44]	; (1a0034e4 <Board_GPIO_Init+0x34>)
1a0034b8:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0034bc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0034c0:	784d      	ldrb	r5, [r1, #1]
1a0034c2:	4c09      	ldr	r4, [pc, #36]	; (1a0034e8 <Board_GPIO_Init+0x38>)
1a0034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0034c8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a0034cc:	2101      	movs	r1, #1
1a0034ce:	40a9      	lsls	r1, r5
1a0034d0:	ea20 0101 	bic.w	r1, r0, r1
1a0034d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0034d8:	3301      	adds	r3, #1
1a0034da:	2b08      	cmp	r3, #8
1a0034dc:	d9eb      	bls.n	1a0034b6 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0034de:	bc30      	pop	{r4, r5}
1a0034e0:	4770      	bx	lr
1a0034e2:	bf00      	nop
1a0034e4:	1a004a00 	.word	0x1a004a00
1a0034e8:	400f4000 	.word	0x400f4000

1a0034ec <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0034ec:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0034ee:	4c0b      	ldr	r4, [pc, #44]	; (1a00351c <Board_SPI_Init+0x30>)
1a0034f0:	4620      	mov	r0, r4
1a0034f2:	f000 fe11 	bl	1a004118 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0034f6:	6863      	ldr	r3, [r4, #4]
1a0034f8:	f023 0304 	bic.w	r3, r3, #4
1a0034fc:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0034fe:	6823      	ldr	r3, [r4, #0]
1a003500:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003504:	f043 0307 	orr.w	r3, r3, #7
1a003508:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00350a:	4620      	mov	r0, r4
1a00350c:	4904      	ldr	r1, [pc, #16]	; (1a003520 <Board_SPI_Init+0x34>)
1a00350e:	f000 fde3 	bl	1a0040d8 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003512:	6863      	ldr	r3, [r4, #4]
1a003514:	f043 0302 	orr.w	r3, r3, #2
1a003518:	6063      	str	r3, [r4, #4]
1a00351a:	bd10      	pop	{r4, pc}
1a00351c:	400c5000 	.word	0x400c5000
1a003520:	000186a0 	.word	0x000186a0

1a003524 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a003524:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003526:	2000      	movs	r0, #0
1a003528:	f000 fd8c 	bl	1a004044 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00352c:	f640 0208 	movw	r2, #2056	; 0x808
1a003530:	4b03      	ldr	r3, [pc, #12]	; (1a003540 <Board_I2C_Init+0x1c>)
1a003532:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003536:	2000      	movs	r0, #0
1a003538:	4902      	ldr	r1, [pc, #8]	; (1a003544 <Board_I2C_Init+0x20>)
1a00353a:	f000 fd95 	bl	1a004068 <Chip_I2C_SetClockRate>
1a00353e:	bd08      	pop	{r3, pc}
1a003540:	40086000 	.word	0x40086000
1a003544:	000f4240 	.word	0x000f4240

1a003548 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a003548:	b510      	push	{r4, lr}
1a00354a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00354c:	4c08      	ldr	r4, [pc, #32]	; (1a003570 <Board_ADC_Init+0x28>)
1a00354e:	4620      	mov	r0, r4
1a003550:	4669      	mov	r1, sp
1a003552:	f000 f991 	bl	1a003878 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003556:	4620      	mov	r0, r4
1a003558:	4669      	mov	r1, sp
1a00355a:	4a06      	ldr	r2, [pc, #24]	; (1a003574 <Board_ADC_Init+0x2c>)
1a00355c:	f000 f9ac 	bl	1a0038b8 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003560:	4620      	mov	r0, r4
1a003562:	4669      	mov	r1, sp
1a003564:	2200      	movs	r2, #0
1a003566:	f000 f9c1 	bl	1a0038ec <Chip_ADC_SetResolution>
}
1a00356a:	b002      	add	sp, #8
1a00356c:	bd10      	pop	{r4, pc}
1a00356e:	bf00      	nop
1a003570:	400e3000 	.word	0x400e3000
1a003574:	00061a80 	.word	0x00061a80

1a003578 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003578:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00357a:	4c07      	ldr	r4, [pc, #28]	; (1a003598 <Board_Debug_Init+0x20>)
1a00357c:	4620      	mov	r0, r4
1a00357e:	f000 f89d 	bl	1a0036bc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003582:	4620      	mov	r0, r4
1a003584:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003588:	f000 f8e2 	bl	1a003750 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00358c:	2303      	movs	r3, #3
1a00358e:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a003590:	2301      	movs	r3, #1
1a003592:	65e3      	str	r3, [r4, #92]	; 0x5c
1a003594:	bd10      	pop	{r4, pc}
1a003596:	bf00      	nop
1a003598:	400c1000 	.word	0x400c1000

1a00359c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00359c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00359e:	f7ff ffeb 	bl	1a003578 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0035a2:	4808      	ldr	r0, [pc, #32]	; (1a0035c4 <Board_Init+0x28>)
1a0035a4:	f000 fd3c 	bl	1a004020 <Chip_GPIO_Init>

   Board_LED_Init();
1a0035a8:	f7ff ff44 	bl	1a003434 <Board_LED_Init>
   Board_TEC_Init();
1a0035ac:	f7ff ff62 	bl	1a003474 <Board_TEC_Init>
   Board_SPI_Init();
1a0035b0:	f7ff ff9c 	bl	1a0034ec <Board_SPI_Init>
   Board_GPIO_Init();
1a0035b4:	f7ff ff7c 	bl	1a0034b0 <Board_GPIO_Init>
   Board_I2C_Init();
1a0035b8:	f7ff ffb4 	bl	1a003524 <Board_I2C_Init>
   Board_ADC_Init();
1a0035bc:	f7ff ffc4 	bl	1a003548 <Board_ADC_Init>
1a0035c0:	bd08      	pop	{r3, pc}
1a0035c2:	bf00      	nop
1a0035c4:	400f4000 	.word	0x400f4000

1a0035c8 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0035c8:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0035ca:	4b04      	ldr	r3, [pc, #16]	; (1a0035dc <SystemInit+0x14>)
1a0035cc:	4a04      	ldr	r2, [pc, #16]	; (1a0035e0 <SystemInit+0x18>)
1a0035ce:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0035d0:	f000 fcfa 	bl	1a003fc8 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0035d4:	f000 f856 	bl	1a003684 <Board_SystemInit>
1a0035d8:	bd08      	pop	{r3, pc}
1a0035da:	bf00      	nop
1a0035dc:	e000ed08 	.word	0xe000ed08
1a0035e0:	1a000000 	.word	0x1a000000

1a0035e4 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a0035e4:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0035e6:	2300      	movs	r3, #0
1a0035e8:	e00c      	b.n	1a003604 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0035ea:	4a09      	ldr	r2, [pc, #36]	; (1a003610 <Board_SetupMuxing+0x2c>)
1a0035ec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0035f0:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0035f4:	784a      	ldrb	r2, [r1, #1]
1a0035f6:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0035f8:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0035fc:	4905      	ldr	r1, [pc, #20]	; (1a003614 <Board_SetupMuxing+0x30>)
1a0035fe:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003602:	3301      	adds	r3, #1
1a003604:	2b1c      	cmp	r3, #28
1a003606:	d9f0      	bls.n	1a0035ea <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003608:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00360c:	4770      	bx	lr
1a00360e:	bf00      	nop
1a003610:	1a004a34 	.word	0x1a004a34
1a003614:	40086000 	.word	0x40086000

1a003618 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003618:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00361a:	4a17      	ldr	r2, [pc, #92]	; (1a003678 <Board_SetupClocking+0x60>)
1a00361c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003624:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003628:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00362c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003634:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003638:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00363c:	2006      	movs	r0, #6
1a00363e:	490f      	ldr	r1, [pc, #60]	; (1a00367c <Board_SetupClocking+0x64>)
1a003640:	2201      	movs	r2, #1
1a003642:	f000 fc19 	bl	1a003e78 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003646:	2400      	movs	r4, #0
1a003648:	e00a      	b.n	1a003660 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00364a:	4a0d      	ldr	r2, [pc, #52]	; (1a003680 <Board_SetupClocking+0x68>)
1a00364c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a003650:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003654:	7859      	ldrb	r1, [r3, #1]
1a003656:	789a      	ldrb	r2, [r3, #2]
1a003658:	2301      	movs	r3, #1
1a00365a:	f000 fb75 	bl	1a003d48 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00365e:	3401      	adds	r4, #1
1a003660:	2c00      	cmp	r4, #0
1a003662:	d0f2      	beq.n	1a00364a <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003664:	4b04      	ldr	r3, [pc, #16]	; (1a003678 <Board_SetupClocking+0x60>)
1a003666:	685a      	ldr	r2, [r3, #4]
1a003668:	f022 020c 	bic.w	r2, r2, #12
1a00366c:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00366e:	685a      	ldr	r2, [r3, #4]
1a003670:	f042 0203 	orr.w	r2, r2, #3
1a003674:	605a      	str	r2, [r3, #4]
1a003676:	bd10      	pop	{r4, pc}
1a003678:	40043000 	.word	0x40043000
1a00367c:	0c28cb00 	.word	0x0c28cb00
1a003680:	1a004a30 	.word	0x1a004a30

1a003684 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003684:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003686:	f7ff ffad 	bl	1a0035e4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00368a:	f7ff ffc5 	bl	1a003618 <Board_SetupClocking>
1a00368e:	bd08      	pop	{r3, pc}

1a003690 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003690:	4b09      	ldr	r3, [pc, #36]	; (1a0036b8 <Chip_UART_GetIndex+0x28>)
1a003692:	4298      	cmp	r0, r3
1a003694:	d009      	beq.n	1a0036aa <Chip_UART_GetIndex+0x1a>
1a003696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00369a:	4298      	cmp	r0, r3
1a00369c:	d007      	beq.n	1a0036ae <Chip_UART_GetIndex+0x1e>
1a00369e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0036a2:	4298      	cmp	r0, r3
1a0036a4:	d005      	beq.n	1a0036b2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0036a6:	2000      	movs	r0, #0
1a0036a8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0036aa:	2002      	movs	r0, #2
1a0036ac:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0036ae:	2003      	movs	r0, #3
1a0036b0:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a0036b2:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0036b4:	4770      	bx	lr
1a0036b6:	bf00      	nop
1a0036b8:	400c1000 	.word	0x400c1000

1a0036bc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0036bc:	b510      	push	{r4, lr}
1a0036be:	b082      	sub	sp, #8
1a0036c0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0036c2:	f7ff ffe5 	bl	1a003690 <Chip_UART_GetIndex>
1a0036c6:	4b10      	ldr	r3, [pc, #64]	; (1a003708 <Chip_UART_Init+0x4c>)
1a0036c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0036cc:	2101      	movs	r1, #1
1a0036ce:	460a      	mov	r2, r1
1a0036d0:	460b      	mov	r3, r1
1a0036d2:	f000 fb73 	bl	1a003dbc <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0036d6:	2307      	movs	r3, #7
1a0036d8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0036da:	2300      	movs	r3, #0
1a0036dc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0036de:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0036e0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0036e2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0036e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0036e6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0036e8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0036ea:	4b08      	ldr	r3, [pc, #32]	; (1a00370c <Chip_UART_Init+0x50>)
1a0036ec:	429c      	cmp	r4, r3
1a0036ee:	d103      	bne.n	1a0036f8 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a0036f0:	2300      	movs	r3, #0
1a0036f2:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a0036f4:	69a3      	ldr	r3, [r4, #24]
1a0036f6:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0036f8:	2303      	movs	r3, #3
1a0036fa:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0036fc:	2310      	movs	r3, #16
1a0036fe:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003700:	9b01      	ldr	r3, [sp, #4]
}
1a003702:	b002      	add	sp, #8
1a003704:	bd10      	pop	{r4, pc}
1a003706:	bf00      	nop
1a003708:	1a004ab0 	.word	0x1a004ab0
1a00370c:	40082000 	.word	0x40082000

1a003710 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003710:	b538      	push	{r3, r4, r5, lr}
1a003712:	4605      	mov	r5, r0
1a003714:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003716:	f7ff ffbb 	bl	1a003690 <Chip_UART_GetIndex>
1a00371a:	4b0c      	ldr	r3, [pc, #48]	; (1a00374c <Chip_UART_SetBaud+0x3c>)
1a00371c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003720:	f000 fb84 	bl	1a003e2c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003724:	0124      	lsls	r4, r4, #4
1a003726:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00372a:	68ea      	ldr	r2, [r5, #12]
1a00372c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003730:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a003732:	b2da      	uxtb	r2, r3
1a003734:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a003736:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00373a:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00373c:	68ea      	ldr	r2, [r5, #12]
1a00373e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003742:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003744:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003748:	0900      	lsrs	r0, r0, #4
1a00374a:	bd38      	pop	{r3, r4, r5, pc}
1a00374c:	1a004aa8 	.word	0x1a004aa8

1a003750 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003754:	b083      	sub	sp, #12
1a003756:	4683      	mov	fp, r0
1a003758:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00375a:	f7ff ff99 	bl	1a003690 <Chip_UART_GetIndex>
1a00375e:	4b34      	ldr	r3, [pc, #208]	; (1a003830 <Chip_UART_SetBaudFDR+0xe0>)
1a003760:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003764:	f000 fb62 	bl	1a003e2c <Chip_Clock_GetRate>
1a003768:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a00376a:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00376e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003770:	2300      	movs	r3, #0
1a003772:	9301      	str	r3, [sp, #4]
1a003774:	46a2      	mov	sl, r4
1a003776:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003778:	e029      	b.n	1a0037ce <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00377a:	2300      	movs	r3, #0
1a00377c:	0932      	lsrs	r2, r6, #4
1a00377e:	0730      	lsls	r0, r6, #28
1a003780:	fba0 0104 	umull	r0, r1, r0, r4
1a003784:	fb04 1102 	mla	r1, r4, r2, r1
1a003788:	1962      	adds	r2, r4, r5
1a00378a:	fb08 f202 	mul.w	r2, r8, r2
1a00378e:	f000 fd23 	bl	1a0041d8 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a003792:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a003794:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a003796:	2800      	cmp	r0, #0
1a003798:	da01      	bge.n	1a00379e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a00379a:	4243      	negs	r3, r0
				div ++;
1a00379c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00379e:	429f      	cmp	r7, r3
1a0037a0:	d30a      	bcc.n	1a0037b8 <Chip_UART_SetBaudFDR+0x68>
1a0037a2:	b14a      	cbz	r2, 1a0037b8 <Chip_UART_SetBaudFDR+0x68>
1a0037a4:	0c11      	lsrs	r1, r2, #16
1a0037a6:	d107      	bne.n	1a0037b8 <Chip_UART_SetBaudFDR+0x68>
1a0037a8:	2a02      	cmp	r2, #2
1a0037aa:	d800      	bhi.n	1a0037ae <Chip_UART_SetBaudFDR+0x5e>
1a0037ac:	b925      	cbnz	r5, 1a0037b8 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0037ae:	b14b      	cbz	r3, 1a0037c4 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0037b0:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0037b2:	9501      	str	r5, [sp, #4]
			sm = m;
1a0037b4:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0037b6:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a0037b8:	3501      	adds	r5, #1
1a0037ba:	e000      	b.n	1a0037be <Chip_UART_SetBaudFDR+0x6e>
1a0037bc:	2500      	movs	r5, #0
1a0037be:	42a5      	cmp	r5, r4
1a0037c0:	d3db      	bcc.n	1a00377a <Chip_UART_SetBaudFDR+0x2a>
1a0037c2:	e003      	b.n	1a0037cc <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0037c4:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0037c6:	9501      	str	r5, [sp, #4]
			sm = m;
1a0037c8:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0037ca:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0037cc:	3401      	adds	r4, #1
1a0037ce:	b10f      	cbz	r7, 1a0037d4 <Chip_UART_SetBaudFDR+0x84>
1a0037d0:	2c0f      	cmp	r4, #15
1a0037d2:	d9f3      	bls.n	1a0037bc <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0037d4:	f1b9 0f00 	cmp.w	r9, #0
1a0037d8:	d026      	beq.n	1a003828 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0037da:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0037de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0037e2:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0037e6:	fa5f f389 	uxtb.w	r3, r9
1a0037ea:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a0037ee:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0037f2:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0037f6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0037fe:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003802:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003806:	b2da      	uxtb	r2, r3
1a003808:	9901      	ldr	r1, [sp, #4]
1a00380a:	f001 030f 	and.w	r3, r1, #15
1a00380e:	4313      	orrs	r3, r2
1a003810:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003814:	0933      	lsrs	r3, r6, #4
1a003816:	fb0a f303 	mul.w	r3, sl, r3
1a00381a:	eb0a 0001 	add.w	r0, sl, r1
1a00381e:	fb09 f000 	mul.w	r0, r9, r0
1a003822:	fbb3 f0f0 	udiv	r0, r3, r0
1a003826:	e000      	b.n	1a00382a <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a003828:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a00382a:	b003      	add	sp, #12
1a00382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003830:	1a004aa8 	.word	0x1a004aa8

1a003834 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003834:	4b03      	ldr	r3, [pc, #12]	; (1a003844 <Chip_ADC_GetClockIndex+0x10>)
1a003836:	4298      	cmp	r0, r3
1a003838:	d101      	bne.n	1a00383e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a00383a:	2004      	movs	r0, #4
1a00383c:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00383e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003840:	4770      	bx	lr
1a003842:	bf00      	nop
1a003844:	400e4000 	.word	0x400e4000

1a003848 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003848:	b570      	push	{r4, r5, r6, lr}
1a00384a:	460d      	mov	r5, r1
1a00384c:	4614      	mov	r4, r2
1a00384e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003850:	f7ff fff0 	bl	1a003834 <Chip_ADC_GetClockIndex>
1a003854:	f000 faea 	bl	1a003e2c <Chip_Clock_GetRate>
	if (burstMode) {
1a003858:	b115      	cbz	r5, 1a003860 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a00385a:	fb04 f406 	mul.w	r4, r4, r6
1a00385e:	e003      	b.n	1a003868 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003860:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003864:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003868:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00386c:	0064      	lsls	r4, r4, #1
1a00386e:	fbb0 f4f4 	udiv	r4, r0, r4
1a003872:	1e60      	subs	r0, r4, #1
	return div;
}
1a003874:	b2c0      	uxtb	r0, r0
1a003876:	bd70      	pop	{r4, r5, r6, pc}

1a003878 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003878:	b538      	push	{r3, r4, r5, lr}
1a00387a:	4605      	mov	r5, r0
1a00387c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00387e:	f7ff ffd9 	bl	1a003834 <Chip_ADC_GetClockIndex>
1a003882:	2101      	movs	r1, #1
1a003884:	460a      	mov	r2, r1
1a003886:	460b      	mov	r3, r1
1a003888:	f000 fa98 	bl	1a003dbc <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00388c:	2100      	movs	r1, #0
1a00388e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003890:	4a08      	ldr	r2, [pc, #32]	; (1a0038b4 <Chip_ADC_Init+0x3c>)
1a003892:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003894:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003896:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003898:	4628      	mov	r0, r5
1a00389a:	230b      	movs	r3, #11
1a00389c:	f7ff ffd4 	bl	1a003848 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0038a0:	0200      	lsls	r0, r0, #8
1a0038a2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0038a6:	7920      	ldrb	r0, [r4, #4]
1a0038a8:	f000 0007 	and.w	r0, r0, #7
1a0038ac:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a0038b0:	6028      	str	r0, [r5, #0]
1a0038b2:	bd38      	pop	{r3, r4, r5, pc}
1a0038b4:	00061a80 	.word	0x00061a80

1a0038b8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0038b8:	b570      	push	{r4, r5, r6, lr}
1a0038ba:	4606      	mov	r6, r0
1a0038bc:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0038be:	6804      	ldr	r4, [r0, #0]
1a0038c0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0038c4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0038c8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0038ca:	790b      	ldrb	r3, [r1, #4]
1a0038cc:	f1c3 030b 	rsb	r3, r3, #11
1a0038d0:	7949      	ldrb	r1, [r1, #5]
1a0038d2:	b2db      	uxtb	r3, r3
1a0038d4:	f7ff ffb8 	bl	1a003848 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0038d8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0038dc:	792c      	ldrb	r4, [r5, #4]
1a0038de:	f004 0407 	and.w	r4, r4, #7
1a0038e2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a0038e6:	6030      	str	r0, [r6, #0]
1a0038e8:	bd70      	pop	{r4, r5, r6, pc}
1a0038ea:	bf00      	nop

1a0038ec <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0038ec:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0038ee:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0038f0:	680a      	ldr	r2, [r1, #0]
1a0038f2:	f7ff ffe1 	bl	1a0038b8 <Chip_ADC_SetSampleRate>
1a0038f6:	bd08      	pop	{r3, pc}

1a0038f8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0038f8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0038fa:	2069      	movs	r0, #105	; 0x69
1a0038fc:	f000 fa96 	bl	1a003e2c <Chip_Clock_GetRate>
1a003900:	4b01      	ldr	r3, [pc, #4]	; (1a003908 <SystemCoreClockUpdate+0x10>)
1a003902:	6018      	str	r0, [r3, #0]
1a003904:	bd08      	pop	{r3, pc}
1a003906:	bf00      	nop
1a003908:	1000339c 	.word	0x1000339c

1a00390c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00390c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00390e:	680b      	ldr	r3, [r1, #0]
1a003910:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003914:	d002      	beq.n	1a00391c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00391a:	600b      	str	r3, [r1, #0]
1a00391c:	4686      	mov	lr, r0
1a00391e:	2601      	movs	r6, #1
1a003920:	e041      	b.n	1a0039a6 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a003922:	680d      	ldr	r5, [r1, #0]
1a003924:	f015 0f40 	tst.w	r5, #64	; 0x40
1a003928:	d008      	beq.n	1a00393c <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00392a:	1c7b      	adds	r3, r7, #1
1a00392c:	fa04 f203 	lsl.w	r2, r4, r3
1a003930:	694b      	ldr	r3, [r1, #20]
1a003932:	fb03 f302 	mul.w	r3, r3, r2
1a003936:	fbb3 f3f6 	udiv	r3, r3, r6
1a00393a:	e004      	b.n	1a003946 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a00393c:	694b      	ldr	r3, [r1, #20]
1a00393e:	fb04 f303 	mul.w	r3, r4, r3
1a003942:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003946:	4a19      	ldr	r2, [pc, #100]	; (1a0039ac <pll_calc_divs+0xa0>)
1a003948:	4293      	cmp	r3, r2
1a00394a:	d920      	bls.n	1a00398e <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00394c:	4a18      	ldr	r2, [pc, #96]	; (1a0039b0 <pll_calc_divs+0xa4>)
1a00394e:	4293      	cmp	r3, r2
1a003950:	d823      	bhi.n	1a00399a <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a003952:	f015 0f80 	tst.w	r5, #128	; 0x80
1a003956:	d103      	bne.n	1a003960 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a003958:	1c7a      	adds	r2, r7, #1
1a00395a:	fa23 f202 	lsr.w	r2, r3, r2
1a00395e:	e000      	b.n	1a003962 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003960:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003962:	1a85      	subs	r5, r0, r2
1a003964:	d502      	bpl.n	1a00396c <pll_calc_divs+0x60>
		return -val;
1a003966:	f1c5 0c00 	rsb	ip, r5, #0
1a00396a:	e000      	b.n	1a00396e <pll_calc_divs+0x62>
	return val;
1a00396c:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00396e:	45e6      	cmp	lr, ip
1a003970:	d90d      	bls.n	1a00398e <pll_calc_divs+0x82>
					ppll->nsel = n;
1a003972:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a003974:	f107 0e01 	add.w	lr, r7, #1
1a003978:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a00397c:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00397e:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a003980:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003982:	2d00      	cmp	r5, #0
1a003984:	da02      	bge.n	1a00398c <pll_calc_divs+0x80>
		return -val;
1a003986:	f1c5 0e00 	rsb	lr, r5, #0
1a00398a:	e000      	b.n	1a00398e <pll_calc_divs+0x82>
	return val;
1a00398c:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00398e:	3401      	adds	r4, #1
1a003990:	e000      	b.n	1a003994 <pll_calc_divs+0x88>
1a003992:	2401      	movs	r4, #1
1a003994:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a003998:	ddc3      	ble.n	1a003922 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00399a:	3701      	adds	r7, #1
1a00399c:	e000      	b.n	1a0039a0 <pll_calc_divs+0x94>
1a00399e:	2700      	movs	r7, #0
1a0039a0:	2f03      	cmp	r7, #3
1a0039a2:	ddf6      	ble.n	1a003992 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a0039a4:	3601      	adds	r6, #1
1a0039a6:	2e04      	cmp	r6, #4
1a0039a8:	ddf9      	ble.n	1a00399e <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a0039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0039ac:	094c5eff 	.word	0x094c5eff
1a0039b0:	1312d000 	.word	0x1312d000

1a0039b4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0039b6:	b099      	sub	sp, #100	; 0x64
1a0039b8:	4605      	mov	r5, r0
1a0039ba:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0039bc:	4668      	mov	r0, sp
1a0039be:	2100      	movs	r1, #0
1a0039c0:	2260      	movs	r2, #96	; 0x60
1a0039c2:	f000 ff08 	bl	1a0047d6 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0039c6:	2380      	movs	r3, #128	; 0x80
1a0039c8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0039ca:	6963      	ldr	r3, [r4, #20]
1a0039cc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0039ce:	7923      	ldrb	r3, [r4, #4]
1a0039d0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0039d4:	4628      	mov	r0, r5
1a0039d6:	4669      	mov	r1, sp
1a0039d8:	f7ff ff98 	bl	1a00390c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0039dc:	9b06      	ldr	r3, [sp, #24]
1a0039de:	42ab      	cmp	r3, r5
1a0039e0:	d107      	bne.n	1a0039f2 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a0039e2:	466d      	mov	r5, sp
1a0039e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0039e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0039e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0039ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0039f0:	e05e      	b.n	1a003ab0 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0039f2:	1aeb      	subs	r3, r5, r3
1a0039f4:	d500      	bpl.n	1a0039f8 <pll_get_frac+0x44>
		return -val;
1a0039f6:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0039f8:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0039fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003a00:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003a02:	6963      	ldr	r3, [r4, #20]
1a003a04:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003a06:	7923      	ldrb	r3, [r4, #4]
1a003a08:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003a0c:	4628      	mov	r0, r5
1a003a0e:	a910      	add	r1, sp, #64	; 0x40
1a003a10:	f7ff ff7c 	bl	1a00390c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003a14:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003a16:	42ab      	cmp	r3, r5
1a003a18:	d107      	bne.n	1a003a2a <pll_get_frac+0x76>
		*ppll = pll[2];
1a003a1a:	ad10      	add	r5, sp, #64	; 0x40
1a003a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003a28:	e042      	b.n	1a003ab0 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003a2a:	1aeb      	subs	r3, r5, r3
1a003a2c:	d500      	bpl.n	1a003a30 <pll_get_frac+0x7c>
		return -val;
1a003a2e:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003a30:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003a32:	4b20      	ldr	r3, [pc, #128]	; (1a003ab4 <pll_get_frac+0x100>)
1a003a34:	429d      	cmp	r5, r3
1a003a36:	d812      	bhi.n	1a003a5e <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a003a38:	2340      	movs	r3, #64	; 0x40
1a003a3a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003a3c:	6963      	ldr	r3, [r4, #20]
1a003a3e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003a40:	4628      	mov	r0, r5
1a003a42:	a908      	add	r1, sp, #32
1a003a44:	f7ff ff62 	bl	1a00390c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003a4a:	42ab      	cmp	r3, r5
1a003a4c:	d107      	bne.n	1a003a5e <pll_get_frac+0xaa>
			*ppll = pll[1];
1a003a4e:	ad08      	add	r5, sp, #32
1a003a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003a5c:	e028      	b.n	1a003ab0 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003a60:	1aed      	subs	r5, r5, r3
1a003a62:	d500      	bpl.n	1a003a66 <pll_get_frac+0xb2>
		return -val;
1a003a64:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003a66:	42ae      	cmp	r6, r5
1a003a68:	dc11      	bgt.n	1a003a8e <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a003a6a:	42be      	cmp	r6, r7
1a003a6c:	dc07      	bgt.n	1a003a7e <pll_get_frac+0xca>
			*ppll = pll[0];
1a003a6e:	466d      	mov	r5, sp
1a003a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a7c:	e018      	b.n	1a003ab0 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003a7e:	ad10      	add	r5, sp, #64	; 0x40
1a003a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a8c:	e010      	b.n	1a003ab0 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a003a8e:	42af      	cmp	r7, r5
1a003a90:	db07      	blt.n	1a003aa2 <pll_get_frac+0xee>
			*ppll = pll[1];
1a003a92:	ad08      	add	r5, sp, #32
1a003a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003aa0:	e006      	b.n	1a003ab0 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003aa2:	ad10      	add	r5, sp, #64	; 0x40
1a003aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003aa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a003ab0:	b019      	add	sp, #100	; 0x64
1a003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003ab4:	068e7780 	.word	0x068e7780

1a003ab8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003ab8:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003aba:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003abc:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003abe:	e010      	b.n	1a003ae2 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003ac0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003ac4:	0052      	lsls	r2, r2, #1
1a003ac6:	4d0d      	ldr	r5, [pc, #52]	; (1a003afc <Chip_Clock_FindBaseClock+0x44>)
1a003ac8:	5aaa      	ldrh	r2, [r5, r2]
1a003aca:	4282      	cmp	r2, r0
1a003acc:	d806      	bhi.n	1a003adc <Chip_Clock_FindBaseClock+0x24>
1a003ace:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003ad2:	0052      	lsls	r2, r2, #1
1a003ad4:	442a      	add	r2, r5
1a003ad6:	8852      	ldrh	r2, [r2, #2]
1a003ad8:	4282      	cmp	r2, r0
1a003ada:	d201      	bcs.n	1a003ae0 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003adc:	3301      	adds	r3, #1
1a003ade:	e000      	b.n	1a003ae2 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a003ae0:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003ae2:	291c      	cmp	r1, #28
1a003ae4:	d107      	bne.n	1a003af6 <Chip_Clock_FindBaseClock+0x3e>
1a003ae6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003aea:	0052      	lsls	r2, r2, #1
1a003aec:	4c03      	ldr	r4, [pc, #12]	; (1a003afc <Chip_Clock_FindBaseClock+0x44>)
1a003aee:	4422      	add	r2, r4
1a003af0:	7914      	ldrb	r4, [r2, #4]
1a003af2:	428c      	cmp	r4, r1
1a003af4:	d1e4      	bne.n	1a003ac0 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a003af6:	4608      	mov	r0, r1
1a003af8:	bc30      	pop	{r4, r5}
1a003afa:	4770      	bx	lr
1a003afc:	1a004ac4 	.word	0x1a004ac4

1a003b00 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003b00:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003b06:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003b08:	4a0d      	ldr	r2, [pc, #52]	; (1a003b40 <Chip_Clock_EnableCrystal+0x40>)
1a003b0a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003b0c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003b10:	6992      	ldr	r2, [r2, #24]
1a003b12:	428a      	cmp	r2, r1
1a003b14:	d001      	beq.n	1a003b1a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b16:	4a0a      	ldr	r2, [pc, #40]	; (1a003b40 <Chip_Clock_EnableCrystal+0x40>)
1a003b18:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003b1a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003b1e:	4a09      	ldr	r2, [pc, #36]	; (1a003b44 <Chip_Clock_EnableCrystal+0x44>)
1a003b20:	6811      	ldr	r1, [r2, #0]
1a003b22:	4a09      	ldr	r2, [pc, #36]	; (1a003b48 <Chip_Clock_EnableCrystal+0x48>)
1a003b24:	4291      	cmp	r1, r2
1a003b26:	d901      	bls.n	1a003b2c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003b28:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b2c:	4a04      	ldr	r2, [pc, #16]	; (1a003b40 <Chip_Clock_EnableCrystal+0x40>)
1a003b2e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003b30:	9b01      	ldr	r3, [sp, #4]
1a003b32:	1e5a      	subs	r2, r3, #1
1a003b34:	9201      	str	r2, [sp, #4]
1a003b36:	2b00      	cmp	r3, #0
1a003b38:	d1fa      	bne.n	1a003b30 <Chip_Clock_EnableCrystal+0x30>
}
1a003b3a:	b002      	add	sp, #8
1a003b3c:	4770      	bx	lr
1a003b3e:	bf00      	nop
1a003b40:	40050000 	.word	0x40050000
1a003b44:	1a004a14 	.word	0x1a004a14
1a003b48:	01312cff 	.word	0x01312cff

1a003b4c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003b4c:	3012      	adds	r0, #18
1a003b4e:	4b05      	ldr	r3, [pc, #20]	; (1a003b64 <Chip_Clock_GetDividerSource+0x18>)
1a003b50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003b54:	f010 0f01 	tst.w	r0, #1
1a003b58:	d102      	bne.n	1a003b60 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003b5a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003b5e:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a003b60:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003b62:	4770      	bx	lr
1a003b64:	40050000 	.word	0x40050000

1a003b68 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003b68:	f100 0212 	add.w	r2, r0, #18
1a003b6c:	4b03      	ldr	r3, [pc, #12]	; (1a003b7c <Chip_Clock_GetDividerDivisor+0x14>)
1a003b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003b72:	4b03      	ldr	r3, [pc, #12]	; (1a003b80 <Chip_Clock_GetDividerDivisor+0x18>)
1a003b74:	5c18      	ldrb	r0, [r3, r0]
}
1a003b76:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003b7a:	4770      	bx	lr
1a003b7c:	40050000 	.word	0x40050000
1a003b80:	1a004abc 	.word	0x1a004abc

1a003b84 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003b84:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003b86:	2810      	cmp	r0, #16
1a003b88:	d80a      	bhi.n	1a003ba0 <Chip_Clock_GetClockInputHz+0x1c>
1a003b8a:	e8df f000 	tbb	[pc, r0]
1a003b8e:	0b42      	.short	0x0b42
1a003b90:	091f160d 	.word	0x091f160d
1a003b94:	2b282522 	.word	0x2b282522
1a003b98:	322e0909 	.word	0x322e0909
1a003b9c:	3a36      	.short	0x3a36
1a003b9e:	3e          	.byte	0x3e
1a003b9f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003ba0:	2000      	movs	r0, #0
1a003ba2:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003ba4:	481e      	ldr	r0, [pc, #120]	; (1a003c20 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003ba6:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003ba8:	4b1e      	ldr	r3, [pc, #120]	; (1a003c24 <Chip_Clock_GetClockInputHz+0xa0>)
1a003baa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003bae:	f003 0307 	and.w	r3, r3, #7
1a003bb2:	2b04      	cmp	r3, #4
1a003bb4:	d130      	bne.n	1a003c18 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003bb6:	2000      	movs	r0, #0
1a003bb8:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003bba:	4b1a      	ldr	r3, [pc, #104]	; (1a003c24 <Chip_Clock_GetClockInputHz+0xa0>)
1a003bbc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003bc0:	f003 0307 	and.w	r3, r3, #7
1a003bc4:	2b04      	cmp	r3, #4
1a003bc6:	d029      	beq.n	1a003c1c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003bc8:	4817      	ldr	r0, [pc, #92]	; (1a003c28 <Chip_Clock_GetClockInputHz+0xa4>)
1a003bca:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003bcc:	4b17      	ldr	r3, [pc, #92]	; (1a003c2c <Chip_Clock_GetClockInputHz+0xa8>)
1a003bce:	6818      	ldr	r0, [r3, #0]
		break;
1a003bd0:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003bd2:	4b17      	ldr	r3, [pc, #92]	; (1a003c30 <Chip_Clock_GetClockInputHz+0xac>)
1a003bd4:	6818      	ldr	r0, [r3, #0]
		break;
1a003bd6:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003bd8:	4b16      	ldr	r3, [pc, #88]	; (1a003c34 <Chip_Clock_GetClockInputHz+0xb0>)
1a003bda:	6818      	ldr	r0, [r3, #0]
		break;
1a003bdc:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003bde:	4b15      	ldr	r3, [pc, #84]	; (1a003c34 <Chip_Clock_GetClockInputHz+0xb0>)
1a003be0:	6858      	ldr	r0, [r3, #4]
		break;
1a003be2:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003be4:	f000 f86a 	bl	1a003cbc <Chip_Clock_GetMainPLLHz>
		break;
1a003be8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003bea:	2100      	movs	r1, #0
1a003bec:	f000 f89a 	bl	1a003d24 <Chip_Clock_GetDivRate>
		break;
1a003bf0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003bf2:	2101      	movs	r1, #1
1a003bf4:	f000 f896 	bl	1a003d24 <Chip_Clock_GetDivRate>
		break;
1a003bf8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003bfa:	2102      	movs	r1, #2
1a003bfc:	f000 f892 	bl	1a003d24 <Chip_Clock_GetDivRate>
		break;
1a003c00:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003c02:	2103      	movs	r1, #3
1a003c04:	f000 f88e 	bl	1a003d24 <Chip_Clock_GetDivRate>
		break;
1a003c08:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003c0a:	2104      	movs	r1, #4
1a003c0c:	f000 f88a 	bl	1a003d24 <Chip_Clock_GetDivRate>
		break;
1a003c10:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a003c12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a003c16:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a003c18:	4803      	ldr	r0, [pc, #12]	; (1a003c28 <Chip_Clock_GetClockInputHz+0xa4>)
1a003c1a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a003c1c:	4806      	ldr	r0, [pc, #24]	; (1a003c38 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a003c1e:	bd08      	pop	{r3, pc}
1a003c20:	00b71b00 	.word	0x00b71b00
1a003c24:	40043000 	.word	0x40043000
1a003c28:	017d7840 	.word	0x017d7840
1a003c2c:	1a004a18 	.word	0x1a004a18
1a003c30:	1a004a14 	.word	0x1a004a14
1a003c34:	10003340 	.word	0x10003340
1a003c38:	02faf080 	.word	0x02faf080

1a003c3c <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003c3c:	b538      	push	{r3, r4, r5, lr}
1a003c3e:	4605      	mov	r5, r0
1a003c40:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003c42:	7908      	ldrb	r0, [r1, #4]
1a003c44:	f7ff ff9e 	bl	1a003b84 <Chip_Clock_GetClockInputHz>
1a003c48:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003c4a:	4b19      	ldr	r3, [pc, #100]	; (1a003cb0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003c4c:	442b      	add	r3, r5
1a003c4e:	4a19      	ldr	r2, [pc, #100]	; (1a003cb4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003c50:	4293      	cmp	r3, r2
1a003c52:	d821      	bhi.n	1a003c98 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003c54:	b318      	cbz	r0, 1a003c9e <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003c56:	2380      	movs	r3, #128	; 0x80
1a003c58:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003c5a:	2300      	movs	r3, #0
1a003c5c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003c5e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003c60:	fbb5 f3f0 	udiv	r3, r5, r0
1a003c64:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003c66:	4a14      	ldr	r2, [pc, #80]	; (1a003cb8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003c68:	4295      	cmp	r5, r2
1a003c6a:	d903      	bls.n	1a003c74 <Chip_Clock_CalcMainPLLValue+0x38>
1a003c6c:	fb03 f000 	mul.w	r0, r3, r0
1a003c70:	42a8      	cmp	r0, r5
1a003c72:	d007      	beq.n	1a003c84 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003c74:	4628      	mov	r0, r5
1a003c76:	4621      	mov	r1, r4
1a003c78:	f7ff fe9c 	bl	1a0039b4 <pll_get_frac>
		if (!ppll->nsel) {
1a003c7c:	68a3      	ldr	r3, [r4, #8]
1a003c7e:	b18b      	cbz	r3, 1a003ca4 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a003c80:	3b01      	subs	r3, #1
1a003c82:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003c84:	6923      	ldr	r3, [r4, #16]
1a003c86:	b183      	cbz	r3, 1a003caa <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003c88:	68e2      	ldr	r2, [r4, #12]
1a003c8a:	b10a      	cbz	r2, 1a003c90 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003c8c:	3a01      	subs	r2, #1
1a003c8e:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a003c90:	3b01      	subs	r3, #1
1a003c92:	6123      	str	r3, [r4, #16]

	return 0;
1a003c94:	2000      	movs	r0, #0
1a003c96:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003c98:	f04f 30ff 	mov.w	r0, #4294967295
1a003c9c:	bd38      	pop	{r3, r4, r5, pc}
1a003c9e:	f04f 30ff 	mov.w	r0, #4294967295
1a003ca2:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003ca4:	f04f 30ff 	mov.w	r0, #4294967295
1a003ca8:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a003caa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a003cae:	bd38      	pop	{r3, r4, r5, pc}
1a003cb0:	ff6b3a10 	.word	0xff6b3a10
1a003cb4:	0b940510 	.word	0x0b940510
1a003cb8:	094c5eff 	.word	0x094c5eff

1a003cbc <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a003cbc:	b570      	push	{r4, r5, r6, lr}
1a003cbe:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003cc0:	4d16      	ldr	r5, [pc, #88]	; (1a003d1c <Chip_Clock_GetMainPLLHz+0x60>)
1a003cc2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003cc4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003cc8:	f7ff ff5c 	bl	1a003b84 <Chip_Clock_GetClockInputHz>
1a003ccc:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003cce:	4b14      	ldr	r3, [pc, #80]	; (1a003d20 <Chip_Clock_GetMainPLLHz+0x64>)
1a003cd0:	6818      	ldr	r0, [r3, #0]
1a003cd2:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003cd4:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a003cd6:	f010 0001 	ands.w	r0, r0, #1
1a003cda:	d01d      	beq.n	1a003d18 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a003cdc:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003ce0:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003ce4:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a003ce8:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a003cec:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a003cee:	3201      	adds	r2, #1
	p = ptab[psel];
1a003cf0:	a802      	add	r0, sp, #8
1a003cf2:	4401      	add	r1, r0
1a003cf4:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a003cf8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003cfc:	d100      	bne.n	1a003d00 <Chip_Clock_GetMainPLLHz+0x44>
1a003cfe:	b125      	cbz	r5, 1a003d0a <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a003d00:	fbb6 f0f2 	udiv	r0, r6, r2
1a003d04:	fb03 f000 	mul.w	r0, r3, r0
1a003d08:	e006      	b.n	1a003d18 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a003d0a:	0040      	lsls	r0, r0, #1
1a003d0c:	fbb3 f3f0 	udiv	r3, r3, r0
1a003d10:	fbb6 f0f2 	udiv	r0, r6, r2
1a003d14:	fb00 f003 	mul.w	r0, r0, r3
}
1a003d18:	b002      	add	sp, #8
1a003d1a:	bd70      	pop	{r4, r5, r6, pc}
1a003d1c:	40050000 	.word	0x40050000
1a003d20:	1a004ab8 	.word	0x1a004ab8

1a003d24 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a003d24:	b538      	push	{r3, r4, r5, lr}
1a003d26:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a003d28:	4608      	mov	r0, r1
1a003d2a:	f7ff ff0f 	bl	1a003b4c <Chip_Clock_GetDividerSource>
1a003d2e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003d30:	4620      	mov	r0, r4
1a003d32:	f7ff ff19 	bl	1a003b68 <Chip_Clock_GetDividerDivisor>
1a003d36:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003d38:	4628      	mov	r0, r5
1a003d3a:	f7ff ff23 	bl	1a003b84 <Chip_Clock_GetClockInputHz>
1a003d3e:	3401      	adds	r4, #1
}
1a003d40:	fbb0 f0f4 	udiv	r0, r0, r4
1a003d44:	bd38      	pop	{r3, r4, r5, pc}
1a003d46:	bf00      	nop

1a003d48 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003d48:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003d4a:	0085      	lsls	r5, r0, #2
1a003d4c:	4c0d      	ldr	r4, [pc, #52]	; (1a003d84 <Chip_Clock_SetBaseClock+0x3c>)
1a003d4e:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a003d50:	281b      	cmp	r0, #27
1a003d52:	d80f      	bhi.n	1a003d74 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003d54:	2911      	cmp	r1, #17
1a003d56:	d012      	beq.n	1a003d7e <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003d58:	4c0b      	ldr	r4, [pc, #44]	; (1a003d88 <Chip_Clock_SetBaseClock+0x40>)
1a003d5a:	402c      	ands	r4, r5

			if (autoblocken) {
1a003d5c:	b10a      	cbz	r2, 1a003d62 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a003d5e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a003d62:	b10b      	cbz	r3, 1a003d68 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003d64:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003d68:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003d6c:	0080      	lsls	r0, r0, #2
1a003d6e:	4b05      	ldr	r3, [pc, #20]	; (1a003d84 <Chip_Clock_SetBaseClock+0x3c>)
1a003d70:	501c      	str	r4, [r3, r0]
1a003d72:	e004      	b.n	1a003d7e <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003d74:	f045 0501 	orr.w	r5, r5, #1
1a003d78:	0080      	lsls	r0, r0, #2
1a003d7a:	4b02      	ldr	r3, [pc, #8]	; (1a003d84 <Chip_Clock_SetBaseClock+0x3c>)
1a003d7c:	501d      	str	r5, [r3, r0]
	}
}
1a003d7e:	bc30      	pop	{r4, r5}
1a003d80:	4770      	bx	lr
1a003d82:	bf00      	nop
1a003d84:	4005005c 	.word	0x4005005c
1a003d88:	e0fff7fe 	.word	0xe0fff7fe

1a003d8c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003d8c:	281b      	cmp	r0, #27
1a003d8e:	d808      	bhi.n	1a003da2 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003d90:	0080      	lsls	r0, r0, #2
1a003d92:	4b06      	ldr	r3, [pc, #24]	; (1a003dac <Chip_Clock_GetBaseClock+0x20>)
1a003d94:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a003d96:	f010 0f01 	tst.w	r0, #1
1a003d9a:	d104      	bne.n	1a003da6 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003d9c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003da0:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a003da2:	2011      	movs	r0, #17
1a003da4:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a003da6:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003da8:	4770      	bx	lr
1a003daa:	bf00      	nop
1a003dac:	4005005c 	.word	0x4005005c

1a003db0 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a003db0:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003db2:	f7ff ffeb 	bl	1a003d8c <Chip_Clock_GetBaseClock>
1a003db6:	f7ff fee5 	bl	1a003b84 <Chip_Clock_GetClockInputHz>
}
1a003dba:	bd08      	pop	{r3, pc}

1a003dbc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003dbc:	b909      	cbnz	r1, 1a003dc2 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a003dbe:	2101      	movs	r1, #1
1a003dc0:	e000      	b.n	1a003dc4 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a003dc2:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a003dc4:	b10a      	cbz	r2, 1a003dca <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a003dc6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003dca:	2b02      	cmp	r3, #2
1a003dcc:	d101      	bne.n	1a003dd2 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a003dce:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003dd2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003dd6:	d305      	bcc.n	1a003de4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003dd8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003ddc:	4b04      	ldr	r3, [pc, #16]	; (1a003df0 <Chip_Clock_EnableOpts+0x34>)
1a003dde:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003de2:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003de4:	3020      	adds	r0, #32
1a003de6:	4b03      	ldr	r3, [pc, #12]	; (1a003df4 <Chip_Clock_EnableOpts+0x38>)
1a003de8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003dec:	4770      	bx	lr
1a003dee:	bf00      	nop
1a003df0:	40052000 	.word	0x40052000
1a003df4:	40051000 	.word	0x40051000

1a003df8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003df8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003dfc:	d309      	bcc.n	1a003e12 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003dfe:	4a09      	ldr	r2, [pc, #36]	; (1a003e24 <Chip_Clock_Enable+0x2c>)
1a003e00:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003e04:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e08:	f043 0301 	orr.w	r3, r3, #1
1a003e0c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003e10:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003e12:	4a05      	ldr	r2, [pc, #20]	; (1a003e28 <Chip_Clock_Enable+0x30>)
1a003e14:	3020      	adds	r0, #32
1a003e16:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e1a:	f043 0301 	orr.w	r3, r3, #1
1a003e1e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003e22:	4770      	bx	lr
1a003e24:	40052000 	.word	0x40052000
1a003e28:	40051000 	.word	0x40051000

1a003e2c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003e2c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003e2e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e32:	d305      	bcc.n	1a003e40 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003e34:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003e38:	4a0d      	ldr	r2, [pc, #52]	; (1a003e70 <Chip_Clock_GetRate+0x44>)
1a003e3a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003e3e:	e004      	b.n	1a003e4a <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003e40:	f100 0320 	add.w	r3, r0, #32
1a003e44:	4a0b      	ldr	r2, [pc, #44]	; (1a003e74 <Chip_Clock_GetRate+0x48>)
1a003e46:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003e4a:	f014 0f01 	tst.w	r4, #1
1a003e4e:	d00c      	beq.n	1a003e6a <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003e50:	f7ff fe32 	bl	1a003ab8 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003e54:	f7ff ffac 	bl	1a003db0 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003e58:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003e5c:	d101      	bne.n	1a003e62 <Chip_Clock_GetRate+0x36>
			div = 1;
1a003e5e:	2301      	movs	r3, #1
1a003e60:	e000      	b.n	1a003e64 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a003e62:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003e64:	fbb0 f0f3 	udiv	r0, r0, r3
1a003e68:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003e6a:	2000      	movs	r0, #0
	}

	return rate;
}
1a003e6c:	bd10      	pop	{r4, pc}
1a003e6e:	bf00      	nop
1a003e70:	40052000 	.word	0x40052000
1a003e74:	40051000 	.word	0x40051000

1a003e78 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003e78:	b570      	push	{r4, r5, r6, lr}
1a003e7a:	b08a      	sub	sp, #40	; 0x28
1a003e7c:	4605      	mov	r5, r0
1a003e7e:	460e      	mov	r6, r1
1a003e80:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003e82:	f242 7310 	movw	r3, #10000	; 0x2710
1a003e86:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003e88:	2806      	cmp	r0, #6
1a003e8a:	d101      	bne.n	1a003e90 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003e8c:	f7ff fe38 	bl	1a003b00 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003e90:	2004      	movs	r0, #4
1a003e92:	4629      	mov	r1, r5
1a003e94:	2201      	movs	r2, #1
1a003e96:	2300      	movs	r3, #0
1a003e98:	f7ff ff56 	bl	1a003d48 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003e9c:	4a47      	ldr	r2, [pc, #284]	; (1a003fbc <Chip_SetupCoreClock+0x144>)
1a003e9e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003ea0:	f043 0301 	orr.w	r3, r3, #1
1a003ea4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003ea6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003eaa:	4630      	mov	r0, r6
1a003eac:	a901      	add	r1, sp, #4
1a003eae:	f7ff fec5 	bl	1a003c3c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003eb2:	4b43      	ldr	r3, [pc, #268]	; (1a003fc0 <Chip_SetupCoreClock+0x148>)
1a003eb4:	429e      	cmp	r6, r3
1a003eb6:	d913      	bls.n	1a003ee0 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003eb8:	9b01      	ldr	r3, [sp, #4]
1a003eba:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003ebe:	d000      	beq.n	1a003ec2 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003ec0:	e7fe      	b.n	1a003ec0 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a003ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003ec6:	d005      	beq.n	1a003ed4 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003ecc:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003ece:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a003ed0:	2601      	movs	r6, #1
1a003ed2:	e007      	b.n	1a003ee4 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003ed4:	9b04      	ldr	r3, [sp, #16]
1a003ed6:	3301      	adds	r3, #1
1a003ed8:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a003eda:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003edc:	2600      	movs	r6, #0
1a003ede:	e001      	b.n	1a003ee4 <Chip_SetupCoreClock+0x6c>
1a003ee0:	2500      	movs	r5, #0
1a003ee2:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003ee4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003ee8:	9b01      	ldr	r3, [sp, #4]
1a003eea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003eee:	9a05      	ldr	r2, [sp, #20]
1a003ef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003ef4:	9a03      	ldr	r2, [sp, #12]
1a003ef6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003efa:	9a04      	ldr	r2, [sp, #16]
1a003efc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f04:	4a2d      	ldr	r2, [pc, #180]	; (1a003fbc <Chip_SetupCoreClock+0x144>)
1a003f06:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003f08:	4b2c      	ldr	r3, [pc, #176]	; (1a003fbc <Chip_SetupCoreClock+0x144>)
1a003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003f0c:	f013 0f01 	tst.w	r3, #1
1a003f10:	d0fa      	beq.n	1a003f08 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003f12:	2004      	movs	r0, #4
1a003f14:	2109      	movs	r1, #9
1a003f16:	2201      	movs	r2, #1
1a003f18:	2300      	movs	r3, #0
1a003f1a:	f7ff ff15 	bl	1a003d48 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003f1e:	b1ee      	cbz	r6, 1a003f5c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003f20:	f242 7310 	movw	r3, #10000	; 0x2710
1a003f24:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003f28:	1e5a      	subs	r2, r3, #1
1a003f2a:	9209      	str	r2, [sp, #36]	; 0x24
1a003f2c:	2b00      	cmp	r3, #0
1a003f2e:	d1fa      	bne.n	1a003f26 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a003f30:	9b01      	ldr	r3, [sp, #4]
1a003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003f36:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003f38:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003f40:	9a05      	ldr	r2, [sp, #20]
1a003f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003f46:	9a03      	ldr	r2, [sp, #12]
1a003f48:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003f4c:	9a04      	ldr	r2, [sp, #16]
1a003f4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f56:	4a19      	ldr	r2, [pc, #100]	; (1a003fbc <Chip_SetupCoreClock+0x144>)
1a003f58:	6453      	str	r3, [r2, #68]	; 0x44
1a003f5a:	e01c      	b.n	1a003f96 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a003f5c:	b1dd      	cbz	r5, 1a003f96 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003f5e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003f62:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003f66:	1e5a      	subs	r2, r3, #1
1a003f68:	9209      	str	r2, [sp, #36]	; 0x24
1a003f6a:	2b00      	cmp	r3, #0
1a003f6c:	d1fa      	bne.n	1a003f64 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a003f6e:	9b04      	ldr	r3, [sp, #16]
1a003f70:	1e59      	subs	r1, r3, #1
1a003f72:	9104      	str	r1, [sp, #16]
1a003f74:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003f78:	9b01      	ldr	r3, [sp, #4]
1a003f7a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a003f7e:	9b05      	ldr	r3, [sp, #20]
1a003f80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a003f84:	9b03      	ldr	r3, [sp, #12]
1a003f86:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003f8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a003f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f92:	4a0a      	ldr	r2, [pc, #40]	; (1a003fbc <Chip_SetupCoreClock+0x144>)
1a003f94:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003f96:	b964      	cbnz	r4, 1a003fb2 <Chip_SetupCoreClock+0x13a>
1a003f98:	e00e      	b.n	1a003fb8 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003f9a:	4a0a      	ldr	r2, [pc, #40]	; (1a003fc4 <Chip_SetupCoreClock+0x14c>)
1a003f9c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a003fa0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003fa4:	7859      	ldrb	r1, [r3, #1]
1a003fa6:	789a      	ldrb	r2, [r3, #2]
1a003fa8:	78db      	ldrb	r3, [r3, #3]
1a003faa:	f7ff fecd 	bl	1a003d48 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003fae:	3401      	adds	r4, #1
1a003fb0:	e000      	b.n	1a003fb4 <Chip_SetupCoreClock+0x13c>
1a003fb2:	2400      	movs	r4, #0
1a003fb4:	2c11      	cmp	r4, #17
1a003fb6:	d9f0      	bls.n	1a003f9a <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003fb8:	b00a      	add	sp, #40	; 0x28
1a003fba:	bd70      	pop	{r4, r5, r6, pc}
1a003fbc:	40050000 	.word	0x40050000
1a003fc0:	068e7780 	.word	0x068e7780
1a003fc4:	1a004b30 	.word	0x1a004b30

1a003fc8 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003fc8:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003fca:	4b10      	ldr	r3, [pc, #64]	; (1a00400c <fpuInit+0x44>)
1a003fcc:	681b      	ldr	r3, [r3, #0]
1a003fce:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a003fd0:	4b0f      	ldr	r3, [pc, #60]	; (1a004010 <fpuInit+0x48>)
1a003fd2:	681b      	ldr	r3, [r3, #0]
1a003fd4:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003fd6:	9a02      	ldr	r2, [sp, #8]
1a003fd8:	4b0e      	ldr	r3, [pc, #56]	; (1a004014 <fpuInit+0x4c>)
1a003fda:	429a      	cmp	r2, r3
1a003fdc:	d105      	bne.n	1a003fea <fpuInit+0x22>
1a003fde:	9a01      	ldr	r2, [sp, #4]
1a003fe0:	4b0d      	ldr	r3, [pc, #52]	; (1a004018 <fpuInit+0x50>)
1a003fe2:	429a      	cmp	r2, r3
1a003fe4:	d003      	beq.n	1a003fee <fpuInit+0x26>
1a003fe6:	2300      	movs	r3, #0
1a003fe8:	e002      	b.n	1a003ff0 <fpuInit+0x28>
1a003fea:	2300      	movs	r3, #0
1a003fec:	e000      	b.n	1a003ff0 <fpuInit+0x28>
1a003fee:	2301      	movs	r3, #1

	if (vfpPresent) {
1a003ff0:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003ff4:	d008      	beq.n	1a004008 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a003ff6:	4a09      	ldr	r2, [pc, #36]	; (1a00401c <fpuInit+0x54>)
1a003ff8:	6813      	ldr	r3, [r2, #0]
1a003ffa:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a003ffc:	9b03      	ldr	r3, [sp, #12]
1a003ffe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004002:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a004004:	9b03      	ldr	r3, [sp, #12]
1a004006:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a004008:	b004      	add	sp, #16
1a00400a:	4770      	bx	lr
1a00400c:	e000ef40 	.word	0xe000ef40
1a004010:	e000ef44 	.word	0xe000ef44
1a004014:	10110021 	.word	0x10110021
1a004018:	11000011 	.word	0x11000011
1a00401c:	e000ed88 	.word	0xe000ed88

1a004020 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a004020:	4770      	bx	lr
1a004022:	bf00      	nop

1a004024 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a004024:	2901      	cmp	r1, #1
1a004026:	d109      	bne.n	1a00403c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a004028:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00402c:	0080      	lsls	r0, r0, #2
1a00402e:	4b04      	ldr	r3, [pc, #16]	; (1a004040 <Chip_I2C_EventHandler+0x1c>)
1a004030:	4418      	add	r0, r3
1a004032:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a004034:	7d13      	ldrb	r3, [r2, #20]
1a004036:	b2db      	uxtb	r3, r3
1a004038:	2b04      	cmp	r3, #4
1a00403a:	d0fb      	beq.n	1a004034 <Chip_I2C_EventHandler+0x10>
1a00403c:	4770      	bx	lr
1a00403e:	bf00      	nop
1a004040:	10000098 	.word	0x10000098

1a004044 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004044:	b570      	push	{r4, r5, r6, lr}
1a004046:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a004048:	4e06      	ldr	r6, [pc, #24]	; (1a004064 <Chip_I2C_Init+0x20>)
1a00404a:	00c4      	lsls	r4, r0, #3
1a00404c:	1a23      	subs	r3, r4, r0
1a00404e:	009b      	lsls	r3, r3, #2
1a004050:	4433      	add	r3, r6
1a004052:	8898      	ldrh	r0, [r3, #4]
1a004054:	f7ff fed0 	bl	1a003df8 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a004058:	1b60      	subs	r0, r4, r5
1a00405a:	0080      	lsls	r0, r0, #2
1a00405c:	5833      	ldr	r3, [r6, r0]
1a00405e:	226c      	movs	r2, #108	; 0x6c
1a004060:	619a      	str	r2, [r3, #24]
1a004062:	bd70      	pop	{r4, r5, r6, pc}
1a004064:	10000098 	.word	0x10000098

1a004068 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00406c:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a00406e:	4f09      	ldr	r7, [pc, #36]	; (1a004094 <Chip_I2C_SetClockRate+0x2c>)
1a004070:	00c5      	lsls	r5, r0, #3
1a004072:	1a2e      	subs	r6, r5, r0
1a004074:	00b6      	lsls	r6, r6, #2
1a004076:	19bb      	adds	r3, r7, r6
1a004078:	8898      	ldrh	r0, [r3, #4]
1a00407a:	f7ff fed7 	bl	1a003e2c <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00407e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a004082:	59bb      	ldr	r3, [r7, r6]
1a004084:	0842      	lsrs	r2, r0, #1
1a004086:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004088:	59bb      	ldr	r3, [r7, r6]
1a00408a:	691a      	ldr	r2, [r3, #16]
1a00408c:	1a80      	subs	r0, r0, r2
1a00408e:	6158      	str	r0, [r3, #20]
1a004090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004094:	10000098 	.word	0x10000098

1a004098 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004098:	4b03      	ldr	r3, [pc, #12]	; (1a0040a8 <Chip_SSP_GetClockIndex+0x10>)
1a00409a:	4298      	cmp	r0, r3
1a00409c:	d101      	bne.n	1a0040a2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00409e:	20a5      	movs	r0, #165	; 0xa5
1a0040a0:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0040a2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0040a4:	4770      	bx	lr
1a0040a6:	bf00      	nop
1a0040a8:	400c5000 	.word	0x400c5000

1a0040ac <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0040ac:	4b04      	ldr	r3, [pc, #16]	; (1a0040c0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0040ae:	4298      	cmp	r0, r3
1a0040b0:	d102      	bne.n	1a0040b8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0040b2:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0040b6:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0040b8:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0040bc:	4770      	bx	lr
1a0040be:	bf00      	nop
1a0040c0:	400c5000 	.word	0x400c5000

1a0040c4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0040c4:	6803      	ldr	r3, [r0, #0]
1a0040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0040ca:	0209      	lsls	r1, r1, #8
1a0040cc:	b289      	uxth	r1, r1
1a0040ce:	430b      	orrs	r3, r1
1a0040d0:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0040d2:	6102      	str	r2, [r0, #16]
1a0040d4:	4770      	bx	lr
1a0040d6:	bf00      	nop

1a0040d8 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0040d8:	b570      	push	{r4, r5, r6, lr}
1a0040da:	4606      	mov	r6, r0
1a0040dc:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0040de:	f7ff ffe5 	bl	1a0040ac <Chip_SSP_GetPeriphClockIndex>
1a0040e2:	f7ff fea3 	bl	1a003e2c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0040e6:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a0040e8:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a0040ec:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a0040ee:	e00c      	b.n	1a00410a <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0040f0:	1c4c      	adds	r4, r1, #1
1a0040f2:	fb02 f304 	mul.w	r3, r2, r4
1a0040f6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0040fa:	42ab      	cmp	r3, r5
1a0040fc:	d905      	bls.n	1a00410a <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a0040fe:	2cff      	cmp	r4, #255	; 0xff
1a004100:	d902      	bls.n	1a004108 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a004102:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a004104:	2100      	movs	r1, #0
1a004106:	e000      	b.n	1a00410a <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004108:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00410a:	42ab      	cmp	r3, r5
1a00410c:	d8f0      	bhi.n	1a0040f0 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00410e:	4630      	mov	r0, r6
1a004110:	f7ff ffd8 	bl	1a0040c4 <Chip_SSP_SetClockRate>
1a004114:	bd70      	pop	{r4, r5, r6, pc}
1a004116:	bf00      	nop

1a004118 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004118:	b510      	push	{r4, lr}
1a00411a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00411c:	f7ff ffbc 	bl	1a004098 <Chip_SSP_GetClockIndex>
1a004120:	f7ff fe6a 	bl	1a003df8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004124:	4620      	mov	r0, r4
1a004126:	f7ff ffc1 	bl	1a0040ac <Chip_SSP_GetPeriphClockIndex>
1a00412a:	f7ff fe65 	bl	1a003df8 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00412e:	6863      	ldr	r3, [r4, #4]
1a004130:	f023 0304 	bic.w	r3, r3, #4
1a004134:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004136:	6823      	ldr	r3, [r4, #0]
1a004138:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00413c:	f043 0307 	orr.w	r3, r3, #7
1a004140:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004142:	4620      	mov	r0, r4
1a004144:	4901      	ldr	r1, [pc, #4]	; (1a00414c <Chip_SSP_Init+0x34>)
1a004146:	f7ff ffc7 	bl	1a0040d8 <Chip_SSP_SetBitRate>
1a00414a:	bd10      	pop	{r4, pc}
1a00414c:	000186a0 	.word	0x000186a0

1a004150 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a004150:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a004152:	4a19      	ldr	r2, [pc, #100]	; (1a0041b8 <ResetISR+0x68>)
1a004154:	4b19      	ldr	r3, [pc, #100]	; (1a0041bc <ResetISR+0x6c>)
1a004156:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a004158:	4a19      	ldr	r2, [pc, #100]	; (1a0041c0 <ResetISR+0x70>)
1a00415a:	3304      	adds	r3, #4
1a00415c:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00415e:	2300      	movs	r3, #0
1a004160:	e005      	b.n	1a00416e <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a004162:	f04f 31ff 	mov.w	r1, #4294967295
1a004166:	4a17      	ldr	r2, [pc, #92]	; (1a0041c4 <ResetISR+0x74>)
1a004168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00416c:	3301      	adds	r3, #1
1a00416e:	2b07      	cmp	r3, #7
1a004170:	d9f7      	bls.n	1a004162 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a004172:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a004174:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a004176:	f7ff fa27 	bl	1a0035c8 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a00417a:	4b13      	ldr	r3, [pc, #76]	; (1a0041c8 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00417c:	e007      	b.n	1a00418e <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00417e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a004182:	6818      	ldr	r0, [r3, #0]
1a004184:	6859      	ldr	r1, [r3, #4]
1a004186:	689a      	ldr	r2, [r3, #8]
1a004188:	f7fc f810 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00418c:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00418e:	4a0f      	ldr	r2, [pc, #60]	; (1a0041cc <ResetISR+0x7c>)
1a004190:	4293      	cmp	r3, r2
1a004192:	d3f4      	bcc.n	1a00417e <ResetISR+0x2e>
1a004194:	e006      	b.n	1a0041a4 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a004196:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a004198:	f854 0b08 	ldr.w	r0, [r4], #8
1a00419c:	6859      	ldr	r1, [r3, #4]
1a00419e:	f7fc f813 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0041a2:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0041a4:	4a0a      	ldr	r2, [pc, #40]	; (1a0041d0 <ResetISR+0x80>)
1a0041a6:	4293      	cmp	r3, r2
1a0041a8:	d3f5      	bcc.n	1a004196 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0041aa:	f000 fae3 	bl	1a004774 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0041ae:	f7ff f9f5 	bl	1a00359c <Board_Init>
    main();
1a0041b2:	f7fc fc81 	bl	1a000ab8 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0041b6:	e7fe      	b.n	1a0041b6 <ResetISR+0x66>
1a0041b8:	10df1000 	.word	0x10df1000
1a0041bc:	40053100 	.word	0x40053100
1a0041c0:	01dff7ff 	.word	0x01dff7ff
1a0041c4:	e000e280 	.word	0xe000e280
1a0041c8:	1a000114 	.word	0x1a000114
1a0041cc:	1a000150 	.word	0x1a000150
1a0041d0:	1a000178 	.word	0x1a000178

1a0041d4 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a0041d4:	4770      	bx	lr
1a0041d6:	bf00      	nop

1a0041d8 <__aeabi_uldivmod>:
1a0041d8:	b953      	cbnz	r3, 1a0041f0 <__aeabi_uldivmod+0x18>
1a0041da:	b94a      	cbnz	r2, 1a0041f0 <__aeabi_uldivmod+0x18>
1a0041dc:	2900      	cmp	r1, #0
1a0041de:	bf08      	it	eq
1a0041e0:	2800      	cmpeq	r0, #0
1a0041e2:	bf1c      	itt	ne
1a0041e4:	f04f 31ff 	movne.w	r1, #4294967295
1a0041e8:	f04f 30ff 	movne.w	r0, #4294967295
1a0041ec:	f000 b83c 	b.w	1a004268 <__aeabi_idiv0>
1a0041f0:	b082      	sub	sp, #8
1a0041f2:	46ec      	mov	ip, sp
1a0041f4:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0041f8:	f000 f81e 	bl	1a004238 <__gnu_uldivmod_helper>
1a0041fc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004200:	b002      	add	sp, #8
1a004202:	bc0c      	pop	{r2, r3}
1a004204:	4770      	bx	lr
1a004206:	bf00      	nop

1a004208 <__gnu_ldivmod_helper>:
1a004208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00420c:	9c06      	ldr	r4, [sp, #24]
1a00420e:	4615      	mov	r5, r2
1a004210:	4606      	mov	r6, r0
1a004212:	460f      	mov	r7, r1
1a004214:	4698      	mov	r8, r3
1a004216:	f000 f829 	bl	1a00426c <__divdi3>
1a00421a:	fb05 f301 	mul.w	r3, r5, r1
1a00421e:	fb00 3808 	mla	r8, r0, r8, r3
1a004222:	fba5 2300 	umull	r2, r3, r5, r0
1a004226:	1ab2      	subs	r2, r6, r2
1a004228:	4443      	add	r3, r8
1a00422a:	eb67 0303 	sbc.w	r3, r7, r3
1a00422e:	e9c4 2300 	strd	r2, r3, [r4]
1a004232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004236:	bf00      	nop

1a004238 <__gnu_uldivmod_helper>:
1a004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00423c:	9c06      	ldr	r4, [sp, #24]
1a00423e:	4690      	mov	r8, r2
1a004240:	4606      	mov	r6, r0
1a004242:	460f      	mov	r7, r1
1a004244:	461d      	mov	r5, r3
1a004246:	f000 f95f 	bl	1a004508 <__udivdi3>
1a00424a:	fb00 f505 	mul.w	r5, r0, r5
1a00424e:	fba0 2308 	umull	r2, r3, r0, r8
1a004252:	fb08 5501 	mla	r5, r8, r1, r5
1a004256:	1ab2      	subs	r2, r6, r2
1a004258:	442b      	add	r3, r5
1a00425a:	eb67 0303 	sbc.w	r3, r7, r3
1a00425e:	e9c4 2300 	strd	r2, r3, [r4]
1a004262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004266:	bf00      	nop

1a004268 <__aeabi_idiv0>:
1a004268:	4770      	bx	lr
1a00426a:	bf00      	nop

1a00426c <__divdi3>:
1a00426c:	2900      	cmp	r1, #0
1a00426e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004272:	f2c0 80a6 	blt.w	1a0043c2 <__divdi3+0x156>
1a004276:	2600      	movs	r6, #0
1a004278:	2b00      	cmp	r3, #0
1a00427a:	f2c0 809c 	blt.w	1a0043b6 <__divdi3+0x14a>
1a00427e:	4688      	mov	r8, r1
1a004280:	4694      	mov	ip, r2
1a004282:	469e      	mov	lr, r3
1a004284:	4615      	mov	r5, r2
1a004286:	4604      	mov	r4, r0
1a004288:	460f      	mov	r7, r1
1a00428a:	2b00      	cmp	r3, #0
1a00428c:	d13d      	bne.n	1a00430a <__divdi3+0x9e>
1a00428e:	428a      	cmp	r2, r1
1a004290:	d959      	bls.n	1a004346 <__divdi3+0xda>
1a004292:	fab2 f382 	clz	r3, r2
1a004296:	b13b      	cbz	r3, 1a0042a8 <__divdi3+0x3c>
1a004298:	f1c3 0220 	rsb	r2, r3, #32
1a00429c:	409f      	lsls	r7, r3
1a00429e:	fa20 f202 	lsr.w	r2, r0, r2
1a0042a2:	409d      	lsls	r5, r3
1a0042a4:	4317      	orrs	r7, r2
1a0042a6:	409c      	lsls	r4, r3
1a0042a8:	0c29      	lsrs	r1, r5, #16
1a0042aa:	0c22      	lsrs	r2, r4, #16
1a0042ac:	fbb7 fef1 	udiv	lr, r7, r1
1a0042b0:	b2a8      	uxth	r0, r5
1a0042b2:	fb01 771e 	mls	r7, r1, lr, r7
1a0042b6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a0042ba:	fb00 f30e 	mul.w	r3, r0, lr
1a0042be:	42bb      	cmp	r3, r7
1a0042c0:	d90a      	bls.n	1a0042d8 <__divdi3+0x6c>
1a0042c2:	197f      	adds	r7, r7, r5
1a0042c4:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0042c8:	f080 8105 	bcs.w	1a0044d6 <__divdi3+0x26a>
1a0042cc:	42bb      	cmp	r3, r7
1a0042ce:	f240 8102 	bls.w	1a0044d6 <__divdi3+0x26a>
1a0042d2:	f1ae 0e02 	sub.w	lr, lr, #2
1a0042d6:	442f      	add	r7, r5
1a0042d8:	1aff      	subs	r7, r7, r3
1a0042da:	b2a4      	uxth	r4, r4
1a0042dc:	fbb7 f3f1 	udiv	r3, r7, r1
1a0042e0:	fb01 7713 	mls	r7, r1, r3, r7
1a0042e4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0042e8:	fb00 f003 	mul.w	r0, r0, r3
1a0042ec:	42b8      	cmp	r0, r7
1a0042ee:	d908      	bls.n	1a004302 <__divdi3+0x96>
1a0042f0:	197f      	adds	r7, r7, r5
1a0042f2:	f103 32ff 	add.w	r2, r3, #4294967295
1a0042f6:	f080 80f0 	bcs.w	1a0044da <__divdi3+0x26e>
1a0042fa:	42b8      	cmp	r0, r7
1a0042fc:	f240 80ed 	bls.w	1a0044da <__divdi3+0x26e>
1a004300:	3b02      	subs	r3, #2
1a004302:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a004306:	2200      	movs	r2, #0
1a004308:	e003      	b.n	1a004312 <__divdi3+0xa6>
1a00430a:	428b      	cmp	r3, r1
1a00430c:	d90f      	bls.n	1a00432e <__divdi3+0xc2>
1a00430e:	2200      	movs	r2, #0
1a004310:	4613      	mov	r3, r2
1a004312:	1c34      	adds	r4, r6, #0
1a004314:	bf18      	it	ne
1a004316:	2401      	movne	r4, #1
1a004318:	4260      	negs	r0, r4
1a00431a:	f04f 0500 	mov.w	r5, #0
1a00431e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a004322:	4058      	eors	r0, r3
1a004324:	4051      	eors	r1, r2
1a004326:	1900      	adds	r0, r0, r4
1a004328:	4169      	adcs	r1, r5
1a00432a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00432e:	fab3 f283 	clz	r2, r3
1a004332:	2a00      	cmp	r2, #0
1a004334:	f040 8086 	bne.w	1a004444 <__divdi3+0x1d8>
1a004338:	428b      	cmp	r3, r1
1a00433a:	d302      	bcc.n	1a004342 <__divdi3+0xd6>
1a00433c:	4584      	cmp	ip, r0
1a00433e:	f200 80db 	bhi.w	1a0044f8 <__divdi3+0x28c>
1a004342:	2301      	movs	r3, #1
1a004344:	e7e5      	b.n	1a004312 <__divdi3+0xa6>
1a004346:	b912      	cbnz	r2, 1a00434e <__divdi3+0xe2>
1a004348:	2301      	movs	r3, #1
1a00434a:	fbb3 f5f2 	udiv	r5, r3, r2
1a00434e:	fab5 f085 	clz	r0, r5
1a004352:	2800      	cmp	r0, #0
1a004354:	d13b      	bne.n	1a0043ce <__divdi3+0x162>
1a004356:	1b78      	subs	r0, r7, r5
1a004358:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00435c:	fa1f fc85 	uxth.w	ip, r5
1a004360:	2201      	movs	r2, #1
1a004362:	fbb0 f8fe 	udiv	r8, r0, lr
1a004366:	0c21      	lsrs	r1, r4, #16
1a004368:	fb0e 0718 	mls	r7, lr, r8, r0
1a00436c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a004370:	fb0c f308 	mul.w	r3, ip, r8
1a004374:	42bb      	cmp	r3, r7
1a004376:	d907      	bls.n	1a004388 <__divdi3+0x11c>
1a004378:	197f      	adds	r7, r7, r5
1a00437a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00437e:	d202      	bcs.n	1a004386 <__divdi3+0x11a>
1a004380:	42bb      	cmp	r3, r7
1a004382:	f200 80bd 	bhi.w	1a004500 <__divdi3+0x294>
1a004386:	4688      	mov	r8, r1
1a004388:	1aff      	subs	r7, r7, r3
1a00438a:	b2a4      	uxth	r4, r4
1a00438c:	fbb7 f3fe 	udiv	r3, r7, lr
1a004390:	fb0e 7713 	mls	r7, lr, r3, r7
1a004394:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a004398:	fb0c fc03 	mul.w	ip, ip, r3
1a00439c:	45bc      	cmp	ip, r7
1a00439e:	d907      	bls.n	1a0043b0 <__divdi3+0x144>
1a0043a0:	197f      	adds	r7, r7, r5
1a0043a2:	f103 31ff 	add.w	r1, r3, #4294967295
1a0043a6:	d202      	bcs.n	1a0043ae <__divdi3+0x142>
1a0043a8:	45bc      	cmp	ip, r7
1a0043aa:	f200 80a7 	bhi.w	1a0044fc <__divdi3+0x290>
1a0043ae:	460b      	mov	r3, r1
1a0043b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0043b4:	e7ad      	b.n	1a004312 <__divdi3+0xa6>
1a0043b6:	4252      	negs	r2, r2
1a0043b8:	ea6f 0606 	mvn.w	r6, r6
1a0043bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0043c0:	e75d      	b.n	1a00427e <__divdi3+0x12>
1a0043c2:	4240      	negs	r0, r0
1a0043c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0043c8:	f04f 36ff 	mov.w	r6, #4294967295
1a0043cc:	e754      	b.n	1a004278 <__divdi3+0xc>
1a0043ce:	f1c0 0220 	rsb	r2, r0, #32
1a0043d2:	fa24 f102 	lsr.w	r1, r4, r2
1a0043d6:	fa07 f300 	lsl.w	r3, r7, r0
1a0043da:	4085      	lsls	r5, r0
1a0043dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0043e0:	40d7      	lsrs	r7, r2
1a0043e2:	4319      	orrs	r1, r3
1a0043e4:	fbb7 f2fe 	udiv	r2, r7, lr
1a0043e8:	0c0b      	lsrs	r3, r1, #16
1a0043ea:	fb0e 7712 	mls	r7, lr, r2, r7
1a0043ee:	fa1f fc85 	uxth.w	ip, r5
1a0043f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0043f6:	fb0c f702 	mul.w	r7, ip, r2
1a0043fa:	429f      	cmp	r7, r3
1a0043fc:	fa04 f400 	lsl.w	r4, r4, r0
1a004400:	d907      	bls.n	1a004412 <__divdi3+0x1a6>
1a004402:	195b      	adds	r3, r3, r5
1a004404:	f102 30ff 	add.w	r0, r2, #4294967295
1a004408:	d274      	bcs.n	1a0044f4 <__divdi3+0x288>
1a00440a:	429f      	cmp	r7, r3
1a00440c:	d972      	bls.n	1a0044f4 <__divdi3+0x288>
1a00440e:	3a02      	subs	r2, #2
1a004410:	442b      	add	r3, r5
1a004412:	1bdf      	subs	r7, r3, r7
1a004414:	b289      	uxth	r1, r1
1a004416:	fbb7 f8fe 	udiv	r8, r7, lr
1a00441a:	fb0e 7318 	mls	r3, lr, r8, r7
1a00441e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004422:	fb0c f708 	mul.w	r7, ip, r8
1a004426:	429f      	cmp	r7, r3
1a004428:	d908      	bls.n	1a00443c <__divdi3+0x1d0>
1a00442a:	195b      	adds	r3, r3, r5
1a00442c:	f108 31ff 	add.w	r1, r8, #4294967295
1a004430:	d25c      	bcs.n	1a0044ec <__divdi3+0x280>
1a004432:	429f      	cmp	r7, r3
1a004434:	d95a      	bls.n	1a0044ec <__divdi3+0x280>
1a004436:	f1a8 0802 	sub.w	r8, r8, #2
1a00443a:	442b      	add	r3, r5
1a00443c:	1bd8      	subs	r0, r3, r7
1a00443e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a004442:	e78e      	b.n	1a004362 <__divdi3+0xf6>
1a004444:	f1c2 0320 	rsb	r3, r2, #32
1a004448:	fa2c f103 	lsr.w	r1, ip, r3
1a00444c:	fa0e fe02 	lsl.w	lr, lr, r2
1a004450:	fa20 f703 	lsr.w	r7, r0, r3
1a004454:	ea41 0e0e 	orr.w	lr, r1, lr
1a004458:	fa08 f002 	lsl.w	r0, r8, r2
1a00445c:	fa28 f103 	lsr.w	r1, r8, r3
1a004460:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a004464:	4338      	orrs	r0, r7
1a004466:	fbb1 f8f5 	udiv	r8, r1, r5
1a00446a:	0c03      	lsrs	r3, r0, #16
1a00446c:	fb05 1118 	mls	r1, r5, r8, r1
1a004470:	fa1f f78e 	uxth.w	r7, lr
1a004474:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a004478:	fb07 f308 	mul.w	r3, r7, r8
1a00447c:	428b      	cmp	r3, r1
1a00447e:	fa0c fc02 	lsl.w	ip, ip, r2
1a004482:	d909      	bls.n	1a004498 <__divdi3+0x22c>
1a004484:	eb11 010e 	adds.w	r1, r1, lr
1a004488:	f108 39ff 	add.w	r9, r8, #4294967295
1a00448c:	d230      	bcs.n	1a0044f0 <__divdi3+0x284>
1a00448e:	428b      	cmp	r3, r1
1a004490:	d92e      	bls.n	1a0044f0 <__divdi3+0x284>
1a004492:	f1a8 0802 	sub.w	r8, r8, #2
1a004496:	4471      	add	r1, lr
1a004498:	1ac9      	subs	r1, r1, r3
1a00449a:	b280      	uxth	r0, r0
1a00449c:	fbb1 f3f5 	udiv	r3, r1, r5
1a0044a0:	fb05 1113 	mls	r1, r5, r3, r1
1a0044a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0044a8:	fb07 f703 	mul.w	r7, r7, r3
1a0044ac:	428f      	cmp	r7, r1
1a0044ae:	d908      	bls.n	1a0044c2 <__divdi3+0x256>
1a0044b0:	eb11 010e 	adds.w	r1, r1, lr
1a0044b4:	f103 30ff 	add.w	r0, r3, #4294967295
1a0044b8:	d216      	bcs.n	1a0044e8 <__divdi3+0x27c>
1a0044ba:	428f      	cmp	r7, r1
1a0044bc:	d914      	bls.n	1a0044e8 <__divdi3+0x27c>
1a0044be:	3b02      	subs	r3, #2
1a0044c0:	4471      	add	r1, lr
1a0044c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0044c6:	1bc9      	subs	r1, r1, r7
1a0044c8:	fba3 890c 	umull	r8, r9, r3, ip
1a0044cc:	4549      	cmp	r1, r9
1a0044ce:	d309      	bcc.n	1a0044e4 <__divdi3+0x278>
1a0044d0:	d005      	beq.n	1a0044de <__divdi3+0x272>
1a0044d2:	2200      	movs	r2, #0
1a0044d4:	e71d      	b.n	1a004312 <__divdi3+0xa6>
1a0044d6:	4696      	mov	lr, r2
1a0044d8:	e6fe      	b.n	1a0042d8 <__divdi3+0x6c>
1a0044da:	4613      	mov	r3, r2
1a0044dc:	e711      	b.n	1a004302 <__divdi3+0x96>
1a0044de:	4094      	lsls	r4, r2
1a0044e0:	4544      	cmp	r4, r8
1a0044e2:	d2f6      	bcs.n	1a0044d2 <__divdi3+0x266>
1a0044e4:	3b01      	subs	r3, #1
1a0044e6:	e7f4      	b.n	1a0044d2 <__divdi3+0x266>
1a0044e8:	4603      	mov	r3, r0
1a0044ea:	e7ea      	b.n	1a0044c2 <__divdi3+0x256>
1a0044ec:	4688      	mov	r8, r1
1a0044ee:	e7a5      	b.n	1a00443c <__divdi3+0x1d0>
1a0044f0:	46c8      	mov	r8, r9
1a0044f2:	e7d1      	b.n	1a004498 <__divdi3+0x22c>
1a0044f4:	4602      	mov	r2, r0
1a0044f6:	e78c      	b.n	1a004412 <__divdi3+0x1a6>
1a0044f8:	4613      	mov	r3, r2
1a0044fa:	e70a      	b.n	1a004312 <__divdi3+0xa6>
1a0044fc:	3b02      	subs	r3, #2
1a0044fe:	e757      	b.n	1a0043b0 <__divdi3+0x144>
1a004500:	f1a8 0802 	sub.w	r8, r8, #2
1a004504:	442f      	add	r7, r5
1a004506:	e73f      	b.n	1a004388 <__divdi3+0x11c>

1a004508 <__udivdi3>:
1a004508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00450c:	2b00      	cmp	r3, #0
1a00450e:	d144      	bne.n	1a00459a <__udivdi3+0x92>
1a004510:	428a      	cmp	r2, r1
1a004512:	4615      	mov	r5, r2
1a004514:	4604      	mov	r4, r0
1a004516:	d94f      	bls.n	1a0045b8 <__udivdi3+0xb0>
1a004518:	fab2 f782 	clz	r7, r2
1a00451c:	460e      	mov	r6, r1
1a00451e:	b14f      	cbz	r7, 1a004534 <__udivdi3+0x2c>
1a004520:	f1c7 0320 	rsb	r3, r7, #32
1a004524:	40b9      	lsls	r1, r7
1a004526:	fa20 f603 	lsr.w	r6, r0, r3
1a00452a:	fa02 f507 	lsl.w	r5, r2, r7
1a00452e:	430e      	orrs	r6, r1
1a004530:	fa00 f407 	lsl.w	r4, r0, r7
1a004534:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004538:	0c23      	lsrs	r3, r4, #16
1a00453a:	fbb6 f0fe 	udiv	r0, r6, lr
1a00453e:	b2af      	uxth	r7, r5
1a004540:	fb0e 6110 	mls	r1, lr, r0, r6
1a004544:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004548:	fb07 f100 	mul.w	r1, r7, r0
1a00454c:	4299      	cmp	r1, r3
1a00454e:	d909      	bls.n	1a004564 <__udivdi3+0x5c>
1a004550:	195b      	adds	r3, r3, r5
1a004552:	f100 32ff 	add.w	r2, r0, #4294967295
1a004556:	f080 80ec 	bcs.w	1a004732 <__udivdi3+0x22a>
1a00455a:	4299      	cmp	r1, r3
1a00455c:	f240 80e9 	bls.w	1a004732 <__udivdi3+0x22a>
1a004560:	3802      	subs	r0, #2
1a004562:	442b      	add	r3, r5
1a004564:	1a5a      	subs	r2, r3, r1
1a004566:	b2a4      	uxth	r4, r4
1a004568:	fbb2 f3fe 	udiv	r3, r2, lr
1a00456c:	fb0e 2213 	mls	r2, lr, r3, r2
1a004570:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a004574:	fb07 f703 	mul.w	r7, r7, r3
1a004578:	4297      	cmp	r7, r2
1a00457a:	d908      	bls.n	1a00458e <__udivdi3+0x86>
1a00457c:	1952      	adds	r2, r2, r5
1a00457e:	f103 31ff 	add.w	r1, r3, #4294967295
1a004582:	f080 80d8 	bcs.w	1a004736 <__udivdi3+0x22e>
1a004586:	4297      	cmp	r7, r2
1a004588:	f240 80d5 	bls.w	1a004736 <__udivdi3+0x22e>
1a00458c:	3b02      	subs	r3, #2
1a00458e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a004592:	2600      	movs	r6, #0
1a004594:	4631      	mov	r1, r6
1a004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00459a:	428b      	cmp	r3, r1
1a00459c:	d847      	bhi.n	1a00462e <__udivdi3+0x126>
1a00459e:	fab3 f683 	clz	r6, r3
1a0045a2:	2e00      	cmp	r6, #0
1a0045a4:	d148      	bne.n	1a004638 <__udivdi3+0x130>
1a0045a6:	428b      	cmp	r3, r1
1a0045a8:	d302      	bcc.n	1a0045b0 <__udivdi3+0xa8>
1a0045aa:	4282      	cmp	r2, r0
1a0045ac:	f200 80cd 	bhi.w	1a00474a <__udivdi3+0x242>
1a0045b0:	2001      	movs	r0, #1
1a0045b2:	4631      	mov	r1, r6
1a0045b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045b8:	b912      	cbnz	r2, 1a0045c0 <__udivdi3+0xb8>
1a0045ba:	2501      	movs	r5, #1
1a0045bc:	fbb5 f5f2 	udiv	r5, r5, r2
1a0045c0:	fab5 f885 	clz	r8, r5
1a0045c4:	f1b8 0f00 	cmp.w	r8, #0
1a0045c8:	d177      	bne.n	1a0046ba <__udivdi3+0x1b2>
1a0045ca:	1b4a      	subs	r2, r1, r5
1a0045cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0045d0:	b2af      	uxth	r7, r5
1a0045d2:	2601      	movs	r6, #1
1a0045d4:	fbb2 f0fe 	udiv	r0, r2, lr
1a0045d8:	0c23      	lsrs	r3, r4, #16
1a0045da:	fb0e 2110 	mls	r1, lr, r0, r2
1a0045de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0045e2:	fb07 f300 	mul.w	r3, r7, r0
1a0045e6:	428b      	cmp	r3, r1
1a0045e8:	d907      	bls.n	1a0045fa <__udivdi3+0xf2>
1a0045ea:	1949      	adds	r1, r1, r5
1a0045ec:	f100 32ff 	add.w	r2, r0, #4294967295
1a0045f0:	d202      	bcs.n	1a0045f8 <__udivdi3+0xf0>
1a0045f2:	428b      	cmp	r3, r1
1a0045f4:	f200 80ba 	bhi.w	1a00476c <__udivdi3+0x264>
1a0045f8:	4610      	mov	r0, r2
1a0045fa:	1ac9      	subs	r1, r1, r3
1a0045fc:	b2a4      	uxth	r4, r4
1a0045fe:	fbb1 f3fe 	udiv	r3, r1, lr
1a004602:	fb0e 1113 	mls	r1, lr, r3, r1
1a004606:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a00460a:	fb07 f703 	mul.w	r7, r7, r3
1a00460e:	42a7      	cmp	r7, r4
1a004610:	d908      	bls.n	1a004624 <__udivdi3+0x11c>
1a004612:	1964      	adds	r4, r4, r5
1a004614:	f103 32ff 	add.w	r2, r3, #4294967295
1a004618:	f080 808f 	bcs.w	1a00473a <__udivdi3+0x232>
1a00461c:	42a7      	cmp	r7, r4
1a00461e:	f240 808c 	bls.w	1a00473a <__udivdi3+0x232>
1a004622:	3b02      	subs	r3, #2
1a004624:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a004628:	4631      	mov	r1, r6
1a00462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00462e:	2600      	movs	r6, #0
1a004630:	4630      	mov	r0, r6
1a004632:	4631      	mov	r1, r6
1a004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004638:	f1c6 0420 	rsb	r4, r6, #32
1a00463c:	fa22 f504 	lsr.w	r5, r2, r4
1a004640:	40b3      	lsls	r3, r6
1a004642:	432b      	orrs	r3, r5
1a004644:	fa20 fc04 	lsr.w	ip, r0, r4
1a004648:	fa01 f706 	lsl.w	r7, r1, r6
1a00464c:	fa21 f504 	lsr.w	r5, r1, r4
1a004650:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a004654:	ea4c 0707 	orr.w	r7, ip, r7
1a004658:	fbb5 f8fe 	udiv	r8, r5, lr
1a00465c:	0c39      	lsrs	r1, r7, #16
1a00465e:	fb0e 5518 	mls	r5, lr, r8, r5
1a004662:	fa1f fc83 	uxth.w	ip, r3
1a004666:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a00466a:	fb0c f108 	mul.w	r1, ip, r8
1a00466e:	42a9      	cmp	r1, r5
1a004670:	fa02 f206 	lsl.w	r2, r2, r6
1a004674:	d904      	bls.n	1a004680 <__udivdi3+0x178>
1a004676:	18ed      	adds	r5, r5, r3
1a004678:	f108 34ff 	add.w	r4, r8, #4294967295
1a00467c:	d367      	bcc.n	1a00474e <__udivdi3+0x246>
1a00467e:	46a0      	mov	r8, r4
1a004680:	1a6d      	subs	r5, r5, r1
1a004682:	b2bf      	uxth	r7, r7
1a004684:	fbb5 f4fe 	udiv	r4, r5, lr
1a004688:	fb0e 5514 	mls	r5, lr, r4, r5
1a00468c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a004690:	fb0c fc04 	mul.w	ip, ip, r4
1a004694:	458c      	cmp	ip, r1
1a004696:	d904      	bls.n	1a0046a2 <__udivdi3+0x19a>
1a004698:	18c9      	adds	r1, r1, r3
1a00469a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00469e:	d35c      	bcc.n	1a00475a <__udivdi3+0x252>
1a0046a0:	462c      	mov	r4, r5
1a0046a2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a0046a6:	ebcc 0101 	rsb	r1, ip, r1
1a0046aa:	fba4 2302 	umull	r2, r3, r4, r2
1a0046ae:	4299      	cmp	r1, r3
1a0046b0:	d348      	bcc.n	1a004744 <__udivdi3+0x23c>
1a0046b2:	d044      	beq.n	1a00473e <__udivdi3+0x236>
1a0046b4:	4620      	mov	r0, r4
1a0046b6:	2600      	movs	r6, #0
1a0046b8:	e76c      	b.n	1a004594 <__udivdi3+0x8c>
1a0046ba:	f1c8 0420 	rsb	r4, r8, #32
1a0046be:	fa01 f308 	lsl.w	r3, r1, r8
1a0046c2:	fa05 f508 	lsl.w	r5, r5, r8
1a0046c6:	fa20 f704 	lsr.w	r7, r0, r4
1a0046ca:	40e1      	lsrs	r1, r4
1a0046cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0046d0:	431f      	orrs	r7, r3
1a0046d2:	fbb1 f6fe 	udiv	r6, r1, lr
1a0046d6:	0c3a      	lsrs	r2, r7, #16
1a0046d8:	fb0e 1116 	mls	r1, lr, r6, r1
1a0046dc:	fa1f fc85 	uxth.w	ip, r5
1a0046e0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0046e4:	fb0c f206 	mul.w	r2, ip, r6
1a0046e8:	429a      	cmp	r2, r3
1a0046ea:	fa00 f408 	lsl.w	r4, r0, r8
1a0046ee:	d907      	bls.n	1a004700 <__udivdi3+0x1f8>
1a0046f0:	195b      	adds	r3, r3, r5
1a0046f2:	f106 31ff 	add.w	r1, r6, #4294967295
1a0046f6:	d237      	bcs.n	1a004768 <__udivdi3+0x260>
1a0046f8:	429a      	cmp	r2, r3
1a0046fa:	d935      	bls.n	1a004768 <__udivdi3+0x260>
1a0046fc:	3e02      	subs	r6, #2
1a0046fe:	442b      	add	r3, r5
1a004700:	1a9b      	subs	r3, r3, r2
1a004702:	b2bf      	uxth	r7, r7
1a004704:	fbb3 f0fe 	udiv	r0, r3, lr
1a004708:	fb0e 3310 	mls	r3, lr, r0, r3
1a00470c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a004710:	fb0c f100 	mul.w	r1, ip, r0
1a004714:	4299      	cmp	r1, r3
1a004716:	d907      	bls.n	1a004728 <__udivdi3+0x220>
1a004718:	195b      	adds	r3, r3, r5
1a00471a:	f100 32ff 	add.w	r2, r0, #4294967295
1a00471e:	d221      	bcs.n	1a004764 <__udivdi3+0x25c>
1a004720:	4299      	cmp	r1, r3
1a004722:	d91f      	bls.n	1a004764 <__udivdi3+0x25c>
1a004724:	3802      	subs	r0, #2
1a004726:	442b      	add	r3, r5
1a004728:	1a5a      	subs	r2, r3, r1
1a00472a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00472e:	4667      	mov	r7, ip
1a004730:	e750      	b.n	1a0045d4 <__udivdi3+0xcc>
1a004732:	4610      	mov	r0, r2
1a004734:	e716      	b.n	1a004564 <__udivdi3+0x5c>
1a004736:	460b      	mov	r3, r1
1a004738:	e729      	b.n	1a00458e <__udivdi3+0x86>
1a00473a:	4613      	mov	r3, r2
1a00473c:	e772      	b.n	1a004624 <__udivdi3+0x11c>
1a00473e:	40b0      	lsls	r0, r6
1a004740:	4290      	cmp	r0, r2
1a004742:	d2b7      	bcs.n	1a0046b4 <__udivdi3+0x1ac>
1a004744:	1e60      	subs	r0, r4, #1
1a004746:	2600      	movs	r6, #0
1a004748:	e724      	b.n	1a004594 <__udivdi3+0x8c>
1a00474a:	4630      	mov	r0, r6
1a00474c:	e722      	b.n	1a004594 <__udivdi3+0x8c>
1a00474e:	42a9      	cmp	r1, r5
1a004750:	d995      	bls.n	1a00467e <__udivdi3+0x176>
1a004752:	f1a8 0802 	sub.w	r8, r8, #2
1a004756:	441d      	add	r5, r3
1a004758:	e792      	b.n	1a004680 <__udivdi3+0x178>
1a00475a:	458c      	cmp	ip, r1
1a00475c:	d9a0      	bls.n	1a0046a0 <__udivdi3+0x198>
1a00475e:	3c02      	subs	r4, #2
1a004760:	4419      	add	r1, r3
1a004762:	e79e      	b.n	1a0046a2 <__udivdi3+0x19a>
1a004764:	4610      	mov	r0, r2
1a004766:	e7df      	b.n	1a004728 <__udivdi3+0x220>
1a004768:	460e      	mov	r6, r1
1a00476a:	e7c9      	b.n	1a004700 <__udivdi3+0x1f8>
1a00476c:	3802      	subs	r0, #2
1a00476e:	4429      	add	r1, r5
1a004770:	e743      	b.n	1a0045fa <__udivdi3+0xf2>
1a004772:	bf00      	nop

1a004774 <__libc_init_array>:
1a004774:	b570      	push	{r4, r5, r6, lr}
1a004776:	4b0e      	ldr	r3, [pc, #56]	; (1a0047b0 <__libc_init_array+0x3c>)
1a004778:	4c0e      	ldr	r4, [pc, #56]	; (1a0047b4 <__libc_init_array+0x40>)
1a00477a:	1ae4      	subs	r4, r4, r3
1a00477c:	10a4      	asrs	r4, r4, #2
1a00477e:	2500      	movs	r5, #0
1a004780:	461e      	mov	r6, r3
1a004782:	42a5      	cmp	r5, r4
1a004784:	d004      	beq.n	1a004790 <__libc_init_array+0x1c>
1a004786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00478a:	4798      	blx	r3
1a00478c:	3501      	adds	r5, #1
1a00478e:	e7f8      	b.n	1a004782 <__libc_init_array+0xe>
1a004790:	f7ff fd20 	bl	1a0041d4 <_init>
1a004794:	4c08      	ldr	r4, [pc, #32]	; (1a0047b8 <__libc_init_array+0x44>)
1a004796:	4b09      	ldr	r3, [pc, #36]	; (1a0047bc <__libc_init_array+0x48>)
1a004798:	1ae4      	subs	r4, r4, r3
1a00479a:	10a4      	asrs	r4, r4, #2
1a00479c:	2500      	movs	r5, #0
1a00479e:	461e      	mov	r6, r3
1a0047a0:	42a5      	cmp	r5, r4
1a0047a2:	d004      	beq.n	1a0047ae <__libc_init_array+0x3a>
1a0047a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0047a8:	4798      	blx	r3
1a0047aa:	3501      	adds	r5, #1
1a0047ac:	e7f8      	b.n	1a0047a0 <__libc_init_array+0x2c>
1a0047ae:	bd70      	pop	{r4, r5, r6, pc}
1a0047b0:	1a004b78 	.word	0x1a004b78
1a0047b4:	1a004b78 	.word	0x1a004b78
1a0047b8:	1a004b78 	.word	0x1a004b78
1a0047bc:	1a004b78 	.word	0x1a004b78

1a0047c0 <memcpy>:
1a0047c0:	b510      	push	{r4, lr}
1a0047c2:	1e43      	subs	r3, r0, #1
1a0047c4:	440a      	add	r2, r1
1a0047c6:	4291      	cmp	r1, r2
1a0047c8:	d004      	beq.n	1a0047d4 <memcpy+0x14>
1a0047ca:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0047ce:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0047d2:	e7f8      	b.n	1a0047c6 <memcpy+0x6>
1a0047d4:	bd10      	pop	{r4, pc}

1a0047d6 <memset>:
1a0047d6:	4402      	add	r2, r0
1a0047d8:	4603      	mov	r3, r0
1a0047da:	4293      	cmp	r3, r2
1a0047dc:	d002      	beq.n	1a0047e4 <memset+0xe>
1a0047de:	f803 1b01 	strb.w	r1, [r3], #1
1a0047e2:	e7fa      	b.n	1a0047da <memset+0x4>
1a0047e4:	4770      	bx	lr

1a0047e6 <strcpy>:
1a0047e6:	4603      	mov	r3, r0
1a0047e8:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0047ec:	f803 2b01 	strb.w	r2, [r3], #1
1a0047f0:	2a00      	cmp	r2, #0
1a0047f2:	d1f9      	bne.n	1a0047e8 <strcpy+0x2>
1a0047f4:	4770      	bx	lr
1a0047f6:	0000      	movs	r0, r0
1a0047f8:	745f7872 	.word	0x745f7872
1a0047fc:	6f656d69 	.word	0x6f656d69
1a004800:	745f7475 	.word	0x745f7475
1a004804:	72656d69 	.word	0x72656d69
1a004808:	00000000 	.word	0x00000000
1a00480c:	635f7874 	.word	0x635f7874
1a004810:	626c6c61 	.word	0x626c6c61
1a004814:	5f6b6361 	.word	0x5f6b6361
1a004818:	645f736d 	.word	0x645f736d
1a00481c:	79616c65 	.word	0x79616c65
1a004820:	00000000 	.word	0x00000000

1a004824 <crc8_small_table>:
1a004824:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
1a004834:	5f505041 6b736154 00000000 74736953     APP_Task....Sist
1a004844:	20616d65 63696e69 696c6169 6f64617a     ema inicializado
1a004854:	00000000 454c4449 00000000 51726d54     ....IDLE....TmrQ
1a004864:	00000000 20726d54 00637653              ....Tmr Svc.

1a004870 <lpcUarts>:
1a004870:	40081000 06020406 00180205 40081000     ...@...........@
1a004880:	09070509 00180706 40082000 00000000     ......... .@....
1a004890:	00190000 400c1000 07060107 001a0602     .......@........
1a0048a0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0048b0:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0048c0:	0072656d                                mer.

1a0048c4 <gpioPinsInit>:
1a0048c4:	02000104 00050701 05010d03 04080100     ................
1a0048d4:	02020002 02000304 00000403 04070002     ................
1a0048e4:	030c0300 09050402 05040103 04030208     ................
1a0048f4:	04020305 06040504 0802000c 03000b06     ................
1a004904:	00090607 07060503 060f0504 03030004     ................
1a004914:	02000404 00050404 06040502 04060200     ................
1a004924:	0c050408 05040a04 0003010e 14010a00     ................
1a004934:	010f0000 0d000012 00001101 0010010c     ................
1a004944:	07070300 000f0300 01000001 00000000     ................
1a004954:	000a0600 08060603 06100504 04030005     ................
1a004964:	03000106 04090400 04010d05 010b0000     ................
1a004974:	0200000f 00000001 00010104 02010800     ................
1a004984:	01090000 09010006 05040002 04010200     ................
1a004994:	02020105 02020504 0e00000a 01000b02     ................
1a0049a4:	000c020b 00040c01 04000200 01020001     ................
1a0049b4:	02000204 00030402 03070302 070b0300     ................
1a0049c4:	0c030004 03000507 0006070d 01020e03     ................
1a0049d4:	04010504 06020006 02000504 00040405     ................
1a0049e4:	08040402 040c0504 0d050409 05040a04     ................
1a0049f4:	0005010e 00000801                       ........

1a0049fc <ultrasonicSensorsIrqMap>:
1a0049fc:	00020100                                ....

1a004a00 <GpioPorts>:
1a004a00:	03030003 0f050403 05031005 07030603     ................
1a004a10:	00000802                                ....

1a004a14 <OscRateIn>:
1a004a14:	00b71b00                                ....

1a004a18 <ExtRateIn>:
1a004a18:	00000000                                ....

1a004a1c <GpioButtons>:
1a004a1c:	08000400 09010900                       ........

1a004a24 <GpioLeds>:
1a004a24:	01050005 0e000205 0c010b01              ............

1a004a30 <InitClkStates>:
1a004a30:	01010f01                                ....

1a004a34 <pinmuxing>:
1a004a34:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004a44:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004a54:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004a64:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004a74:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004a84:	00d50301 00d50401 00160107 00560207     ..............V.
1a004a94:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004aa4:	00570206                                ..W.

1a004aa8 <UART_BClock>:
1a004aa8:	01a201c2 01620182                       ......b.

1a004ab0 <UART_PClock>:
1a004ab0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004ac0:	000000ff                                ....

1a004ac4 <periph_to_base>:
1a004ac4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004ad4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004ae4:	000100e0 01000100 01200003 00060120     .......... . ...
1a004af4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004b04:	01820013 00120182 01a201a2 01c20011     ................
1a004b14:	001001c2 01e201e2 0202000f 000e0202     ................
1a004b24:	02220222 0223000d 001c0223              "."...#.#...

1a004b30 <InitClkStates>:
1a004b30:	00010100 00010909 0001090a 01010701     ................
1a004b40:	00010902 00010906 0101090c 0001090d     ................
1a004b50:	0001090e 0001090f 00010910 00010911     ................
1a004b60:	00010912 00010913 00011114 00011119     ................
1a004b70:	0001111a 0001111b                       ........
